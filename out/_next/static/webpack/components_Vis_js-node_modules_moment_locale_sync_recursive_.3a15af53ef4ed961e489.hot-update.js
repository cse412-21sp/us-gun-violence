self["webpackHotUpdate_N_E"]("components_Vis_js-node_modules_moment_locale_sync_recursive_",{

/***/ "./components/functions/PrepetratorsByGender.js":
/*!******************************************************!*\
  !*** ./components/functions/PrepetratorsByGender.js ***!
  \******************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* harmony import */ var arquero__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! arquero */ "./node_modules/arquero/src/index.js");
/* module decorator */ module = __webpack_require__.hmd(module);






function perpetratorsByGender(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var p = dataSet.p;
  var brush = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.selectInterval() // Brush is a better (vivid?) name than selection in this case!
  .encodings("x"); // limit selection to x-axis (year) values

  var x = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().yearmonth("date");
  var gender_ratio = p.derive({
    month: function month(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.utcmonth(d.date);
    },
    is_male: function is_male(d) {
      return d.gender === "Male";
    },
    is_female: function is_female(d) {
      return d.gender === "Female";
    }
  }).groupby(["month", "year"]).rollup({
    female_pctg: function female_pctg(d) {
      return 100 * arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_female) / (arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_female) + arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_male));
    },
    male_pctg: function male_pctg(d) {
      return 100 * arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_male) / (arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_female) + arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_male));
    },
    date: function date(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.min(arquero__WEBPACK_IMPORTED_MODULE_4__.op.utcdatetime(d.date));
    }
  }).derive({
    date: function date(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.datetime(d.year, d.month);
    }
  }).rename({
    male_pctg: "male",
    female_pctg: "female"
  }).fold(["female", "male"]).rename({
    key: "gender"
  });
  var gender_count = p.filter(function (d) {
    return d.type === "Subject-Suspect";
  }).derive({
    month: function month(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.utcmonth(d.date);
    },
    is_male: function is_male(d) {
      return d.gender === "Male";
    },
    is_female: function is_female(d) {
      return d.gender === "Female";
    }
  }).groupby(["month", "year"]).rollup({
    female_count: function female_count(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_female);
    },
    male_count: function male_count(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_male);
    },
    date: function date(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.min(arquero__WEBPACK_IMPORTED_MODULE_4__.op.utcdatetime(d.date));
    }
  }).derive({
    date: function date(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.datetime(d.year, d.month);
    }
  }).rename({
    male_count: "male",
    female_count: "female"
  }).fold(["female", "male"]).rename({
    key: "gender"
  });
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markArea({
    opacity: 0.5
  }).data(gender_count).encode(x, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldQ("value").title("Number of perpetrators"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("gender").scale({
    scheme: "set1"
  })).params(brush).width(450).height(360), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markArea({
    opacity: 0.5
  }).data(gender_ratio).encode(x, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldQ("value").title("Percentage of perpetrators"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("gender").scale({
    scheme: "set1"
  })).encode(x.scale({
    domain: brush
  })).width(450).height(360));
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (perpetratorsByGender);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,