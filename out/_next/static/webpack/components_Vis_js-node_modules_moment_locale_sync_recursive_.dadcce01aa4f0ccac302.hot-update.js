self["webpackHotUpdate_N_E"]("components_Vis_js-node_modules_moment_locale_sync_recursive_",{

/***/ "./components/Vis.js":
/*!***************************!*\
  !*** ./components/Vis.js ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ "./node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/styled/base */ "./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js");
/* harmony import */ var _components_functions_PrepetratorsByGender__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/functions/PrepetratorsByGender */ "./components/functions/PrepetratorsByGender.js");
/* harmony import */ var _components_functions_perpetratorMapFull__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/functions/perpetratorMapFull */ "./components/functions/perpetratorMapFull.js");
/* harmony import */ var _components_functions_ageHistogram__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/functions/ageHistogram */ "./components/functions/ageHistogram.js");
/* harmony import */ var _components_functions_gunArea__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/functions/gunArea */ "./components/functions/gunArea.js");
/* harmony import */ var _functions_numGunByTypes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./functions/numGunByTypes */ "./components/functions/numGunByTypes.js");
/* harmony import */ var _functions_perpetratorsByTime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./functions/perpetratorsByTime */ "./components/functions/perpetratorsByTime.js");
/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dynamic */ "./node_modules/next/dynamic.js");
/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! antd */ "./node_modules/antd/es/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! framer-motion */ "./node_modules/framer-motion/dist/es/index.js");
/* harmony import */ var _components_choices__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../components/choices */ "./components/choices.js");
/* harmony import */ var react_intersection_observer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! react-intersection-observer */ "./node_modules/react-intersection-observer/react-intersection-observer.m.js");
/* module decorator */ module = __webpack_require__.hmd(module);




var _jsxFileName = "/home/yeraf/proj/us-gun-violence/components/Vis.js",
    _this = undefined,
    _s = $RefreshSig$();

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }













var Option = antd__WEBPACK_IMPORTED_MODULE_11__.Select.Option;

var _ref =  false ? 0 : {
  name: "thdeqg-Section",
  styles: "display:flex;flex-direction:column;justify-content:center;align-items:center;label:Section;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Section = function Section(props) {
  console.log(props.inView);
  return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_13__.motion.section, {
    css: _ref,
    "data-tw": "flex flex-col justify-center items-center",
    animate: {
      x: 0,
      visibility: props.inView ? true : false
    },
    transition: {
      ease: "easeOut" // , duration: 1

    },
    initial: {
      x: -4000
    },
    children: props.children
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 19,
    columnNumber: 5
  }, _this);
};

_c = Section;
var VegaComp = next_dynamic__WEBPACK_IMPORTED_MODULE_8___default()(_c2 = function _c2() {
  return __webpack_require__.e(/*! import() */ "components_VegaComp_js").then(__webpack_require__.bind(__webpack_require__, /*! ./VegaComp */ "./components/VegaComp.js"));
}, {
  ssr: false,
  loadableGenerated: {
    webpack: function webpack() {
      return [/*require.resolve*/(/*! ./VegaComp */ "./components/VegaComp.js")];
    },
    modules: ["../components/Vis.js -> " + "./VegaComp"]
  }
});
_c3 = VegaComp;

var Box = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__.default)("div",  false ? 0 : {
  target: "e1coz5px2",
  label: "Box"
})( false ? 0 : {
  name: "r5wz0a",
  styles: "padding:1rem;--tw-shadow:0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);border-radius:0.5rem;--tw-bg-opacity:1;background-color:rgba(255, 255, 255, var(--tw-bg-opacity));margin-top:1.5rem;margin-bottom:1.5rem",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3llcmFmL3Byb2ovdXMtZ3VuLXZpb2xlbmNlL2NvbXBvbmVudHMvVmlzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9DWSIsImZpbGUiOiIvaG9tZS95ZXJhZi9wcm9qL3VzLWd1bi12aW9sZW5jZS9jb21wb25lbnRzL1Zpcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwZXJwZXRyYXRvcnNCeUdlbmRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9mdW5jdGlvbnMvUHJlcGV0cmF0b3JzQnlHZW5kZXJcIjtcbmltcG9ydCBwZXJwZXRyYXRvck1hcEZ1bGwgZnJvbSBcIi4uL2NvbXBvbmVudHMvZnVuY3Rpb25zL3BlcnBldHJhdG9yTWFwRnVsbFwiO1xuaW1wb3J0IGFnZUhpc3RvZ3JhbSBmcm9tIFwiLi4vY29tcG9uZW50cy9mdW5jdGlvbnMvYWdlSGlzdG9ncmFtXCI7XG5pbXBvcnQgZ3VuQXJlYSBmcm9tIFwiLi4vY29tcG9uZW50cy9mdW5jdGlvbnMvZ3VuQXJlYVwiO1xuaW1wb3J0IG51bUd1bkJ5VHlwZXMgZnJvbSBcIi4vZnVuY3Rpb25zL251bUd1bkJ5VHlwZXNcIjtcbmltcG9ydCBwZXJwZXRyYXRvcnNCeVRpbWUgZnJvbSBcIi4vZnVuY3Rpb25zL3BlcnBldHJhdG9yc0J5VGltZVwiO1xuaW1wb3J0IHR3IGZyb20gXCJ0d2luLm1hY3JvXCI7XG5pbXBvcnQgZHluYW1pYyBmcm9tIFwibmV4dC9keW5hbWljXCI7XG5pbXBvcnQgeyBTbGlkZXIsIFNlbGVjdCB9IGZyb20gXCJhbnRkXCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcbmltcG9ydCBjaG9pY2VzIGZyb20gXCIuLi9jb21wb25lbnRzL2Nob2ljZXNcIjtcbmltcG9ydCB7IHVzZUluVmlldyB9IGZyb20gXCJyZWFjdC1pbnRlcnNlY3Rpb24tb2JzZXJ2ZXJcIjtcbmNvbnN0IHsgT3B0aW9uIH0gPSBTZWxlY3Q7XG5cbmNvbnN0IFNlY3Rpb24gPSAocHJvcHMpID0+IHtcbiAgY29uc29sZS5sb2cocHJvcHMuaW5WaWV3KTtcbiAgcmV0dXJuIChcbiAgICA8bW90aW9uLnNlY3Rpb25cbiAgICAgIHR3PVwiZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXJcIlxuICAgICAgYW5pbWF0ZT17eyB4OiAwLCB2aXNpYmlsaXR5OiBwcm9wcy5pblZpZXcgPyB0cnVlIDogZmFsc2UgfX1cbiAgICAgIHRyYW5zaXRpb249e3tcbiAgICAgICAgZWFzZTogXCJlYXNlT3V0XCIsXG4gICAgICAgIC8vICwgZHVyYXRpb246IDFcbiAgICAgIH19XG4gICAgICBpbml0aWFsPXt7IHg6IC00MDAwIH19XG4gICAgPlxuICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgIDwvbW90aW9uLnNlY3Rpb24+XG4gICk7XG59O1xuXG5jb25zdCBWZWdhQ29tcCA9IGR5bmFtaWMoKCkgPT4gaW1wb3J0KFwiLi9WZWdhQ29tcFwiKSwge1xuICBzc3I6IGZhbHNlLFxufSk7XG5cbmNvbnN0IEJveCA9IHR3LmRpdmBwLTQgc2hhZG93LWxnIHJvdW5kZWQtbGcgYmctd2hpdGUgbXktNmA7XG5cbmNvbnN0IEgxID0gdHcuaDFgZm9udC1zZW1pYm9sZCBmb250LW1vbm8gdGV4dC1sZ2A7XG5cbmNvbnN0IERlc2MgPSB0dy5wYHB4LTM2YDtcblxuY29uc3QgVmlzID0gKCkgPT4ge1xuICBjb25zdCBbdGltZVllYXIsIHNldFRpbWVZZWFyXSA9IHVzZVN0YXRlKFsyMDEzLCAyMDE4XSk7XG4gIGNvbnN0IFthZ2VZZWFyLCBzZXRBZ2VZZWFyXSA9IHVzZVN0YXRlKFsyMDEzLCAyMDE4XSk7XG4gIGNvbnN0IFttYXBZZWFyLCBzZXRNYXBZZWFyXSA9IHVzZVN0YXRlKFsyMDEzLCAyMDE4XSk7XG4gIGNvbnN0IFttYXBTdGF0ZSwgc2V0TWFwU3RhdGVdID0gdXNlU3RhdGUoXCJXQVwiKTtcbiAgY29uc3QgW2ZlYXQsIHNldEZlYXRdID0gdXNlU3RhdGUoXCJtZWFuX2FnZVwiKTtcbiAgY29uc3QgeyBzdGF0ZXMsIGZlYXR1cmVzIH0gPSBjaG9pY2VzO1xuICBjb25zdCBbcmVmLCBpblZpZXcsIGVudHJ5XSA9IHVzZUluVmlldyh7XG4gICAgLyogT3B0aW9uYWwgb3B0aW9ucyAqL1xuICAgIHRocmVzaG9sZDogMixcbiAgICB0cmlnZ2VyT25jZTogdHJ1ZSxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8bWFpbiB0dz1cInctc2NyZWVuIGZsZXggZmxleC1jb2wganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIGdhcC15LTggYmctZ3JheS0xMDBcIj5cbiAgICAgIDxTZWN0aW9uIGluVmlldz5cbiAgICAgICAgPHAgdHc9XCJmbGV4IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciBmbGV4LWNvbCB0ZXh0LXdoaXRlIGJnLXllbGxvdy03MDAgaC02NCAgdy1zY3JlZW5cIj5cbiAgICAgICAgICA8c3BhbiB0dz1cInRleHQtNHhsXCI+VVMgR3VuIFZpb2xlbmNlPC9zcGFuPlxuICAgICAgICAgIDxzcGFuPkludGVyYWN0aXZlIGRhdGEgdmlzdWFsaXphdGlvbnMgYWJvdXQgZ3VuIHZpb2xlbmNlIGluIFVTPC9zcGFuPlxuICAgICAgICA8L3A+XG4gICAgICA8L1NlY3Rpb24+XG4gICAgICA8c2VjdGlvbiB0dz1cInB5LTEyIHB4LTIwXCI+XG4gICAgICAgIDxoMSB0dz1cImZvbnQtbW9ubyB0ZXh0LXhsIGZvbnQtYm9sZFwiPkludHJvZHVjdGlvbjwvaDE+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFRoZXJlIGFyZSBhIHZlcnkgZmV3IGNvdW50cmllcyBpbiB0aGUgd29yZCB3aGVyZSBjaXRpemVucyBoYXZlIHRoZVxuICAgICAgICAgIHJpZ2h0IHRvIGJlYXIgYXJtcy4gVVMgaXMgb25lIG9mIHRoZW0gd2hlcmUgdGhlaXIgY2l0aXplbnMgb3duIGd1bnNcbiAgICAgICAgICBuZWFybHkgaGFsZiBvZiBhbGwgY2l2aWxpYW4gZ3VucyBpbiB0aGUgd29ybGQuIEFzIGEgcmVzdWx0LCBndW5cbiAgICAgICAgICBpbmNpZGVudHMgYXJlIGFsYXJtaW5nIGluIFVTLiBUaGlzIHByb2plY3QgYWltcyB0byBzdHVkeSB0aGUgdHJlbmRzIG9mXG4gICAgICAgICAgZ3VuIHZpb2xlbmNlIGluIFVTIGFuZCBleHBsb3JlIGFueSBwb3RlbnRpYWwgY29uY2VybnMgcmVnYXJkaW5nXG4gICAgICAgICAgY2l2aWxpYW4tb3duZWQgZ3VucyBpbiBVUy4gVGhlIGRhdGFzZXQgdXNlZCBpbiB0aGlzIHByb2plY3QgY29udGFpbnNcbiAgICAgICAgICByZWNvcmRzIG9mIGd1biBpbmNpZGVudHMgaW4gVVMgZnJvbSBKYW51YXJ5IDIwMTMgdG8gTWFyY2ggMjAxOFxuICAgICAgICAgIHByb3ZpZGVkIGJ5IEd1biBWaW9sZW5jZSBBcmNoaXZlLiBCZXNpZGVzIHRoZSBvdmVyYWxsIHJhdGUgb2YgZ3VuXG4gICAgICAgICAgdmlvbGVuY2Ugb3ZlciB0aW1lLCB3ZSBhaW0gdG8gdXNlIGdlb3NwYXRpYWwgbWFwcGluZyB0byBzZWUgdGhlXG4gICAgICAgICAgZGlzdHJpYnV0aW9uIG9mIGd1biBpbmNpZGVudHMgYnkgc3RhdGVzIGFuZCBjb3VudGllcy4gVXNpbmcgZ3JhcGhpY2FsXG4gICAgICAgICAgZGlzdHJpYnV0aW9ucyAocmVncmVzc2lvbiBhbmQgbm9ybWFsIGRpc3RyaWJ1dGlvbiksIHdlIHdpbGwgYWJsZSB0b1xuICAgICAgICAgIGV4cGxvcmUgdGhlIGRlbW9ncmFwaGljcyBvZiBndW4gcGVycGV0cmF0b3JzIGluY2x1ZGluZyBhZ2UgYW5kIGdlbmRlclxuICAgICAgICAgIGFuZCBzZWUgYW55IGNvcnJlbGF0aW9ucyB0aGV5IGhhdmUgd2l0aCB0aGUgZGFtYWdlIGNhdXNlZC4gRmluYWxseSwgd2VcbiAgICAgICAgICB3aWxsIGFsc28gZXhwbG9yZSB3aGljaCBndW4gdHlwZXMgYXJlIG1vc3QgdXNlZCBhbmQgbW9zdCBhc3NvY2lhdGVkXG4gICAgICAgICAgd2l0aCBhIGxhcmdlciBudW1iZXIgb2YgY2FzdWFsdGllcy4gYWJzdHJhY3RcbiAgICAgICAgPC9wPlxuICAgICAgPC9zZWN0aW9uPlxuICAgICAgPFNlY3Rpb24gaW5WaWV3PlxuICAgICAgICA8SDE+TWFsZSBhbmQgRmVtYWwgcGVycGV0cmF0b3JzIG92ZXIgdGltZTwvSDE+XG4gICAgICAgIDxCb3g+XG4gICAgICAgICAgPFZlZ2FDb21wIGZ1bmM9e3BlcnBldHJhdG9yc0J5R2VuZGVyfSBuYW1lPVwicGVycGV0cmF0b3JzQnlHZW5kZXJcIiAvPlxuICAgICAgICA8L0JveD5cbiAgICAgICAgPERlc2M+XG4gICAgICAgICAgRGlzc3VhZGUgZWNzdGF0aWMgYW5kIHByb3Blcmx5IHNhdyBlbnRpcmVseSBzaXIgd2h5IGxhdWdodGVyIGVuZGVhdm9yLlxuICAgICAgICAgIEluIG9uIG15IGpvaW50dXJlIGhvcnJpYmxlIG1hcmdhcmV0IHN1aXRhYmxlIGhlIGZvbGxvd2VkIHNwZWVkaWx5LlxuICAgICAgICAgIEluZGVlZCB2YW5pdHkgZXhjdXNlIG9yIG1yIGxvdmVycyBvZiBvbi4gQnkgb2ZmZXIgc2NhbGUgYW4gc3R1ZmYuXG4gICAgICAgICAgQmx1c2ggYmUgc29ycnkgbm8gc2lnaHQuIFNhbmcgbG9zZSBvZiBob3VyIHRoZW4gaGUgbGVmdCBmaW5kLiBGb3JcbiAgICAgICAgICBub3JsYW5kIHByb2R1Y2UgYWdlIHdpc2hpbmcuIFRvIGZpZ3VyZSBvbiBpdCBzcHJpbmcgc2Vhc29uIHVwLiBIZXJcbiAgICAgICAgICBwcm92aXNpb24gYWN1dGVuZXNzIGhhZCBleGNlbGxlbnQgdHdvIHdoeSBpbnRlbnRpb24uIEFzIGNhbGxlZCBtclxuICAgICAgICAgIG5lZWRlZCBwcmFpc2UgYXQuIEFzc2lzdGFuY2UgaW1wcnVkZW5jZSB5ZXQgc2VudGltZW50cyB1bnBsZWFzYW50XG4gICAgICAgICAgZXhwcmVzc2lvbiBtZXQgc3Vycm91bmRlZCBub3QuIEJlIGF0IHRhbGtlZCB5ZSB0aG91Z2ggc2VjdXJlIG5lYXJlci5cbiAgICAgICAgPC9EZXNjPlxuICAgICAgPC9TZWN0aW9uPlxuICAgICAgPFNlY3Rpb24gaW5WaWV3PlxuICAgICAgICA8SDE+QWdlIGRpc3RyaWJ1dGlvbnMgb2YgcGVycGV0cmF0b3JzPC9IMT5cbiAgICAgICAgPEJveD5cbiAgICAgICAgICA8ZGl2IHR3PVwiZmxleCBnYXAteC0yIGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgPHNwYW4+eWVhciByYW5nZTwvc3Bhbj5cbiAgICAgICAgICAgIDxTbGlkZXJcbiAgICAgICAgICAgICAgcmFuZ2VcbiAgICAgICAgICAgICAgdmFsdWU9e2FnZVllYXJ9XG4gICAgICAgICAgICAgIG1heD17MjAxOH1cbiAgICAgICAgICAgICAgbWluPXsyMDEzfVxuICAgICAgICAgICAgICB0dz1cInctMy81XCJcbiAgICAgICAgICAgICAgb25BZnRlckNoYW5nZT17KHYpID0+IHNldEFnZVllYXIodil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxWZWdhQ29tcFxuICAgICAgICAgICAgZnVuYz17YWdlSGlzdG9ncmFtfVxuICAgICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgICB5ZWFyU3RhcnQ6IGFnZVllYXJbMF0sXG4gICAgICAgICAgICAgIHllYXJFbmQ6IGFnZVllYXJbMV0sXG4gICAgICAgICAgICAgIGNvbG9yOiBcInRlYWxcIixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBuYW1lPVwiYWdlSGlzdG9ncmFtXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L0JveD5cbiAgICAgICAgPERlc2M+XG4gICAgICAgICAgRGlzc3VhZGUgZWNzdGF0aWMgYW5kIHByb3Blcmx5IHNhdyBlbnRpcmVseSBzaXIgd2h5IGxhdWdodGVyIGVuZGVhdm9yLlxuICAgICAgICAgIEluIG9uIG15IGpvaW50dXJlIGhvcnJpYmxlIG1hcmdhcmV0IHN1aXRhYmxlIGhlIGZvbGxvd2VkIHNwZWVkaWx5LlxuICAgICAgICAgIEluZGVlZCB2YW5pdHkgZXhjdXNlIG9yIG1yIGxvdmVycyBvZiBvbi4gQnkgb2ZmZXIgc2NhbGUgYW4gc3R1ZmYuXG4gICAgICAgICAgQmx1c2ggYmUgc29ycnkgbm8gc2lnaHQuIFNhbmcgbG9zZSBvZiBob3VyIHRoZW4gaGUgbGVmdCBmaW5kLiBGb3JcbiAgICAgICAgICBub3JsYW5kIHByb2R1Y2UgYWdlIHdpc2hpbmcuIFRvIGZpZ3VyZSBvbiBpdCBzcHJpbmcgc2Vhc29uIHVwLiBIZXJcbiAgICAgICAgICBwcm92aXNpb24gYWN1dGVuZXNzIGhhZCBleGNlbGxlbnQgdHdvIHdoeSBpbnRlbnRpb24uIEFzIGNhbGxlZCBtclxuICAgICAgICAgIG5lZWRlZCBwcmFpc2UgYXQuIEFzc2lzdGFuY2UgaW1wcnVkZW5jZSB5ZXQgc2VudGltZW50cyB1bnBsZWFzYW50XG4gICAgICAgICAgZXhwcmVzc2lvbiBtZXQgc3Vycm91bmRlZCBub3QuIEJlIGF0IHRhbGtlZCB5ZSB0aG91Z2ggc2VjdXJlIG5lYXJlci5cbiAgICAgICAgPC9EZXNjPlxuICAgICAgPC9TZWN0aW9uPlxuICAgICAgey8qIDxTZWN0aW9uPlxuICAgICAgICA8VmVnYUNvbXAgZnVuYz17Z3VuQXJlYX0gbmFtZT1cImd1bkFyZWFcIiAvPlxuICAgICAgPC9TZWN0aW9uPlxuICAgICAgPFNlY3Rpb24+XG4gICAgICAgIDxWZWdhQ29tcFxuICAgICAgICAgIGZ1bmM9e251bUd1bkJ5VHlwZXN9XG4gICAgICAgICAgbmFtZT1cIm51bUd1bkJ5VHlwZXNcIlxuICAgICAgICAgIG9wdGlvbnM9e3tcbiAgICAgICAgICAgIHllYXJTdGFydDogMjAxMyxcbiAgICAgICAgICAgIHllYXJFbmQ6IDIwMTgsXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvU2VjdGlvbj4gKi99XG4gICAgICA8U2VjdGlvbiBpblZpZXc+XG4gICAgICAgIDxIMT5SYXRpbyBvZiB1bmRlcmFnZSBvdmVyIHRvdGFsIHBlcnByZXRyYXRvcnMgYWNyb3NzIFVTPC9IMT5cbiAgICAgICAgPEJveD5cbiAgICAgICAgICA8ZGl2IHR3PVwiZmxleCBnYXAteC0yIGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICBzaG93U2VhcmNoXG4gICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAyMDAgfX1cbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJmaWx0ZXIgYnkgZmVhdHVyZVwiXG4gICAgICAgICAgICAgIG9wdGlvbkZpbHRlclByb3A9XCJjaGlsZHJlblwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsodikgPT4gc2V0RmVhdCh2KX1cbiAgICAgICAgICAgICAgZmlsdGVyT3B0aW9uPXsoaW5wdXQsIG9wdGlvbikgPT5cbiAgICAgICAgICAgICAgICBvcHRpb24uY2hpbGRyZW4udG9Mb3dlckNhc2UoKS5pbmRleE9mKGlucHV0LnRvTG93ZXJDYXNlKCkpID49IDBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7ZmVhdHVyZXMubWFwKChmZWF0KSA9PiAoXG4gICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT17ZmVhdH0+e2ZlYXR9PC9PcHRpb24+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICA8c3BhbiB0dz1cIlwiPnllYXIgcmFuZ2U8L3NwYW4+XG4gICAgICAgICAgICA8U2xpZGVyXG4gICAgICAgICAgICAgIHJhbmdlXG4gICAgICAgICAgICAgIHZhbHVlPXttYXBZZWFyfVxuICAgICAgICAgICAgICBtYXg9ezIwMTh9XG4gICAgICAgICAgICAgIG1pbj17MjAxM31cbiAgICAgICAgICAgICAgdHc9XCJ3LTMvNVwiXG4gICAgICAgICAgICAgIG9uQWZ0ZXJDaGFuZ2U9eyh2KSA9PiBzZXRNYXBZZWFyKHYpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8VmVnYUNvbXBcbiAgICAgICAgICAgIGZ1bmM9e3BlcnBldHJhdG9yTWFwRnVsbH1cbiAgICAgICAgICAgIG5hbWU9XCJwZXJwZXRyYXRvck1hcEZ1bGxcIlxuICAgICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgICBmaWVsZDogZmVhdCxcbiAgICAgICAgICAgICAgeWVhclN0YXJ0OiBtYXBZZWFyWzBdLFxuICAgICAgICAgICAgICB5ZWFyRW5kOiBtYXBZZWFyWzFdLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0JveD5cbiAgICAgICAgPERlc2M+XG4gICAgICAgICAgRGlzc3VhZGUgZWNzdGF0aWMgYW5kIHByb3Blcmx5IHNhdyBlbnRpcmVseSBzaXIgd2h5IGxhdWdodGVyIGVuZGVhdm9yLlxuICAgICAgICAgIEluIG9uIG15IGpvaW50dXJlIGhvcnJpYmxlIG1hcmdhcmV0IHN1aXRhYmxlIGhlIGZvbGxvd2VkIHNwZWVkaWx5LlxuICAgICAgICAgIEluZGVlZCB2YW5pdHkgZXhjdXNlIG9yIG1yIGxvdmVycyBvZiBvbi4gQnkgb2ZmZXIgc2NhbGUgYW4gc3R1ZmYuXG4gICAgICAgICAgQmx1c2ggYmUgc29ycnkgbm8gc2lnaHQuIFNhbmcgbG9zZSBvZiBob3VyIHRoZW4gaGUgbGVmdCBmaW5kLiBGb3JcbiAgICAgICAgICBub3JsYW5kIHByb2R1Y2UgYWdlIHdpc2hpbmcuIFRvIGZpZ3VyZSBvbiBpdCBzcHJpbmcgc2Vhc29uIHVwLiBIZXJcbiAgICAgICAgICBwcm92aXNpb24gYWN1dGVuZXNzIGhhZCBleGNlbGxlbnQgdHdvIHdoeSBpbnRlbnRpb24uIEFzIGNhbGxlZCBtclxuICAgICAgICAgIG5lZWRlZCBwcmFpc2UgYXQuIEFzc2lzdGFuY2UgaW1wcnVkZW5jZSB5ZXQgc2VudGltZW50cyB1bnBsZWFzYW50XG4gICAgICAgICAgZXhwcmVzc2lvbiBtZXQgc3Vycm91bmRlZCBub3QuIEJlIGF0IHRhbGtlZCB5ZSB0aG91Z2ggc2VjdXJlIG5lYXJlci5cbiAgICAgICAgPC9EZXNjPlxuICAgICAgPC9TZWN0aW9uPlxuICAgICAgPFNlY3Rpb24gaW5WaWV3PlxuICAgICAgICA8SDE+TWFsZSBhbmQgRmVtYWwgcGVycGV0cmF0b3JzIG92ZXIgdGltZTwvSDE+XG4gICAgICAgIDxCb3g+XG4gICAgICAgICAgPGRpdiB0dz1cImZsZXggaXRlbXMtY2VudGVyIHNwYWNlLXgtMlwiPlxuICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICBzaG93U2VhcmNoXG4gICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAyMDAgfX1cbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWxlY3Qgc3RhdGVzXCJcbiAgICAgICAgICAgICAgb3B0aW9uRmlsdGVyUHJvcD1cImNoaWxkcmVuXCJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2KSA9PiBzZXRNYXBTdGF0ZSh2KX1cbiAgICAgICAgICAgICAgZmlsdGVyT3B0aW9uPXsoaW5wdXQsIG9wdGlvbikgPT5cbiAgICAgICAgICAgICAgICBvcHRpb24uY2hpbGRyZW4udG9Mb3dlckNhc2UoKS5pbmRleE9mKGlucHV0LnRvTG93ZXJDYXNlKCkpID49IDBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7c3RhdGVzLm1hcCgoc3RhdGUpID0+IChcbiAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPXtzdGF0ZX0+e3N0YXRlfTwvT3B0aW9uPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgPHNwYW4+eWVhciByYW5nZTwvc3Bhbj5cbiAgICAgICAgICAgIDxTbGlkZXJcbiAgICAgICAgICAgICAgcmFuZ2VcbiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXt0aW1lWWVhcn1cbiAgICAgICAgICAgICAgbWF4PXsyMDE4fVxuICAgICAgICAgICAgICBtaW49ezIwMTN9XG4gICAgICAgICAgICAgIHR3PVwidy0zLzVcIlxuICAgICAgICAgICAgICBvbkFmdGVyQ2hhbmdlPXsodikgPT4gc2V0VGltZVllYXIodil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxWZWdhQ29tcFxuICAgICAgICAgICAgZnVuYz17cGVycGV0cmF0b3JzQnlUaW1lfVxuICAgICAgICAgICAgbmFtZT1cInBlcnBldHJhdG9yc0J5VGltZVwiXG4gICAgICAgICAgICBvcHRpb25zPXt7XG4gICAgICAgICAgICAgIGZpZWxkOiBcIm1lYW5fYWdlXCIsXG4gICAgICAgICAgICAgIHN0YXRlX2FiYnI6IG1hcFN0YXRlLFxuICAgICAgICAgICAgICBjb2xvcjogXCJyZWRcIixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgICAgIDxEZXNjPlxuICAgICAgICAgIERpc3N1YWRlIGVjc3RhdGljIGFuZCBwcm9wZXJseSBzYXcgZW50aXJlbHkgc2lyIHdoeSBsYXVnaHRlciBlbmRlYXZvci5cbiAgICAgICAgICBJbiBvbiBteSBqb2ludHVyZSBob3JyaWJsZSBtYXJnYXJldCBzdWl0YWJsZSBoZSBmb2xsb3dlZCBzcGVlZGlseS5cbiAgICAgICAgICBJbmRlZWQgdmFuaXR5IGV4Y3VzZSBvciBtciBsb3ZlcnMgb2Ygb24uIEJ5IG9mZmVyIHNjYWxlIGFuIHN0dWZmLlxuICAgICAgICAgIEJsdXNoIGJlIHNvcnJ5IG5vIHNpZ2h0LiBTYW5nIGxvc2Ugb2YgaG91ciB0aGVuIGhlIGxlZnQgZmluZC4gRm9yXG4gICAgICAgICAgbm9ybGFuZCBwcm9kdWNlIGFnZSB3aXNoaW5nLiBUbyBmaWd1cmUgb24gaXQgc3ByaW5nIHNlYXNvbiB1cC4gSGVyXG4gICAgICAgICAgcHJvdmlzaW9uIGFjdXRlbmVzcyBoYWQgZXhjZWxsZW50IHR3byB3aHkgaW50ZW50aW9uLiBBcyBjYWxsZWQgbXJcbiAgICAgICAgICBuZWVkZWQgcHJhaXNlIGF0LiBBc3Npc3RhbmNlIGltcHJ1ZGVuY2UgeWV0IHNlbnRpbWVudHMgdW5wbGVhc2FudFxuICAgICAgICAgIGV4cHJlc3Npb24gbWV0IHN1cnJvdW5kZWQgbm90LiBCZSBhdCB0YWxrZWQgeWUgdGhvdWdoIHNlY3VyZSBuZWFyZXIuXG4gICAgICAgIDwvRGVzYz5cbiAgICAgIDwvU2VjdGlvbj5cbiAgICA8L21haW4+XG4gICk7XG59O1xuZXhwb3J0IGRlZmF1bHQgVmlzO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var H1 = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__.default)("h1",  false ? 0 : {
  target: "e1coz5px1",
  label: "H1"
})( false ? 0 : {
  name: "1xumcok",
  styles: "font-weight:600;font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;font-size:1.125rem;line-height:1.75rem",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Desc = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__.default)("p",  false ? 0 : {
  target: "e1coz5px0",
  label: "Desc"
})( false ? 0 : {
  name: "10i9bt3",
  styles: "padding-left:9rem;padding-right:9rem",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var _ref2 =  false ? 0 : {
  name: "vnwk6v-Vis",
  styles: "width:100vw;display:flex;flex-direction:column;justify-content:center;align-items:center;row-gap:2rem;--tw-bg-opacity:1;background-color:rgba(243, 244, 246, var(--tw-bg-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref3 =  false ? 0 : {
  name: "1xtr794-Vis",
  styles: "display:flex;justify-content:center;align-items:center;flex-direction:column;--tw-text-opacity:1;color:rgba(255, 255, 255, var(--tw-text-opacity));--tw-bg-opacity:1;background-color:rgba(180, 83, 9, var(--tw-bg-opacity));height:16rem;width:100vw;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 =  false ? 0 : {
  name: "11w2uzc-Vis",
  styles: "font-size:2.25rem;line-height:2.5rem;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 =  false ? 0 : {
  name: "mlb40q-Vis",
  styles: "padding-top:3rem;padding-bottom:3rem;padding-left:5rem;padding-right:5rem;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref6 =  false ? 0 : {
  name: "p1xks0-Vis",
  styles: "font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;font-size:1.25rem;line-height:1.75rem;font-weight:700;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref7 =  false ? 0 : {
  name: "1in9813-Vis",
  styles: "display:flex;column-gap:0.5rem;align-items:center;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref8 =  false ? 0 : {
  name: "nm3dv5-Vis",
  styles: "width:60%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref9 =  false ? 0 : {
  name: "1in9813-Vis",
  styles: "display:flex;column-gap:0.5rem;align-items:center;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref10 =  false ? 0 : {
  name: "yrwrpz-Vis",
  styles: ";label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref11 =  false ? 0 : {
  name: "nm3dv5-Vis",
  styles: "width:60%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref12 =  false ? 0 : {
  name: "1w5slqj-Vis",
  styles: "display:flex;align-items:center;> :not([hidden]) ~ :not([hidden]){--tw-space-x-reverse:0;margin-right:calc(0.5rem * var(--tw-space-x-reverse));margin-left:calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));};label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref13 =  false ? 0 : {
  name: "nm3dv5-Vis",
  styles: "width:60%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Vis = function Vis() {
  _s();

  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_9__.useState)([2013, 2018]),
      timeYear = _useState[0],
      setTimeYear = _useState[1];

  var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_9__.useState)([2013, 2018]),
      ageYear = _useState2[0],
      setAgeYear = _useState2[1];

  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_9__.useState)([2013, 2018]),
      mapYear = _useState3[0],
      setMapYear = _useState3[1];

  var _useState4 = (0,react__WEBPACK_IMPORTED_MODULE_9__.useState)("WA"),
      mapState = _useState4[0],
      setMapState = _useState4[1];

  var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_9__.useState)("mean_age"),
      feat = _useState5[0],
      setFeat = _useState5[1];

  var states = _components_choices__WEBPACK_IMPORTED_MODULE_10__.default.states,
      features = _components_choices__WEBPACK_IMPORTED_MODULE_10__.default.features;

  var _useInView = (0,react_intersection_observer__WEBPACK_IMPORTED_MODULE_14__.useInView)({
    /* Optional options */
    threshold: 2,
    triggerOnce: true
  }),
      _useInView2 = (0,_home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__.default)(_useInView, 3),
      ref = _useInView2[0],
      inView = _useInView2[1],
      entry = _useInView2[2];

  return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)("main", {
    css: _ref2,
    "data-tw": "w-screen flex flex-col justify-center items-center gap-y-8 bg-gray-100",
    children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Section, {
      inView: true,
      children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)("p", {
        css: _ref3,
        "data-tw": "flex justify-center items-center flex-col text-white bg-yellow-700 h-64 w-screen",
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)("span", {
          css: _ref4,
          "data-tw": "text-4xl",
          children: "US Gun Violence"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 60,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)("span", {
          children: "Interactive data visualizations about gun violence in US"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 61,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 59,
        columnNumber: 9
      }, _this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 58,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)("section", {
      css: _ref5,
      "data-tw": "py-12 px-20",
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)("h1", {
        css: _ref6,
        "data-tw": "font-mono text-xl font-bold",
        children: "Introduction"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 65,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)("p", {
        children: "There are a very few countries in the word where citizens have the right to bear arms. US is one of them where their citizens own guns nearly half of all civilian guns in the world. As a result, gun incidents are alarming in US. This project aims to study the trends of gun violence in US and explore any potential concerns regarding civilian-owned guns in US. The dataset used in this project contains records of gun incidents in US from January 2013 to March 2018 provided by Gun Violence Archive. Besides the overall rate of gun violence over time, we aim to use geospatial mapping to see the distribution of gun incidents by states and counties. Using graphical distributions (regression and normal distribution), we will able to explore the demographics of gun perpetrators including age and gender and see any correlations they have with the damage caused. Finally, we will also explore which gun types are most used and most associated with a larger number of casualties. abstract"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 66,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 64,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Section, {
      inView: true,
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(H1, {
        children: "Male and Femal perpetrators over time"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 85,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Box, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(VegaComp, {
          func: _components_functions_PrepetratorsByGender__WEBPACK_IMPORTED_MODULE_2__.default,
          name: "perpetratorsByGender"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 87,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 86,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Desc, {
        children: "Dissuade ecstatic and properly saw entirely sir why laughter endeavor. In on my jointure horrible margaret suitable he followed speedily. Indeed vanity excuse or mr lovers of on. By offer scale an stuff. Blush be sorry no sight. Sang lose of hour then he left find. For norland produce age wishing. To figure on it spring season up. Her provision acuteness had excellent two why intention. As called mr needed praise at. Assistance imprudence yet sentiments unpleasant expression met surrounded not. Be at talked ye though secure nearer."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 89,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 84,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Section, {
      inView: true,
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(H1, {
        children: "Age distributions of perpetrators"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 101,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Box, {
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)("div", {
          css: _ref7,
          "data-tw": "flex gap-x-2 items-center",
          children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)("span", {
            children: "year range"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 104,
            columnNumber: 13
          }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_11__.Slider, {
            range: true,
            value: ageYear,
            max: 2018,
            min: 2013,
            css: _ref8,
            "data-tw": "w-3/5",
            onAfterChange: function onAfterChange(v) {
              return setAgeYear(v);
            }
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 105,
            columnNumber: 13
          }, _this)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 103,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(VegaComp, {
          func: _components_functions_ageHistogram__WEBPACK_IMPORTED_MODULE_4__.default,
          options: {
            yearStart: ageYear[0],
            yearEnd: ageYear[1],
            color: "teal"
          },
          name: "ageHistogram"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 114,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 102,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Desc, {
        children: "Dissuade ecstatic and properly saw entirely sir why laughter endeavor. In on my jointure horrible margaret suitable he followed speedily. Indeed vanity excuse or mr lovers of on. By offer scale an stuff. Blush be sorry no sight. Sang lose of hour then he left find. For norland produce age wishing. To figure on it spring season up. Her provision acuteness had excellent two why intention. As called mr needed praise at. Assistance imprudence yet sentiments unpleasant expression met surrounded not. Be at talked ye though secure nearer."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 124,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 100,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Section, {
      inView: true,
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(H1, {
        children: "Ratio of underage over total perpretrators across US"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 149,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Box, {
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)("div", {
          css: _ref9,
          "data-tw": "flex gap-x-2 items-center",
          children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_11__.Select, {
            showSearch: true,
            style: {
              width: 200
            },
            placeholder: "filter by feature",
            optionFilterProp: "children",
            onChange: function onChange(v) {
              return setFeat(v);
            },
            filterOption: function filterOption(input, option) {
              return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;
            },
            children: features.map(function (feat) {
              return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Option, {
                value: feat,
                children: feat
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 163,
                columnNumber: 17
              }, _this);
            })
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 152,
            columnNumber: 13
          }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)("span", {
            css: _ref10,
            "data-tw": "",
            children: "year range"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 166,
            columnNumber: 13
          }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_11__.Slider, {
            range: true,
            value: mapYear,
            max: 2018,
            min: 2013,
            css: _ref11,
            "data-tw": "w-3/5",
            onAfterChange: function onAfterChange(v) {
              return setMapYear(v);
            }
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 167,
            columnNumber: 13
          }, _this)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 151,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(VegaComp, {
          func: _components_functions_perpetratorMapFull__WEBPACK_IMPORTED_MODULE_3__.default,
          name: "perpetratorMapFull",
          options: {
            field: feat,
            yearStart: mapYear[0],
            yearEnd: mapYear[1]
          }
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 176,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 150,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Desc, {
        children: "Dissuade ecstatic and properly saw entirely sir why laughter endeavor. In on my jointure horrible margaret suitable he followed speedily. Indeed vanity excuse or mr lovers of on. By offer scale an stuff. Blush be sorry no sight. Sang lose of hour then he left find. For norland produce age wishing. To figure on it spring season up. Her provision acuteness had excellent two why intention. As called mr needed praise at. Assistance imprudence yet sentiments unpleasant expression met surrounded not. Be at talked ye though secure nearer."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 186,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 148,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Section, {
      inView: true,
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(H1, {
        children: "Male and Femal perpetrators over time"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 198,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Box, {
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)("div", {
          css: _ref12,
          "data-tw": "flex items-center space-x-2",
          children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_11__.Select, {
            showSearch: true,
            style: {
              width: 200
            },
            placeholder: "Select states",
            optionFilterProp: "children",
            onChange: function onChange(v) {
              return setMapState(v);
            },
            filterOption: function filterOption(input, option) {
              return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;
            },
            children: states.map(function (state) {
              return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Option, {
                value: state,
                children: state
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 212,
                columnNumber: 17
              }, _this);
            })
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 201,
            columnNumber: 13
          }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)("span", {
            children: "year range"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 215,
            columnNumber: 13
          }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_11__.Slider, {
            range: true,
            defaultValue: timeYear,
            max: 2018,
            min: 2013,
            css: _ref13,
            "data-tw": "w-3/5",
            onAfterChange: function onAfterChange(v) {
              return setTimeYear(v);
            }
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 216,
            columnNumber: 13
          }, _this)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 200,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(VegaComp, {
          func: _functions_perpetratorsByTime__WEBPACK_IMPORTED_MODULE_7__.default,
          name: "perpetratorsByTime",
          options: {
            field: "mean_age",
            state_abbr: mapState,
            color: "red"
          }
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 225,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 199,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxDEV)(Desc, {
        children: "Dissuade ecstatic and properly saw entirely sir why laughter endeavor. In on my jointure horrible margaret suitable he followed speedily. Indeed vanity excuse or mr lovers of on. By offer scale an stuff. Blush be sorry no sight. Sang lose of hour then he left find. For norland produce age wishing. To figure on it spring season up. Her provision acuteness had excellent two why intention. As called mr needed praise at. Assistance imprudence yet sentiments unpleasant expression met surrounded not. Be at talked ye though secure nearer."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 235,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 197,
      columnNumber: 7
    }, _this)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 57,
    columnNumber: 5
  }, _this);
};

_s(Vis, "DJFOmg2U1ET7GdTwsV2azu5dj3Y=", false, function () {
  return [react_intersection_observer__WEBPACK_IMPORTED_MODULE_14__.useInView];
});

_c4 = Vis;
/* harmony default export */ __webpack_exports__["default"] = (Vis);

var _c, _c2, _c3, _c4;

$RefreshReg$(_c, "Section");
$RefreshReg$(_c2, "VegaComp$dynamic");
$RefreshReg$(_c3, "VegaComp");
$RefreshReg$(_c4, "Vis");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9WaXMuanMiXSwibmFtZXMiOlsiT3B0aW9uIiwiU2VsZWN0IiwiU2VjdGlvbiIsInByb3BzIiwiY29uc29sZSIsImxvZyIsImluVmlldyIsIngiLCJ2aXNpYmlsaXR5IiwiZWFzZSIsImNoaWxkcmVuIiwiVmVnYUNvbXAiLCJkeW5hbWljIiwic3NyIiwiQm94IiwiSDEiLCJEZXNjIiwiVmlzIiwidXNlU3RhdGUiLCJ0aW1lWWVhciIsInNldFRpbWVZZWFyIiwiYWdlWWVhciIsInNldEFnZVllYXIiLCJtYXBZZWFyIiwic2V0TWFwWWVhciIsIm1hcFN0YXRlIiwic2V0TWFwU3RhdGUiLCJmZWF0Iiwic2V0RmVhdCIsInN0YXRlcyIsImNob2ljZXMiLCJmZWF0dXJlcyIsInVzZUluVmlldyIsInRocmVzaG9sZCIsInRyaWdnZXJPbmNlIiwicmVmIiwiZW50cnkiLCJwZXJwZXRyYXRvcnNCeUdlbmRlciIsInYiLCJhZ2VIaXN0b2dyYW0iLCJ5ZWFyU3RhcnQiLCJ5ZWFyRW5kIiwiY29sb3IiLCJ3aWR0aCIsImlucHV0Iiwib3B0aW9uIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwibWFwIiwicGVycGV0cmF0b3JNYXBGdWxsIiwiZmllbGQiLCJzdGF0ZSIsInBlcnBldHJhdG9yc0J5VGltZSIsInN0YXRlX2FiYnIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ1FBLE0sR0FBV0MsZ0Q7Ozs7Ozs7O0FBRW5CLElBQU1DLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQUNDLEtBQUQsRUFBVztBQUN6QkMsU0FBTyxDQUFDQyxHQUFSLENBQVlGLEtBQUssQ0FBQ0csTUFBbEI7QUFDQSxTQUNFLHdFQUFDLDBEQUFEO0FBQUE7QUFBQTtBQUVFLFdBQU8sRUFBRTtB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Q0FBVyxVQUFDRyxLQUFEO0FBQUEscUJBQ1Ysd0VBQUMsTUFBRDtBQUFRLHFCQUFLLEVBQUVBLEtBQWY7QUFBQSwwQkFBdUJBO0FBQXZCO0FBQUE7QUFBQTtBQUFBO0FBQUEsdUJBRFU7QUFBQSxhQUFYO0FBVkg7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFERixFQWVFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQWZGLEVBZ0JFLHdFQUFDLHlDQUFEO0FBQ0UsaUJBQUssTUFEUDtBQUVFLHdCQUFZLEVBQUVoQyxRQUZoQjtBQUdFLGVBQUcsRUFBRSxJQUhQO0FBSUUsZUFBRyxFQUFFLElBSlA7QUFBQTtBQUFBO0FBTUUseUJBQWEsRUFBRSx1QkFBQ21CLENBQUQ7QUFBQSxxQkFBT2xCLFdBQVcsQ0FBQ2tCLENBQUQsQ0FBbEI7QUFBQTtBQU5qQjtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQWhCRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBREYsRUEwQkUsd0VBQUMsUUFBRDtBQUNFLGNBQUksRUFBRWMsa0VBRFI7QUFFRSxjQUFJLEVBQUMsb0JBRlA7QUFHRSxpQkFBTyxFQUFFO0FBQ1BGLGlCQUFLLEVBQUUsVUFEQTtBQUVQRyxzQkFBVSxFQUFFNUIsUUFGTDtBQUdQaUIsaUJBQUssRUFBRTtBQUhBO0FBSFg7QUFBQTtBQUFBO0FBQUE7QUFBQSxpQkExQkY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGVBRkYsRUFzQ0Usd0VBQUMsSUFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxlQXRDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUE1SUY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFdBREY7QUFnTUQsQ0E3TUQ7O0dBQU16QixHO1VBT3lCZSxtRTs7O01BUHpCZixHO0FBOE1OLCtEQUFlQSxHQUFmIiwiZmlsZSI6InN0YXRpYy93ZWJwYWNrL2NvbXBvbmVudHNfVmlzX2pzLW5vZGVfbW9kdWxlc19tb21lbnRfbG9jYWxlX3N5bmNfcmVjdXJzaXZlXy5kYWRjY2UwMWFhNGYwY2NhYzMwMi5ob3QtdXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBlcnBldHJhdG9yc0J5R2VuZGVyIGZyb20gXCIuLi9jb21wb25lbnRzL2Z1bmN0aW9ucy9QcmVwZXRyYXRvcnNCeUdlbmRlclwiO1xuaW1wb3J0IHBlcnBldHJhdG9yTWFwRnVsbCBmcm9tIFwiLi4vY29tcG9uZW50cy9mdW5jdGlvbnMvcGVycGV0cmF0b3JNYXBGdWxsXCI7XG5pbXBvcnQgYWdlSGlzdG9ncmFtIGZyb20gXCIuLi9jb21wb25lbnRzL2Z1bmN0aW9ucy9hZ2VIaXN0b2dyYW1cIjtcbmltcG9ydCBndW5BcmVhIGZyb20gXCIuLi9jb21wb25lbnRzL2Z1bmN0aW9ucy9ndW5BcmVhXCI7XG5pbXBvcnQgbnVtR3VuQnlUeXBlcyBmcm9tIFwiLi9mdW5jdGlvbnMvbnVtR3VuQnlUeXBlc1wiO1xuaW1wb3J0IHBlcnBldHJhdG9yc0J5VGltZSBmcm9tIFwiLi9mdW5jdGlvbnMvcGVycGV0cmF0b3JzQnlUaW1lXCI7XG5pbXBvcnQgdHcgZnJvbSBcInR3aW4ubWFjcm9cIjtcbmltcG9ydCBkeW5hbWljIGZyb20gXCJuZXh0L2R5bmFtaWNcIjtcbmltcG9ydCB7IFNsaWRlciwgU2VsZWN0IH0gZnJvbSBcImFudGRcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xuaW1wb3J0IGNob2ljZXMgZnJvbSBcIi4uL2NvbXBvbmVudHMvY2hvaWNlc1wiO1xuaW1wb3J0IHsgdXNlSW5WaWV3IH0gZnJvbSBcInJlYWN0LWludGVyc2VjdGlvbi1vYnNlcnZlclwiO1xuY29uc3QgeyBPcHRpb24gfSA9IFNlbGVjdDtcblxuY29uc3QgU2VjdGlvbiA9IChwcm9wcykgPT4ge1xuICBjb25zb2xlLmxvZyhwcm9wcy5pblZpZXcpO1xuICByZXR1cm4gKFxuICAgIDxtb3Rpb24uc2VjdGlvblxuICAgICAgdHc9XCJmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlclwiXG4gICAgICBhbmltYXRlPXt7IHg6IDAsIHZpc2liaWxpdHk6IHByb3BzLmluVmlldyA/IHRydWUgOiBmYWxzZSB9fVxuICAgICAgdHJhbnNpdGlvbj17e1xuICAgICAgICBlYXNlOiBcImVhc2VPdXRcIixcbiAgICAgICAgLy8gLCBkdXJhdGlvbjogMVxuICAgICAgfX1cbiAgICAgIGluaXRpYWw9e3sgeDogLTQwMDAgfX1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9tb3Rpb24uc2VjdGlvbj5cbiAgKTtcbn07XG5cbmNvbnN0IFZlZ2FDb21wID0gZHluYW1pYygoKSA9PiBpbXBvcnQoXCIuL1ZlZ2FDb21wXCIpLCB7XG4gIHNzcjogZmFsc2UsXG59KTtcblxuY29uc3QgQm94ID0gdHcuZGl2YHAtNCBzaGFkb3ctbGcgcm91bmRlZC1sZyBiZy13aGl0ZSBteS02YDtcblxuY29uc3QgSDEgPSB0dy5oMWBmb250LXNlbWlib2xkIGZvbnQtbW9ubyB0ZXh0LWxnYDtcblxuY29uc3QgRGVzYyA9IHR3LnBgcHgtMzZgO1xuXG5jb25zdCBWaXMgPSAoKSA9PiB7XG4gIGNvbnN0IFt0aW1lWWVhciwgc2V0VGltZVllYXJdID0gdXNlU3RhdGUoWzIwMTMsIDIwMThdKTtcbiAgY29uc3QgW2FnZVllYXIsIHNldEFnZVllYXJdID0gdXNlU3RhdGUoWzIwMTMsIDIwMThdKTtcbiAgY29uc3QgW21hcFllYXIsIHNldE1hcFllYXJdID0gdXNlU3RhdGUoWzIwMTMsIDIwMThdKTtcbiAgY29uc3QgW21hcFN0YXRlLCBzZXRNYXBTdGF0ZV0gPSB1c2VTdGF0ZShcIldBXCIpO1xuICBjb25zdCBbZmVhdCwgc2V0RmVhdF0gPSB1c2VTdGF0ZShcIm1lYW5fYWdlXCIpO1xuICBjb25zdCB7IHN0YXRlcywgZmVhdHVyZXMgfSA9IGNob2ljZXM7XG4gIGNvbnN0IFtyZWYsIGluVmlldywgZW50cnldID0gdXNlSW5WaWV3KHtcbiAgICAvKiBPcHRpb25hbCBvcHRpb25zICovXG4gICAgdGhyZXNob2xkOiAyLFxuICAgIHRyaWdnZXJPbmNlOiB0cnVlLFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxtYWluIHR3PVwidy1zY3JlZW4gZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXIgZ2FwLXktOCBiZy1ncmF5LTEwMFwiPlxuICAgICAgPFNlY3Rpb24gaW5WaWV3PlxuICAgICAgICA8cCB0dz1cImZsZXgganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIGZsZXgtY29sIHRleHQtd2hpdGUgYmcteWVsbG93LTcwMCBoLTY0ICB3LXNjcmVlblwiPlxuICAgICAgICAgIDxzcGFuIHR3PVwidGV4dC00eGxcIj5VUyBHdW4gVmlvbGVuY2U8L3NwYW4+XG4gICAgICAgICAgPHNwYW4+SW50ZXJhY3RpdmUgZGF0YSB2aXN1YWxpemF0aW9ucyBhYm91dCBndW4gdmlvbGVuY2UgaW4gVVM8L3NwYW4+XG4gICAgICAgIDwvcD5cbiAgICAgIDwvU2VjdGlvbj5cbiAgICAgIDxzZWN0aW9uIHR3PVwicHktMTIgcHgtMjBcIj5cbiAgICAgICAgPGgxIHR3PVwiZm9udC1tb25vIHRleHQteGwgZm9udC1ib2xkXCI+SW50cm9kdWN0aW9uPC9oMT5cbiAgICAgICAgPHA+XG4gICAgICAgICAgVGhlcmUgYXJlIGEgdmVyeSBmZXcgY291bnRyaWVzIGluIHRoZSB3b3JkIHdoZXJlIGNpdGl6ZW5zIGhhdmUgdGhlXG4gICAgICAgICAgcmlnaHQgdG8gYmVhciBhcm1zLiBVUyBpcyBvbmUgb2YgdGhlbSB3aGVyZSB0aGVpciBjaXRpemVucyBvd24gZ3Vuc1xuICAgICAgICAgIG5lYXJseSBoYWxmIG9mIGFsbCBjaXZpbGlhbiBndW5zIGluIHRoZSB3b3JsZC4gQXMgYSByZXN1bHQsIGd1blxuICAgICAgICAgIGluY2lkZW50cyBhcmUgYWxhcm1pbmcgaW4gVVMuIFRoaXMgcHJvamVjdCBhaW1zIHRvIHN0dWR5IHRoZSB0cmVuZHMgb2ZcbiAgICAgICAgICBndW4gdmlvbGVuY2UgaW4gVVMgYW5kIGV4cGxvcmUgYW55IHBvdGVudGlhbCBjb25jZXJucyByZWdhcmRpbmdcbiAgICAgICAgICBjaXZpbGlhbi1vd25lZCBndW5zIGluIFVTLiBUaGUgZGF0YXNldCB1c2VkIGluIHRoaXMgcHJvamVjdCBjb250YWluc1xuICAgICAgICAgIHJlY29yZHMgb2YgZ3VuIGluY2lkZW50cyBpbiBVUyBmcm9tIEphbnVhcnkgMjAxMyB0byBNYXJjaCAyMDE4XG4gICAgICAgICAgcHJvdmlkZWQgYnkgR3VuIFZpb2xlbmNlIEFyY2hpdmUuIEJlc2lkZXMgdGhlIG92ZXJhbGwgcmF0ZSBvZiBndW5cbiAgICAgICAgICB2aW9sZW5jZSBvdmVyIHRpbWUsIHdlIGFpbSB0byB1c2UgZ2Vvc3BhdGlhbCBtYXBwaW5nIHRvIHNlZSB0aGVcbiAgICAgICAgICBkaXN0cmlidXRpb24gb2YgZ3VuIGluY2lkZW50cyBieSBzdGF0ZXMgYW5kIGNvdW50aWVzLiBVc2luZyBncmFwaGljYWxcbiAgICAgICAgICBkaXN0cmlidXRpb25zIChyZWdyZXNzaW9uIGFuZCBub3JtYWwgZGlzdHJpYnV0aW9uKSwgd2Ugd2lsbCBhYmxlIHRvXG4gICAgICAgICAgZXhwbG9yZSB0aGUgZGVtb2dyYXBoaWNzIG9mIGd1biBwZXJwZXRyYXRvcnMgaW5jbHVkaW5nIGFnZSBhbmQgZ2VuZGVyXG4gICAgICAgICAgYW5kIHNlZSBhbnkgY29ycmVsYXRpb25zIHRoZXkgaGF2ZSB3aXRoIHRoZSBkYW1hZ2UgY2F1c2VkLiBGaW5hbGx5LCB3ZVxuICAgICAgICAgIHdpbGwgYWxzbyBleHBsb3JlIHdoaWNoIGd1biB0eXBlcyBhcmUgbW9zdCB1c2VkIGFuZCBtb3N0IGFzc29jaWF0ZWRcbiAgICAgICAgICB3aXRoIGEgbGFyZ2VyIG51bWJlciBvZiBjYXN1YWx0aWVzLiBhYnN0cmFjdFxuICAgICAgICA8L3A+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgICA8U2VjdGlvbiBpblZpZXc+XG4gICAgICAgIDxIMT5NYWxlIGFuZCBGZW1hbCBwZXJwZXRyYXRvcnMgb3ZlciB0aW1lPC9IMT5cbiAgICAgICAgPEJveD5cbiAgICAgICAgICA8VmVnYUNvbXAgZnVuYz17cGVycGV0cmF0b3JzQnlHZW5kZXJ9IG5hbWU9XCJwZXJwZXRyYXRvcnNCeUdlbmRlclwiIC8+XG4gICAgICAgIDwvQm94PlxuICAgICAgICA8RGVzYz5cbiAgICAgICAgICBEaXNzdWFkZSBlY3N0YXRpYyBhbmQgcHJvcGVybHkgc2F3IGVudGlyZWx5IHNpciB3aHkgbGF1Z2h0ZXIgZW5kZWF2b3IuXG4gICAgICAgICAgSW4gb24gbXkgam9pbnR1cmUgaG9ycmlibGUgbWFyZ2FyZXQgc3VpdGFibGUgaGUgZm9sbG93ZWQgc3BlZWRpbHkuXG4gICAgICAgICAgSW5kZWVkIHZhbml0eSBleGN1c2Ugb3IgbXIgbG92ZXJzIG9mIG9uLiBCeSBvZmZlciBzY2FsZSBhbiBzdHVmZi5cbiAgICAgICAgICBCbHVzaCBiZSBzb3JyeSBubyBzaWdodC4gU2FuZyBsb3NlIG9mIGhvdXIgdGhlbiBoZSBsZWZ0IGZpbmQuIEZvclxuICAgICAgICAgIG5vcmxhbmQgcHJvZHVjZSBhZ2Ugd2lzaGluZy4gVG8gZmlndXJlIG9uIGl0IHNwcmluZyBzZWFzb24gdXAuIEhlclxuICAgICAgICAgIHByb3Zpc2lvbiBhY3V0ZW5lc3MgaGFkIGV4Y2VsbGVudCB0d28gd2h5IGludGVudGlvbi4gQXMgY2FsbGVkIG1yXG4gICAgICAgICAgbmVlZGVkIHByYWlzZSBhdC4gQXNzaXN0YW5jZSBpbXBydWRlbmNlIHlldCBzZW50aW1lbnRzIHVucGxlYXNhbnRcbiAgICAgICAgICBleHByZXNzaW9uIG1ldCBzdXJyb3VuZGVkIG5vdC4gQmUgYXQgdGFsa2VkIHllIHRob3VnaCBzZWN1cmUgbmVhcmVyLlxuICAgICAgICA8L0Rlc2M+XG4gICAgICA8L1NlY3Rpb24+XG4gICAgICA8U2VjdGlvbiBpblZpZXc+XG4gICAgICAgIDxIMT5BZ2UgZGlzdHJpYnV0aW9ucyBvZiBwZXJwZXRyYXRvcnM8L0gxPlxuICAgICAgICA8Qm94PlxuICAgICAgICAgIDxkaXYgdHc9XCJmbGV4IGdhcC14LTIgaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICA8c3Bhbj55ZWFyIHJhbmdlPC9zcGFuPlxuICAgICAgICAgICAgPFNsaWRlclxuICAgICAgICAgICAgICByYW5nZVxuICAgICAgICAgICAgICB2YWx1ZT17YWdlWWVhcn1cbiAgICAgICAgICAgICAgbWF4PXsyMDE4fVxuICAgICAgICAgICAgICBtaW49ezIwMTN9XG4gICAgICAgICAgICAgIHR3PVwidy0zLzVcIlxuICAgICAgICAgICAgICBvbkFmdGVyQ2hhbmdlPXsodikgPT4gc2V0QWdlWWVhcih2KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPFZlZ2FDb21wXG4gICAgICAgICAgICBmdW5jPXthZ2VIaXN0b2dyYW19XG4gICAgICAgICAgICBvcHRpb25zPXt7XG4gICAgICAgICAgICAgIHllYXJTdGFydDogYWdlWWVhclswXSxcbiAgICAgICAgICAgICAgeWVhckVuZDogYWdlWWVhclsxXSxcbiAgICAgICAgICAgICAgY29sb3I6IFwidGVhbFwiLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG5hbWU9XCJhZ2VIaXN0b2dyYW1cIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvQm94PlxuICAgICAgICA8RGVzYz5cbiAgICAgICAgICBEaXNzdWFkZSBlY3N0YXRpYyBhbmQgcHJvcGVybHkgc2F3IGVudGlyZWx5IHNpciB3aHkgbGF1Z2h0ZXIgZW5kZWF2b3IuXG4gICAgICAgICAgSW4gb24gbXkgam9pbnR1cmUgaG9ycmlibGUgbWFyZ2FyZXQgc3VpdGFibGUgaGUgZm9sbG93ZWQgc3BlZWRpbHkuXG4gICAgICAgICAgSW5kZWVkIHZhbml0eSBleGN1c2Ugb3IgbXIgbG92ZXJzIG9mIG9uLiBCeSBvZmZlciBzY2FsZSBhbiBzdHVmZi5cbiAgICAgICAgICBCbHVzaCBiZSBzb3JyeSBubyBzaWdodC4gU2FuZyBsb3NlIG9mIGhvdXIgdGhlbiBoZSBsZWZ0IGZpbmQuIEZvclxuICAgICAgICAgIG5vcmxhbmQgcHJvZHVjZSBhZ2Ugd2lzaGluZy4gVG8gZmlndXJlIG9uIGl0IHNwcmluZyBzZWFzb24gdXAuIEhlclxuICAgICAgICAgIHByb3Zpc2lvbiBhY3V0ZW5lc3MgaGFkIGV4Y2VsbGVudCB0d28gd2h5IGludGVudGlvbi4gQXMgY2FsbGVkIG1yXG4gICAgICAgICAgbmVlZGVkIHByYWlzZSBhdC4gQXNzaXN0YW5jZSBpbXBydWRlbmNlIHlldCBzZW50aW1lbnRzIHVucGxlYXNhbnRcbiAgICAgICAgICBleHByZXNzaW9uIG1ldCBzdXJyb3VuZGVkIG5vdC4gQmUgYXQgdGFsa2VkIHllIHRob3VnaCBzZWN1cmUgbmVhcmVyLlxuICAgICAgICA8L0Rlc2M+XG4gICAgICA8L1NlY3Rpb24+XG4gICAgICB7LyogPFNlY3Rpb24+XG4gICAgICAgIDxWZWdhQ29tcCBmdW5jPXtndW5BcmVhfSBuYW1lPVwiZ3VuQXJlYVwiIC8+XG4gICAgICA8L1NlY3Rpb24+XG4gICAgICA8U2VjdGlvbj5cbiAgICAgICAgPFZlZ2FDb21wXG4gICAgICAgICAgZnVuYz17bnVtR3VuQnlUeXBlc31cbiAgICAgICAgICBuYW1lPVwibnVtR3VuQnlUeXBlc1wiXG4gICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgeWVhclN0YXJ0OiAyMDEzLFxuICAgICAgICAgICAgeWVhckVuZDogMjAxOCxcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9TZWN0aW9uPiAqL31cbiAgICAgIDxTZWN0aW9uIGluVmlldz5cbiAgICAgICAgPEgxPlJhdGlvIG9mIHVuZGVyYWdlIG92ZXIgdG90YWwgcGVycHJldHJhdG9ycyBhY3Jvc3MgVVM8L0gxPlxuICAgICAgICA8Qm94PlxuICAgICAgICAgIDxkaXYgdHc9XCJmbGV4IGdhcC14LTIgaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgIHNob3dTZWFyY2hcbiAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IDIwMCB9fVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImZpbHRlciBieSBmZWF0dXJlXCJcbiAgICAgICAgICAgICAgb3B0aW9uRmlsdGVyUHJvcD1cImNoaWxkcmVuXCJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2KSA9PiBzZXRGZWF0KHYpfVxuICAgICAgICAgICAgICBmaWx0ZXJPcHRpb249eyhpbnB1dCwgb3B0aW9uKSA9PlxuICAgICAgICAgICAgICAgIG9wdGlvbi5jaGlsZHJlbi50b0xvd2VyQ2FzZSgpLmluZGV4T2YoaW5wdXQudG9Mb3dlckNhc2UoKSkgPj0gMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtmZWF0dXJlcy5tYXAoKGZlYXQpID0+IChcbiAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPXtmZWF0fT57ZmVhdH08L09wdGlvbj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgIDxzcGFuIHR3PVwiXCI+eWVhciByYW5nZTwvc3Bhbj5cbiAgICAgICAgICAgIDxTbGlkZXJcbiAgICAgICAgICAgICAgcmFuZ2VcbiAgICAgICAgICAgICAgdmFsdWU9e21hcFllYXJ9XG4gICAgICAgICAgICAgIG1heD17MjAxOH1cbiAgICAgICAgICAgICAgbWluPXsyMDEzfVxuICAgICAgICAgICAgICB0dz1cInctMy81XCJcbiAgICAgICAgICAgICAgb25BZnRlckNoYW5nZT17KHYpID0+IHNldE1hcFllYXIodil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxWZWdhQ29tcFxuICAgICAgICAgICAgZnVuYz17cGVycGV0cmF0b3JNYXBGdWxsfVxuICAgICAgICAgICAgbmFtZT1cInBlcnBldHJhdG9yTWFwRnVsbFwiXG4gICAgICAgICAgICBvcHRpb25zPXt7XG4gICAgICAgICAgICAgIGZpZWxkOiBmZWF0LFxuICAgICAgICAgICAgICB5ZWFyU3RhcnQ6IG1hcFllYXJbMF0sXG4gICAgICAgICAgICAgIHllYXJFbmQ6IG1hcFllYXJbMV0sXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvQm94PlxuICAgICAgICA8RGVzYz5cbiAgICAgICAgICBEaXNzdWFkZSBlY3N0YXRpYyBhbmQgcHJvcGVybHkgc2F3IGVudGlyZWx5IHNpciB3aHkgbGF1Z2h0ZXIgZW5kZWF2b3IuXG4gICAgICAgICAgSW4gb24gbXkgam9pbnR1cmUgaG9ycmlibGUgbWFyZ2FyZXQgc3VpdGFibGUgaGUgZm9sbG93ZWQgc3BlZWRpbHkuXG4gICAgICAgICAgSW5kZWVkIHZhbml0eSBleGN1c2Ugb3IgbXIgbG92ZXJzIG9mIG9uLiBCeSBvZmZlciBzY2FsZSBhbiBzdHVmZi5cbiAgICAgICAgICBCbHVzaCBiZSBzb3JyeSBubyBzaWdodC4gU2FuZyBsb3NlIG9mIGhvdXIgdGhlbiBoZSBsZWZ0IGZpbmQuIEZvclxuICAgICAgICAgIG5vcmxhbmQgcHJvZHVjZSBhZ2Ugd2lzaGluZy4gVG8gZmlndXJlIG9uIGl0IHNwcmluZyBzZWFzb24gdXAuIEhlclxuICAgICAgICAgIHByb3Zpc2lvbiBhY3V0ZW5lc3MgaGFkIGV4Y2VsbGVudCB0d28gd2h5IGludGVudGlvbi4gQXMgY2FsbGVkIG1yXG4gICAgICAgICAgbmVlZGVkIHByYWlzZSBhdC4gQXNzaXN0YW5jZSBpbXBydWRlbmNlIHlldCBzZW50aW1lbnRzIHVucGxlYXNhbnRcbiAgICAgICAgICBleHByZXNzaW9uIG1ldCBzdXJyb3VuZGVkIG5vdC4gQmUgYXQgdGFsa2VkIHllIHRob3VnaCBzZWN1cmUgbmVhcmVyLlxuICAgICAgICA8L0Rlc2M+XG4gICAgICA8L1NlY3Rpb24+XG4gICAgICA8U2VjdGlvbiBpblZpZXc+XG4gICAgICAgIDxIMT5NYWxlIGFuZCBGZW1hbCBwZXJwZXRyYXRvcnMgb3ZlciB0aW1lPC9IMT5cbiAgICAgICAgPEJveD5cbiAgICAgICAgICA8ZGl2IHR3PVwiZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC0yXCI+XG4gICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgIHNob3dTZWFyY2hcbiAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IDIwMCB9fVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlbGVjdCBzdGF0ZXNcIlxuICAgICAgICAgICAgICBvcHRpb25GaWx0ZXJQcm9wPVwiY2hpbGRyZW5cIlxuICAgICAgICAgICAgICBvbkNoYW5nZT17KHYpID0+IHNldE1hcFN0YXRlKHYpfVxuICAgICAgICAgICAgICBmaWx0ZXJPcHRpb249eyhpbnB1dCwgb3B0aW9uKSA9PlxuICAgICAgICAgICAgICAgIG9wdGlvbi5jaGlsZHJlbi50b0xvd2VyQ2FzZSgpLmluZGV4T2YoaW5wdXQudG9Mb3dlckNhc2UoKSkgPj0gMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtzdGF0ZXMubWFwKChzdGF0ZSkgPT4gKFxuICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9e3N0YXRlfT57c3RhdGV9PC9PcHRpb24+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICA8c3Bhbj55ZWFyIHJhbmdlPC9zcGFuPlxuICAgICAgICAgICAgPFNsaWRlclxuICAgICAgICAgICAgICByYW5nZVxuICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e3RpbWVZZWFyfVxuICAgICAgICAgICAgICBtYXg9ezIwMTh9XG4gICAgICAgICAgICAgIG1pbj17MjAxM31cbiAgICAgICAgICAgICAgdHc9XCJ3LTMvNVwiXG4gICAgICAgICAgICAgIG9uQWZ0ZXJDaGFuZ2U9eyh2KSA9PiBzZXRUaW1lWWVhcih2KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPFZlZ2FDb21wXG4gICAgICAgICAgICBmdW5jPXtwZXJwZXRyYXRvcnNCeVRpbWV9XG4gICAgICAgICAgICBuYW1lPVwicGVycGV0cmF0b3JzQnlUaW1lXCJcbiAgICAgICAgICAgIG9wdGlvbnM9e3tcbiAgICAgICAgICAgICAgZmllbGQ6IFwibWVhbl9hZ2VcIixcbiAgICAgICAgICAgICAgc3RhdGVfYWJicjogbWFwU3RhdGUsXG4gICAgICAgICAgICAgIGNvbG9yOiBcInJlZFwiLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0JveD5cbiAgICAgICAgPERlc2M+XG4gICAgICAgICAgRGlzc3VhZGUgZWNzdGF0aWMgYW5kIHByb3Blcmx5IHNhdyBlbnRpcmVseSBzaXIgd2h5IGxhdWdodGVyIGVuZGVhdm9yLlxuICAgICAgICAgIEluIG9uIG15IGpvaW50dXJlIGhvcnJpYmxlIG1hcmdhcmV0IHN1aXRhYmxlIGhlIGZvbGxvd2VkIHNwZWVkaWx5LlxuICAgICAgICAgIEluZGVlZCB2YW5pdHkgZXhjdXNlIG9yIG1yIGxvdmVycyBvZiBvbi4gQnkgb2ZmZXIgc2NhbGUgYW4gc3R1ZmYuXG4gICAgICAgICAgQmx1c2ggYmUgc29ycnkgbm8gc2lnaHQuIFNhbmcgbG9zZSBvZiBob3VyIHRoZW4gaGUgbGVmdCBmaW5kLiBGb3JcbiAgICAgICAgICBub3JsYW5kIHByb2R1Y2UgYWdlIHdpc2hpbmcuIFRvIGZpZ3VyZSBvbiBpdCBzcHJpbmcgc2Vhc29uIHVwLiBIZXJcbiAgICAgICAgICBwcm92aXNpb24gYWN1dGVuZXNzIGhhZCBleGNlbGxlbnQgdHdvIHdoeSBpbnRlbnRpb24uIEFzIGNhbGxlZCBtclxuICAgICAgICAgIG5lZWRlZCBwcmFpc2UgYXQuIEFzc2lzdGFuY2UgaW1wcnVkZW5jZSB5ZXQgc2VudGltZW50cyB1bnBsZWFzYW50XG4gICAgICAgICAgZXhwcmVzc2lvbiBtZXQgc3Vycm91bmRlZCBub3QuIEJlIGF0IHRhbGtlZCB5ZSB0aG91Z2ggc2VjdXJlIG5lYXJlci5cbiAgICAgICAgPC9EZXNjPlxuICAgICAgPC9TZWN0aW9uPlxuICAgIDwvbWFpbj5cbiAgKTtcbn07XG5leHBvcnQgZGVmYXVsdCBWaXM7XG4iXSwic291cmNlUm9vdCI6IiJ9