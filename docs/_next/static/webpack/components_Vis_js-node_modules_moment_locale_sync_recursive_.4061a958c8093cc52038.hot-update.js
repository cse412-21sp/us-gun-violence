self["webpackHotUpdate_N_E"]("components_Vis_js-node_modules_moment_locale_sync_recursive_",{

/***/ "./components/functions/gunByTime.js":
/*!*******************************************!*\
  !*** ./components/functions/gunByTime.js ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* harmony import */ var arquero__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! arquero */ "./node_modules/arquero/src/index.js");
/* module decorator */ module = __webpack_require__.hmd(module);







function gunByTime(dataSet, options) {
  var g = dataSet.g;
  var state_abbr = options.state_abbr,
      gun = options.gun;
  var data = g.params({
    gun: gun
  }).filter(function (d) {
    return d.gun == gun;
  }).groupby("state", "year").rollup({
    count_guns: function count_guns(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.count();
    }
  }).join(g.params({
    gun: gun
  }).groupby("state", "year").rollup({
    total_guns: function total_guns(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.count();
    }
  }), "state").join(stf, "state").filter(function (d) {
    return d.year_1 === d.year_2;
  }).select(arquero__WEBPACK_IMPORTED_MODULE_4__.not("year_2")).rename({
    year_1: "year"
  }).derive({
    percentage: function percentage(d) {
      return 100 * d.count_guns / d.total_guns;
    }
  });
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markLine().data(data.derive({
    state: function state(d) {
      return "all";
    }
  })).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldO("year"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().mean("percentage"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("state").title("State")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markLine().data(data).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["state_abbr"] == ' + '"' + state_abbr + '"')).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldO("year"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().mean("percentage").title("Percentage of " + gun), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("state_abbr").title("State"))).width(500);
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (gunByTime);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9mdW5jdGlvbnMvZ3VuQnlUaW1lLmpzIl0sIm5hbWVzIjpbImd1bkJ5VGltZSIsImRhdGFTZXQiLCJvcHRpb25zIiwiZyIsInN0YXRlX2FiYnIiLCJndW4iLCJkYXRhIiwicGFyYW1zIiwiZmlsdGVyIiwiZCIsImdyb3VwYnkiLCJyb2xsdXAiLCJjb3VudF9ndW5zIiwib3AiLCJqb2luIiwidG90YWxfZ3VucyIsInN0ZiIsInllYXJfMSIsInllYXJfMiIsInNlbGVjdCIsImFxIiwicmVuYW1lIiwiZGVyaXZlIiwicGVyY2VudGFnZSIsInZsIiwic3RhdGUiLCJlbmNvZGUiLCJmaWVsZE8iLCJtZWFuIiwiZmllbGROIiwidGl0bGUiLCJ0cmFuc2Zvcm0iLCJ3aWR0aCIsInZlZ2FPcHRpb25zIiwiY29uZmlnIiwiaW5pdCIsInZpZXciLCJ0b29sdGlwIiwidmVnYVRvb2x0aXAiLCJjYWxsIiwicmVuZGVyZXIiLCJ2ZWdhIiwidmVnYUxpdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsU0FBVCxDQUFtQkMsT0FBbkIsRUFBNEJDLE9BQTVCLEVBQXFDO0FBQUEsTUFDM0JDLENBRDJCLEdBQ3JCRixPQURxQixDQUMzQkUsQ0FEMkI7QUFBQSxNQUUzQkMsVUFGMkIsR0FFUEYsT0FGTyxDQUUzQkUsVUFGMkI7QUFBQSxNQUVmQyxHQUZlLEdBRVBILE9BRk8sQ0FFZkcsR0FGZTtBQUduQyxNQUFNQyxJQUFJLEdBQUdILENBQUMsQ0FDWEksTUFEVSxDQUNIO0FBQUVGLE9BQUcsRUFBRUE7QUFBUCxHQURHLEVBRVZHLE1BRlUsQ0FFSCxVQUFDQyxDQUFEO0FBQUEsV0FBT0EsQ0FBQyxDQUFDSixHQUFGLElBQVNBLEdBQWhCO0FBQUEsR0FGRyxFQUdWSyxPQUhVLENBR0YsT0FIRSxFQUdPLE1BSFAsRUFJVkMsTUFKVSxDQUlIO0FBQ05DLGNBQVUsRUFBRSxvQkFBQ0gsQ0FBRDtBQUFBLGFBQU9JLDZDQUFBLEVBQVA7QUFBQTtBQUROLEdBSkcsRUFPVkMsSUFQVSxDQVFUWCxDQUFDLENBQ0VJLE1BREgsQ0FDVTtBQUFFRixPQUFHLEVBQUVBO0FBQVAsR0FEVixFQUVHSyxPQUZILENBRVcsT0FGWCxFQUVvQixNQUZwQixFQUdHQyxNQUhILENBR1U7QUFDTkksY0FBVSxFQUFFLG9CQUFDTixDQUFEO0FBQUEsYUFBT0ksNkNBQUEsRUFBUDtBQUFBO0FBRE4sR0FIVixDQVJTLEVBY1QsT0FkUyxFQWdCVkMsSUFoQlUsQ0FnQkxFLEdBaEJLLEVBZ0JBLE9BaEJBLEVBaUJWUixNQWpCVSxDQWlCSCxVQUFDQyxDQUFEO0FBQUEsV0FBT0EsQ0FBQyxDQUFDUSxNQUFGLEtBQWFSLENBQUMsQ0FBQ1MsTUFBdEI7QUFBQSxHQWpCRyxFQWtCVkMsTUFsQlUsQ0FrQkhDLHdDQUFBLENBQU8sUUFBUCxDQWxCRyxFQW1CVkMsTUFuQlUsQ0FtQkg7QUFBRUosVUFBTSxFQUFFO0FBQVYsR0FuQkcsRUFvQlZLLE1BcEJVLENBb0JIO0FBQUVDLGNBQVUsRUFBRSxvQkFBQ2QsQ0FBRDtBQUFBLGFBQVEsTUFBTUEsQ0FBQyxDQUFDRyxVQUFULEdBQXVCSCxDQUFDLENBQUNNLFVBQWhDO0FBQUE7QUFBZCxHQXBCRyxDQUFiO0FBc0JBLFNBQU9TLGdEQUFBLENBRUhBLG1EQUFBLEdBRUdsQixJQUZILENBRVFBLElBQUksQ0FBQ2dCLE1BQUwsQ0FBWTtBQUFFRyxTQUFLLEVBQUUsZUFBQ2hCLENBQUQ7QUFBQSxhQUFPLEtBQVA7QUFBQTtBQUFULEdBQVosQ0FGUixFQUdHaUIsTUFISCxDQUlJRiw0Q0FBQSxHQUFPRyxNQUFQLENBQWMsTUFBZCxDQUpKLEVBS0lILDRDQUFBLEdBQU9JLElBQVAsQ0FBWSxZQUFaLENBTEosRUFNSUosZ0RBQUEsR0FBV0ssTUFBWCxDQUFrQixPQUFsQixFQUEyQkMsS0FBM0IsQ0FBaUMsT0FBakMsQ0FOSixDQUZHLEVBVUhOLG1EQUFBLEdBRUdsQixJQUZILENBRVFBLElBRlIsRUFHR3lCLFNBSEgsQ0FJSVAsaURBQUEsQ0FBVSw0QkFBNEIsR0FBNUIsR0FBa0NwQixVQUFsQyxHQUErQyxHQUF6RCxDQUpKLEVBTUdzQixNQU5ILENBT0lGLDRDQUFBLEdBQU9HLE1BQVAsQ0FBYyxNQUFkLENBUEosRUFRSUgsNENBQUEsR0FFR0ksSUFGSCxDQUVRLFlBRlIsRUFHR0UsS0FISCxDQUdTLG1CQUFtQnpCLEdBSDVCLENBUkosRUFZSW1CLGdEQUFBLEdBQVdLLE1BQVgsQ0FBa0IsWUFBbEIsRUFBZ0NDLEtBQWhDLENBQXNDLE9BQXRDLENBWkosQ0FWRyxFQXlCSkUsS0F6QkksQ0F5QkUsR0F6QkYsQ0FBUDtBQTBCRDs7QUFFRCxJQUFNQyxXQUFXLEdBQUc7QUFDbEJDLFFBQU0sRUFBRSxDQUNOO0FBRE0sR0FEVTtBQUlsQkMsTUFBSSxFQUFFLGNBQUNDLElBQUQsRUFBVTtBQUNkO0FBQ0FBLFFBQUksQ0FBQ0MsT0FBTCxDQUFhLElBQUlDLGlEQUFKLEdBQTBCQyxJQUF2QztBQUNELEdBUGlCO0FBUWxCSCxNQUFJLEVBQUU7QUFDSkksWUFBUSxFQUFFO0FBRE47QUFSWSxDQUFwQjtBQVlBaEIsbURBQUEsQ0FBWWlCLGlDQUFaLEVBQWtCQyxzQ0FBbEIsRUFBNEJULFdBQTVCO0FBRUEsK0RBQWVqQyxTQUFmIiwiZmlsZSI6InN0YXRpYy93ZWJwYWNrL2NvbXBvbmVudHNfVmlzX2pzLW5vZGVfbW9kdWxlc19tb21lbnRfbG9jYWxlX3N5bmNfcmVjdXJzaXZlXy40MDYxYTk1OGM4MDkzY2M1MjAzOC5ob3QtdXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdmVnYSBmcm9tIFwidmVnYVwiO1xuaW1wb3J0ICogYXMgdmwgZnJvbSBcInZlZ2EtbGl0ZS1hcGlcIjtcbmltcG9ydCAqIGFzIHZlZ2FMaXRlIGZyb20gXCJ2ZWdhLWxpdGVcIjtcbmltcG9ydCAqIGFzIHZlZ2FUb29sdGlwIGZyb20gXCJ2ZWdhLXRvb2x0aXBcIjtcbmltcG9ydCB7IG9wIH0gZnJvbSBcImFycXVlcm9cIjtcbmltcG9ydCAqIGFzIGFxIGZyb20gXCJhcnF1ZXJvXCI7XG5cbmZ1bmN0aW9uIGd1bkJ5VGltZShkYXRhU2V0LCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgZyB9ID0gZGF0YVNldDtcbiAgY29uc3QgeyBzdGF0ZV9hYmJyLCBndW4gfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGRhdGEgPSBnXG4gICAgLnBhcmFtcyh7IGd1bjogZ3VuIH0pXG4gICAgLmZpbHRlcigoZCkgPT4gZC5ndW4gPT0gZ3VuKVxuICAgIC5ncm91cGJ5KFwic3RhdGVcIiwgXCJ5ZWFyXCIpXG4gICAgLnJvbGx1cCh7XG4gICAgICBjb3VudF9ndW5zOiAoZCkgPT4gb3AuY291bnQoKSxcbiAgICB9KVxuICAgIC5qb2luKFxuICAgICAgZ1xuICAgICAgICAucGFyYW1zKHsgZ3VuOiBndW4gfSlcbiAgICAgICAgLmdyb3VwYnkoXCJzdGF0ZVwiLCBcInllYXJcIilcbiAgICAgICAgLnJvbGx1cCh7XG4gICAgICAgICAgdG90YWxfZ3VuczogKGQpID0+IG9wLmNvdW50KCksXG4gICAgICAgIH0pLFxuICAgICAgXCJzdGF0ZVwiXG4gICAgKVxuICAgIC5qb2luKHN0ZiwgXCJzdGF0ZVwiKVxuICAgIC5maWx0ZXIoKGQpID0+IGQueWVhcl8xID09PSBkLnllYXJfMilcbiAgICAuc2VsZWN0KGFxLm5vdChcInllYXJfMlwiKSlcbiAgICAucmVuYW1lKHsgeWVhcl8xOiBcInllYXJcIiB9KVxuICAgIC5kZXJpdmUoeyBwZXJjZW50YWdlOiAoZCkgPT4gKDEwMCAqIGQuY291bnRfZ3VucykgLyBkLnRvdGFsX2d1bnMgfSk7XG5cbiAgcmV0dXJuIHZsXG4gICAgLmxheWVyKFxuICAgICAgdmxcbiAgICAgICAgLm1hcmtMaW5lKClcbiAgICAgICAgLmRhdGEoZGF0YS5kZXJpdmUoeyBzdGF0ZTogKGQpID0+IFwiYWxsXCIgfSkpXG4gICAgICAgIC5lbmNvZGUoXG4gICAgICAgICAgdmwueCgpLmZpZWxkTyhcInllYXJcIiksXG4gICAgICAgICAgdmwueSgpLm1lYW4oXCJwZXJjZW50YWdlXCIpLFxuICAgICAgICAgIHZsLmNvbG9yKCkuZmllbGROKFwic3RhdGVcIikudGl0bGUoXCJTdGF0ZVwiKVxuICAgICAgICApLFxuICAgICAgdmxcbiAgICAgICAgLm1hcmtMaW5lKClcbiAgICAgICAgLmRhdGEoZGF0YSlcbiAgICAgICAgLnRyYW5zZm9ybShcbiAgICAgICAgICB2bC5maWx0ZXIoJ2RhdHVtW1wic3RhdGVfYWJiclwiXSA9PSAnICsgJ1wiJyArIHN0YXRlX2FiYnIgKyAnXCInKVxuICAgICAgICApXG4gICAgICAgIC5lbmNvZGUoXG4gICAgICAgICAgdmwueCgpLmZpZWxkTyhcInllYXJcIiksXG4gICAgICAgICAgdmxcbiAgICAgICAgICAgIC55KClcbiAgICAgICAgICAgIC5tZWFuKFwicGVyY2VudGFnZVwiKVxuICAgICAgICAgICAgLnRpdGxlKFwiUGVyY2VudGFnZSBvZiBcIiArIGd1biksXG4gICAgICAgICAgdmwuY29sb3IoKS5maWVsZE4oXCJzdGF0ZV9hYmJyXCIpLnRpdGxlKFwiU3RhdGVcIilcbiAgICAgICAgKVxuICAgIClcbiAgICAud2lkdGgoNTAwKTtcbn1cblxuY29uc3QgdmVnYU9wdGlvbnMgPSB7XG4gIGNvbmZpZzoge1xuICAgIC8vIFZlZ2EtTGl0ZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb25cbiAgfSxcbiAgaW5pdDogKHZpZXcpID0+IHtcbiAgICAvLyBpbml0aWFsaXplIHRvb2x0aXAgaGFuZGxlclxuICAgIHZpZXcudG9vbHRpcChuZXcgdmVnYVRvb2x0aXAuSGFuZGxlcigpLmNhbGwpO1xuICB9LFxuICB2aWV3OiB7XG4gICAgcmVuZGVyZXI6IFwiY2FudmFzXCIsXG4gIH0sXG59O1xudmwucmVnaXN0ZXIodmVnYSwgdmVnYUxpdGUsIHZlZ2FPcHRpb25zKTtcblxuZXhwb3J0IGRlZmF1bHQgZ3VuQnlUaW1lO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==