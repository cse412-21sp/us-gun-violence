self["webpackHotUpdate_N_E"]("components_Vis_js-node_modules_moment_locale_sync_recursive_",{

/***/ "./components/functions/tweetmapWA.js":
/*!********************************************!*\
  !*** ./components/functions/tweetmapWA.js ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function perpetratorMap(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var wa = dataSet.wa,
      polar = dataSet.polar,
      usa = dataSet.usa;
  var titles = {
    mean_age: "Perpetrators mean age",
    underages_ratio: ["Percentage of underage/total", "perpetrators"],
    male_pctg: ["Percentage of ", "male perpetrators"],
    female_pctg: ["Percentage of ", "female perpetrators"]
  };
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markGeoshape({
    fill: "#374151",
    stroke: "#fff",
    strokeWidth: 1
  }).data(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.topojson(usa).feature("counties")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markCircle({
    stroke: "#white"
  }).data(polar).params(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.selectInterval().bind("scaless")).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter("datum['latitude'] != 'Graham' && datum['longitude'] != 'Buckley'")).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.latitude().fieldQ("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.longitude().fieldQ("longitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldQ("comp").legend({
    titleLineHeight: 10
  }).scale({
    scheme: "redblue"
  }), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.size().fieldQ("n_killed").title(["Perpetrators/", "1M population/year"]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip([vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldN("city_or_county"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("comp"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("longitude")])));
}

function perpetratorMapFull(_ref2) {
  var dataSet = _ref2.dataSet,
      options = _ref2.options;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(perpetratorMap({
    dataSet: dataSet,
    options: options
  }).height(500).width(720)).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 16,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      domainColor: "white"
    },
    legend: {
      titleFontSize: 14,
      labelFontSize: 12,
      labelColor: "white",
      titleColor: "white",
      symbolFillColor: "#6b7280",
      symbolStrokeColor: "white"
    },
    scale: {
      maxSize: 50
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (perpetratorMapFull);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9mdW5jdGlvbnMvdHdlZXRtYXBXQS5qcyJdLCJuYW1lcyI6WyJwZXJwZXRyYXRvck1hcCIsImRhdGFTZXQiLCJvcHRpb25zIiwid2EiLCJwb2xhciIsInVzYSIsInRpdGxlcyIsIm1lYW5fYWdlIiwidW5kZXJhZ2VzX3JhdGlvIiwibWFsZV9wY3RnIiwiZmVtYWxlX3BjdGciLCJ2bCIsImZpbGwiLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsImRhdGEiLCJmZWF0dXJlIiwicGFyYW1zIiwiYmluZCIsInRyYW5zZm9ybSIsImVuY29kZSIsImZpZWxkUSIsImxlZ2VuZCIsInRpdGxlTGluZUhlaWdodCIsInNjYWxlIiwic2NoZW1lIiwidGl0bGUiLCJwZXJwZXRyYXRvck1hcEZ1bGwiLCJoZWlnaHQiLCJ3aWR0aCIsImNvbmZpZyIsIm1hcmsiLCJvcGFjaXR5IiwiYmFja2dyb3VuZCIsImF4aXMiLCJ0aXRsZUZvbnRTaXplIiwidGlja0NvbG9yIiwibGFiZWxDb2xvciIsInRpdGxlQ29sb3IiLCJncmlkQ29sb3IiLCJkb21haW5Db2xvciIsImxhYmVsRm9udFNpemUiLCJzeW1ib2xGaWxsQ29sb3IiLCJzeW1ib2xTdHJva2VDb2xvciIsIm1heFNpemUiLCJ2aWV3IiwidmVnYU9wdGlvbnMiLCJpbml0IiwidG9vbHRpcCIsInZlZ2FUb29sdGlwIiwiY2FsbCIsInJlbmRlcmVyIiwidmVnYSIsInZlZ2FMaXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxjQUFULE9BQThDO0FBQUEsTUFBcEJDLE9BQW9CLFFBQXBCQSxPQUFvQjtBQUFBLE1BQVhDLE9BQVcsUUFBWEEsT0FBVztBQUFBLE1BQ3BDQyxFQURvQyxHQUNqQkYsT0FEaUIsQ0FDcENFLEVBRG9DO0FBQUEsTUFDaENDLEtBRGdDLEdBQ2pCSCxPQURpQixDQUNoQ0csS0FEZ0M7QUFBQSxNQUN6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Y0FBQ0YsSUFBRCxFQUFVO0FBQ2Q7QUFDQUEsUUFBSSxDQUFDRyxPQUFMLENBQWEsSUFBSUMsaURBQUosR0FBMEJDLElBQXZDO0FBQ0QsR0FQaUI7QUFRbEJMLE1BQUksRUFBRTtBQUNKTSxZQUFRLEVBQUU7QUFETjtBQVJZLENBQXBCO0FBWUF4QyxtREFBQSxDQUFZeUMsaUNBQVosRUFBa0JDLHNDQUFsQixFQUE0QlAsV0FBNUI7QUFFQSwrREFBZW5CLGtCQUFmIiwiZmlsZSI6InN0YXRpYy93ZWJwYWNrL2NvbXBvbmVudHNfVmlzX2pzLW5vZGVfbW9kdWxlc19tb21lbnRfbG9jYWxlX3N5bmNfcmVjdXJzaXZlXy5kYTUwMGIwNTM2NWJiYTRiMTdlNy5ob3QtdXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdmVnYSBmcm9tIFwidmVnYVwiO1xuaW1wb3J0ICogYXMgdmwgZnJvbSBcInZlZ2EtbGl0ZS1hcGlcIjtcbmltcG9ydCAqIGFzIHZlZ2FMaXRlIGZyb20gXCJ2ZWdhLWxpdGVcIjtcbmltcG9ydCAqIGFzIHZlZ2FUb29sdGlwIGZyb20gXCJ2ZWdhLXRvb2x0aXBcIjtcblxuZnVuY3Rpb24gcGVycGV0cmF0b3JNYXAoeyBkYXRhU2V0LCBvcHRpb25zIH0pIHtcbiAgY29uc3QgeyB3YSwgcG9sYXIsIHVzYSB9ID0gZGF0YVNldDtcbiAgY29uc3QgdGl0bGVzID0ge1xuICAgIG1lYW5fYWdlOiBcIlBlcnBldHJhdG9ycyBtZWFuIGFnZVwiLFxuICAgIHVuZGVyYWdlc19yYXRpbzogW1wiUGVyY2VudGFnZSBvZiB1bmRlcmFnZS90b3RhbFwiLCBcInBlcnBldHJhdG9yc1wiXSxcbiAgICBtYWxlX3BjdGc6IFtcIlBlcmNlbnRhZ2Ugb2YgXCIsIFwibWFsZSBwZXJwZXRyYXRvcnNcIl0sXG4gICAgZmVtYWxlX3BjdGc6IFtcIlBlcmNlbnRhZ2Ugb2YgXCIsIFwiZmVtYWxlIHBlcnBldHJhdG9yc1wiXSxcbiAgfTtcblxuICByZXR1cm4gdmwubGF5ZXIoXG4gICAgdmxcbiAgICAgIC5tYXJrR2Vvc2hhcGUoeyBmaWxsOiBcIiMzNzQxNTFcIiwgc3Ryb2tlOiBcIiNmZmZcIiwgc3Ryb2tlV2lkdGg6IDEgfSlcbiAgICAgIC5kYXRhKHZsLnRvcG9qc29uKHVzYSkuZmVhdHVyZShcImNvdW50aWVzXCIpKSxcbiAgICB2bFxuICAgICAgLm1hcmtDaXJjbGUoeyBzdHJva2U6IFwiI3doaXRlXCIgfSlcbiAgICAgIC5kYXRhKHBvbGFyKVxuICAgICAgLnBhcmFtcyh2bC5zZWxlY3RJbnRlcnZhbCgpLmJpbmQoXCJzY2FsZXNzXCIpKVxuICAgICAgLnRyYW5zZm9ybShcbiAgICAgICAgdmwuZmlsdGVyKFxuICAgICAgICAgIFwiZGF0dW1bJ2xhdGl0dWRlJ10gIT0gJ0dyYWhhbScgJiYgZGF0dW1bJ2xvbmdpdHVkZSddICE9ICdCdWNrbGV5J1wiXG4gICAgICAgIClcbiAgICAgIClcbiAgICAgIC5lbmNvZGUoXG4gICAgICAgIHZsLmxhdGl0dWRlKCkuZmllbGRRKFwibGF0aXR1ZGVcIiksXG4gICAgICAgIHZsLmxvbmdpdHVkZSgpLmZpZWxkUShcImxvbmdpdHVkZVwiKSxcbiAgICAgICAgdmxcbiAgICAgICAgICAuY29sb3IoKVxuICAgICAgICAgIC5maWVsZFEoXCJjb21wXCIpXG4gICAgICAgICAgLmxlZ2VuZCh7IHRpdGxlTGluZUhlaWdodDogMTAgfSlcbiAgICAgICAgICAuc2NhbGUoeyBzY2hlbWU6IFwicmVkYmx1ZVwiIH0pLFxuICAgICAgICB2bFxuICAgICAgICAgIC5zaXplKClcbiAgICAgICAgICAuZmllbGRRKFwibl9raWxsZWRcIilcbiAgICAgICAgICAudGl0bGUoW1wiUGVycGV0cmF0b3JzL1wiLCBcIjFNIHBvcHVsYXRpb24veWVhclwiXSksXG4gICAgICAgIHZsLnRvb2x0aXAoW1xuICAgICAgICAgIHZsLmZpZWxkTihcImNpdHlfb3JfY291bnR5XCIpLFxuICAgICAgICAgIHZsLmZpZWxkUShcImNvbXBcIiksXG4gICAgICAgICAgdmwuZmllbGRRKFwibGF0aXR1ZGVcIiksXG4gICAgICAgICAgdmwuZmllbGRRKFwibG9uZ2l0dWRlXCIpLFxuICAgICAgICBdKVxuICAgICAgKVxuICApO1xufVxuXG5mdW5jdGlvbiBwZXJwZXRyYXRvck1hcEZ1bGwoeyBkYXRhU2V0LCBvcHRpb25zIH0pIHtcbiAgcmV0dXJuIHZsXG4gICAgLmhjb25jYXQocGVycGV0cmF0b3JNYXAoeyBkYXRhU2V0LCBvcHRpb25zIH0pLmhlaWdodCg1MDApLndpZHRoKDcyMCkpXG4gICAgLmNvbmZpZyh7XG4gICAgICBtYXJrOiB7IG9wYWNpdHk6IDAuOSB9LFxuICAgICAgYmFja2dyb3VuZDogXCIjMWYyOTM3XCIsXG4gICAgICBheGlzOiB7XG4gICAgICAgIHRpdGxlRm9udFNpemU6IDE2LFxuICAgICAgICB0aWNrQ29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgbGFiZWxDb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICB0aXRsZUNvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgIGdyaWRDb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICBkb21haW5Db2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICB0aXRsZUZvbnRTaXplOiAxNCxcbiAgICAgICAgbGFiZWxGb250U2l6ZTogMTIsXG4gICAgICAgIGxhYmVsQ29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgdGl0bGVDb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICBzeW1ib2xGaWxsQ29sb3I6IFwiIzZiNzI4MFwiLFxuICAgICAgICBzeW1ib2xTdHJva2VDb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgfSxcbiAgICAgIHNjYWxlOiB7IG1heFNpemU6IDUwIH0sXG4gICAgICB2aWV3OiB7IHN0cm9rZTogbnVsbCB9LFxuICAgIH0pO1xufVxuXG5jb25zdCB2ZWdhT3B0aW9ucyA9IHtcbiAgY29uZmlnOiB7XG4gICAgLy8gVmVnYS1MaXRlIGRlZmF1bHQgY29uZmlndXJhdGlvblxuICB9LFxuICBpbml0OiAodmlldykgPT4ge1xuICAgIC8vIGluaXRpYWxpemUgdG9vbHRpcCBoYW5kbGVyXG4gICAgdmlldy50b29sdGlwKG5ldyB2ZWdhVG9vbHRpcC5IYW5kbGVyKCkuY2FsbCk7XG4gIH0sXG4gIHZpZXc6IHtcbiAgICByZW5kZXJlcjogXCJjYW52YXNcIixcbiAgfSxcbn07XG52bC5yZWdpc3Rlcih2ZWdhLCB2ZWdhTGl0ZSwgdmVnYU9wdGlvbnMpO1xuXG5leHBvcnQgZGVmYXVsdCBwZXJwZXRyYXRvck1hcEZ1bGw7XG4iXSwic291cmNlUm9vdCI6IiJ9