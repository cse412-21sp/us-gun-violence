self["webpackHotUpdate_N_E"]("components_Vis_js-node_modules_moment_locale_sync_recursive_",{

/***/ "./components/functions/tweetmapWA.js":
/*!********************************************!*\
  !*** ./components/functions/tweetmapWA.js ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function perpetratorMap(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var usa = dataSet.usa,
      pst = dataSet.pst;
  var titles = {
    mean_age: "Perpetrators mean age",
    underages_ratio: ["Percentage of underage/total", "perpetrators"],
    male_pctg: ["Percentage of ", "male perpetrators"],
    female_pctg: ["Percentage of ", "female perpetrators"]
  };
  var schemes = {
    mean_age: "goldred",
    underages_ratio: "yellowgreenblue",
    male_pctg: "tealblues",
    female_pctg: "redpurple"
  };
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.data(pst).layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markGeoshape({
    fill: "#374151",
    stroke: "#fff",
    strokeWidth: 1
  }).data(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.topojson(wa).feature("counties"))).project(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.projection("albersUsa"));
}

function perpetratorMapFull(_ref2) {
  var dataSet = _ref2.dataSet,
      options = _ref2.options;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(perpetratorMap({
    dataSet: dataSet,
    options: options
  }).height(500).width(720)).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 16,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      domainColor: "white"
    },
    legend: {
      titleFontSize: 14,
      labelFontSize: 12,
      labelColor: "white",
      titleColor: "white",
      symbolFillColor: "#6b7280",
      symbolStrokeColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (perpetratorMapFull);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9mdW5jdGlvbnMvdHdlZXRtYXBXQS5qcyJdLCJuYW1lcyI6WyJwZXJwZXRyYXRvck1hcCIsImRhdGFTZXQiLCJvcHRpb25zIiwidXNhIiwicHN0IiwidGl0bGVzIiwibWVhbl9hZ2UiLCJ1bmRlcmFnZXNfcmF0aW8iLCJtYWxlX3BjdGciLCJmZW1hbGVfcGN0ZyIsInNjaGVtZXMiLCJ2bCIsImxheWVyIiwiZmlsbCIsInN0cm9rZSIsInN0cm9rZVdpZHRoIiwiZGF0YSIsIndhIiwiZmVhdHVyZSIsInByb2plY3QiLCJwZXJwZXRyYXRvck1hcEZ1bGwiLCJoZWlnaHQiLCJ3aWR0aCIsImNvbmZpZyIsIm1hcmsiLCJvcGFjaXR5IiwiYmFja2dyb3VuZCIsImF4aXMiLCJ0aXRsZUZvbnRTaXplIiwidGlja0NvbG9yIiwibGFiZWxDb2xvciIsInRpdGxlQ29sb3IiLCJncmlkQ29sb3IiLCJkb21haW5Db2xvciIsImxlZ2VuZCIsImxhYmVsRm9udFNpemUiLCJzeW1ib2xGaWxsQ29sb3IiLCJzeW1ib2xTdHJva2VDb2xvciIsInNjYWxlIiwibWF4U2l6ZSIsInZpZXciLCJ2ZWdhT3B0aW9ucyIsImluaXQiLCJ0b29sdGlwIiwidmVnYVRvb2x0aXAiLCJjYWxsIiwicmVuZGVyZXIiLCJ2ZWdhIiwidmVnYUxpdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLGNBQVQsT0FBOEM7QUFBQSxNQUFwQkMsT0FBb0IsUUFBcEJBLE9BQW9CO0FBQUEsTUFBWEMsT0FBVyxRQUFYQSxPQUFXO0FBQUEsTUFDcENDLEdBRG9DLEdBQ3ZCRixPQUR1QixDQUNwQ0UsR0FEb0M7QUFBQSxNQUMvQkMsR0FEK0IsR0FDdkJILE9BRHVCLENBQy9CRyxHQUQrQjtBQUU1QyxNQUFNQyxNQUFNLEdBQUc7QUFDYkMsWUFBUSxFQUFFLHVCQURHO0FBRWJDLG1CQUFlLEVBQUUsQ0FBQyw4QkFBRCxFQUFpQyxjQUFqQyxDQUZKO0FBR2JDLGFBQVMsRUFBRSxDQUFDLGdCQUFELEVBQW1CLG1CQUFuQixDQUhFO0FBSWJDLGVBQVcsRUFBRSxDQUFDLGdCQUFELEVBQW1CLHFCQUFuQjtBQUpBLEdBQWY7QUFPQSxNQUFNQyxPQUFPLEdBQUc7QUFDZEosWUFBUSxFQUFFLFNBREk7QUFFZEMsbUJBQWUsRUFBRSxpQkFGSDtBQUdkQyxhQUFTLEVBQUUsV0FIRztBQUlkQyxlQUFXLEVBQUU7QUFKQyxHQUFoQjtBQU9BLFNBQU9FLCtDQUFBLENBQ0NQLEdBREQsRUFFSlEsS0FGSSxDQUdIRCx1REFBQSxDQUNnQjtBQUFFRSxRQUFJLEVBQUUsU0FBUjtBQUFtQkMsVUFBTSxFQUFFLE1BQTNCO0FBQW1DQyxlQUFXLEVBQUU7QUFBaEQsR0FEaEIsRUFFR0MsSUFGSCxDQUVRTCxtREFBQSxDQUFZTSxFQUFaLEVBQWdCQyxPQUFoQixDQUF3QixVQUF4QixDQUZSLENBSEcsRUFPSkMsT0FQSSxDQU9JUixxREFBQSxDQUFjLFdBQWQsQ0FQSixDQUFQO0FBUUQ7O0FBRUQsU0FBU1Msa0JBQVQsUUFBa0Q7QUFBQSxNQUFwQm5CLE9BQW9CLFNBQXBCQSxPQUFvQjtBQUFBLE1BQVhDLE9BQVcsU0FBWEEsT0FBVztBQUNoRCxTQUFPUyxrREFBQSxDQUNJWCxjQUFjLENBQUM7QUFBRUMsV0FBTyxFQUFQQSxPQUFGO0FBQVdDLFdBQU8sRUFBUEE7QUFBWCxHQUFELENBQWQsQ0FBcUNtQixNQUFyQyxDQUE0QyxHQUE1QyxFQUFpREMsS0FBakQsQ0FBdUQsR0FBdkQsQ0FESixFQUVKQyxNQUZJLENBRUc7QUFDTkMsUUFBSSxFQUFFO0FBQUVDLGFBQU8sRUFBRTtBQUFYLEtBREE7QUFFTkMsY0FBVSxFQUFFLFNBRk47QUFHTkMsUUFBSSxFQUFFO0FBQ0pDLG1CQUFhLEVBQUUsRUFEWDtBQUVKQyxlQUFTLEVBQUUsT0FGUDtBQUdKQyxnQkFBVSxFQUFFLE9BSFI7QUFJSkMsZ0JBQVUsRUFBRSxPQUpSO0FBS0pDLGVBQVMsRUFBRSxPQUxQO0FBTUpDLGlCQUFXLEVBQUU7QUFOVCxLQUhBO0FBV05DLFVBQU0sRUFBRTtBQUNOTixtQkFBYSxFQUFFLEVBRFQ7QUFFTk8sbUJBQWEsRUFBRSxFQUZUO0FBR05MLGdCQUFVLEVBQUUsT0FITjtBQUlOQyxnQkFBVSxFQUFFLE9BSk47QUFLTksscUJBQWUsRUFBRSxTQUxYO0FBTU5DLHVCQUFpQixFQUFFO0FBTmIsS0FYRjtBQW1CTkMsU0FBSyxFQUFFO0FBQUVDLGFBQU8sRUFBRTtBQUFYLEtBbkJEO0FBb0JOQyxRQUFJLEVBQUU7QUFBRTFCLFlBQU0sRUFBRTtBQUFWO0FBcEJBLEdBRkgsQ0FBUDtBQXdCRDs7QUFFRCxJQUFNMkIsV0FBVyxHQUFHO0FBQ2xCbEIsUUFBTSxFQUFFLENBQ047QUFETSxHQURVO0FBSWxCbUIsTUFBSSxFQUFFLGNBQUNGLElBQUQsRUFBVTtBQUNkO0FBQ0FBLFFBQUksQ0FBQ0csT0FBTCxDQUFhLElBQUlDLGlEQUFKLEdBQTBCQyxJQUF2QztBQUNELEdBUGlCO0FBUWxCTCxNQUFJLEVBQUU7QUFDSk0sWUFBUSxFQUFFO0FBRE47QUFSWSxDQUFwQjtBQVlBbkMsbURBQUEsQ0FBWW9DLGlDQUFaLEVBQWtCQyxzQ0FBbEIsRUFBNEJQLFdBQTVCO0FBRUEsK0RBQWVyQixrQkFBZiIsImZpbGUiOiJzdGF0aWMvd2VicGFjay9jb21wb25lbnRzX1Zpc19qcy1ub2RlX21vZHVsZXNfbW9tZW50X2xvY2FsZV9zeW5jX3JlY3Vyc2l2ZV8uMjI5YTQ2ODdhNDY2N2I1YTdmMWQuaG90LXVwZGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHZlZ2EgZnJvbSBcInZlZ2FcIjtcbmltcG9ydCAqIGFzIHZsIGZyb20gXCJ2ZWdhLWxpdGUtYXBpXCI7XG5pbXBvcnQgKiBhcyB2ZWdhTGl0ZSBmcm9tIFwidmVnYS1saXRlXCI7XG5pbXBvcnQgKiBhcyB2ZWdhVG9vbHRpcCBmcm9tIFwidmVnYS10b29sdGlwXCI7XG5cbmZ1bmN0aW9uIHBlcnBldHJhdG9yTWFwKHsgZGF0YVNldCwgb3B0aW9ucyB9KSB7XG4gIGNvbnN0IHsgdXNhLCBwc3QgfSA9IGRhdGFTZXQ7XG4gIGNvbnN0IHRpdGxlcyA9IHtcbiAgICBtZWFuX2FnZTogXCJQZXJwZXRyYXRvcnMgbWVhbiBhZ2VcIixcbiAgICB1bmRlcmFnZXNfcmF0aW86IFtcIlBlcmNlbnRhZ2Ugb2YgdW5kZXJhZ2UvdG90YWxcIiwgXCJwZXJwZXRyYXRvcnNcIl0sXG4gICAgbWFsZV9wY3RnOiBbXCJQZXJjZW50YWdlIG9mIFwiLCBcIm1hbGUgcGVycGV0cmF0b3JzXCJdLFxuICAgIGZlbWFsZV9wY3RnOiBbXCJQZXJjZW50YWdlIG9mIFwiLCBcImZlbWFsZSBwZXJwZXRyYXRvcnNcIl0sXG4gIH07XG5cbiAgY29uc3Qgc2NoZW1lcyA9IHtcbiAgICBtZWFuX2FnZTogXCJnb2xkcmVkXCIsXG4gICAgdW5kZXJhZ2VzX3JhdGlvOiBcInllbGxvd2dyZWVuYmx1ZVwiLFxuICAgIG1hbGVfcGN0ZzogXCJ0ZWFsYmx1ZXNcIixcbiAgICBmZW1hbGVfcGN0ZzogXCJyZWRwdXJwbGVcIixcbiAgfTtcblxuICByZXR1cm4gdmxcbiAgICAuZGF0YShwc3QpXG4gICAgLmxheWVyKFxuICAgICAgdmxcbiAgICAgICAgLm1hcmtHZW9zaGFwZSh7IGZpbGw6IFwiIzM3NDE1MVwiLCBzdHJva2U6IFwiI2ZmZlwiLCBzdHJva2VXaWR0aDogMSB9KVxuICAgICAgICAuZGF0YSh2bC50b3BvanNvbih3YSkuZmVhdHVyZShcImNvdW50aWVzXCIpKVxuICAgIClcbiAgICAucHJvamVjdCh2bC5wcm9qZWN0aW9uKFwiYWxiZXJzVXNhXCIpKTtcbn1cblxuZnVuY3Rpb24gcGVycGV0cmF0b3JNYXBGdWxsKHsgZGF0YVNldCwgb3B0aW9ucyB9KSB7XG4gIHJldHVybiB2bFxuICAgIC5oY29uY2F0KHBlcnBldHJhdG9yTWFwKHsgZGF0YVNldCwgb3B0aW9ucyB9KS5oZWlnaHQoNTAwKS53aWR0aCg3MjApKVxuICAgIC5jb25maWcoe1xuICAgICAgbWFyazogeyBvcGFjaXR5OiAwLjkgfSxcbiAgICAgIGJhY2tncm91bmQ6IFwiIzFmMjkzN1wiLFxuICAgICAgYXhpczoge1xuICAgICAgICB0aXRsZUZvbnRTaXplOiAxNixcbiAgICAgICAgdGlja0NvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgIGxhYmVsQ29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgdGl0bGVDb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICBncmlkQ29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgZG9tYWluQ29sb3I6IFwid2hpdGVcIixcbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgdGl0bGVGb250U2l6ZTogMTQsXG4gICAgICAgIGxhYmVsRm9udFNpemU6IDEyLFxuICAgICAgICBsYWJlbENvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgIHRpdGxlQ29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgc3ltYm9sRmlsbENvbG9yOiBcIiM2YjcyODBcIixcbiAgICAgICAgc3ltYm9sU3Ryb2tlQ29sb3I6IFwid2hpdGVcIixcbiAgICAgIH0sXG4gICAgICBzY2FsZTogeyBtYXhTaXplOiAxNTAwIH0sXG4gICAgICB2aWV3OiB7IHN0cm9rZTogbnVsbCB9LFxuICAgIH0pO1xufVxuXG5jb25zdCB2ZWdhT3B0aW9ucyA9IHtcbiAgY29uZmlnOiB7XG4gICAgLy8gVmVnYS1MaXRlIGRlZmF1bHQgY29uZmlndXJhdGlvblxuICB9LFxuICBpbml0OiAodmlldykgPT4ge1xuICAgIC8vIGluaXRpYWxpemUgdG9vbHRpcCBoYW5kbGVyXG4gICAgdmlldy50b29sdGlwKG5ldyB2ZWdhVG9vbHRpcC5IYW5kbGVyKCkuY2FsbCk7XG4gIH0sXG4gIHZpZXc6IHtcbiAgICByZW5kZXJlcjogXCJjYW52YXNcIixcbiAgfSxcbn07XG52bC5yZWdpc3Rlcih2ZWdhLCB2ZWdhTGl0ZSwgdmVnYU9wdGlvbnMpO1xuXG5leHBvcnQgZGVmYXVsdCBwZXJwZXRyYXRvck1hcEZ1bGw7XG4iXSwic291cmNlUm9vdCI6IiJ9