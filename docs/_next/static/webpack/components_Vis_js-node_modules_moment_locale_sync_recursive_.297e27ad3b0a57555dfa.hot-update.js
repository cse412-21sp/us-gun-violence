self["webpackHotUpdate_N_E"]("components_Vis_js-node_modules_moment_locale_sync_recursive_",{

/***/ "./components/Vis.js":
/*!***************************!*\
  !*** ./components/Vis.js ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ "./node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js");
/* harmony import */ var _home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/styled/base */ "./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js");
/* harmony import */ var _components_functions_PrepetratorsByGender__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/functions/PrepetratorsByGender */ "./components/functions/PrepetratorsByGender.js");
/* harmony import */ var _components_functions_perpetratorMapFull__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/functions/perpetratorMapFull */ "./components/functions/perpetratorMapFull.js");
/* harmony import */ var _functions_ageDistribution__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./functions/ageDistribution */ "./components/functions/ageDistribution.js");
/* harmony import */ var _components_functions_gunArea__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/functions/gunArea */ "./components/functions/gunArea.js");
/* harmony import */ var _functions_numGunByTypes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./functions/numGunByTypes */ "./components/functions/numGunByTypes.js");
/* harmony import */ var _functions_gunMapFull__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./functions/gunMapFull */ "./components/functions/gunMapFull.js");
/* harmony import */ var _functions_wordCloud__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./functions/wordCloud */ "./components/functions/wordCloud.js");
/* harmony import */ var _functions_tweetmapWA__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./functions/tweetmapWA */ "./components/functions/tweetmapWA.js");
/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dynamic */ "./node_modules/next/dynamic.js");
/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! antd */ "./node_modules/antd/es/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! framer-motion */ "./node_modules/framer-motion/dist/es/index.js");
/* harmony import */ var _components_choices__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/choices */ "./components/choices.js");
/* harmony import */ var react_intersection_observer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! react-intersection-observer */ "./node_modules/react-intersection-observer/react-intersection-observer.m.js");
/* harmony import */ var _components_vegaEmbeded__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../components/vegaEmbeded */ "./components/vegaEmbeded.js");
/* module decorator */ module = __webpack_require__.hmd(module);





var _jsxFileName = "/home/yeraf/proj/us-gun-violence/components/Vis.js",
    _this = undefined,
    _s = $RefreshSig$(),
    _s2 = $RefreshSig$();

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
















var Option = antd__WEBPACK_IMPORTED_MODULE_15__.Select.Option;
var Search = antd__WEBPACK_IMPORTED_MODULE_15__.Input.Search;
var variants = {
  visible: {
    opacity: 1,
    scale: 1
  },
  hidden: {
    opacity: 0
  }
};

var _ref =  false ? 0 : {
  name: "7vr7tw-Section",
  styles: "display:flex;flex-direction:column;justify-content:center;align-items:center;width:75%;label:Section;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Section = function Section(props) {
  _s();

  var _useInView = (0,react_intersection_observer__WEBPACK_IMPORTED_MODULE_16__.useInView)({
    /* Optional options */
    threshold: 0.4,
    triggerOnce: false
  }),
      _useInView2 = (0,_home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__.default)(_useInView, 3),
      ref = _useInView2[0],
      inView = _useInView2[1],
      entry = _useInView2[2];

  return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_18__.motion.section, {
    css: _ref,
    "data-tw": "flex flex-col justify-center items-center w-9/12",
    animate: inView ? "visible" : "hidden",
    variants: variants,
    ref: ref,
    transition: {
      duration: 0.2,
      ease: "easeIn"
    },
    children: props.children
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 34,
    columnNumber: 5
  }, _this);
};

_s(Section, "xcNnOkK/eOBEx/AJ1BTvf70kBfM=", false, function () {
  return [react_intersection_observer__WEBPACK_IMPORTED_MODULE_16__.useInView];
});

_c = Section;
var yearMark = Array.from(Array(2018 - 2013 + 1).keys()).map(function (k) {
  return 2013 + k;
}).reduce(function (acc, v) {
  return _objectSpread(_objectSpread({}, acc), {}, (0,_home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({}, v, {
    style: {
      color: "#f9fafb"
    },
    label: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("strong", {
      children: v
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 55,
      columnNumber: 16
    }, _this)
  }));
}, {});
var VegaComp = next_dynamic__WEBPACK_IMPORTED_MODULE_11___default()(_c2 = function _c2() {
  return __webpack_require__.e(/*! import() */ "components_VegaComp_js").then(__webpack_require__.bind(__webpack_require__, /*! ./VegaComp */ "./components/VegaComp.js"));
}, {
  ssr: false,
  loadableGenerated: {
    webpack: function webpack() {
      return [/*require.resolve*/(/*! ./VegaComp */ "./components/VegaComp.js")];
    },
    modules: ["../components/Vis.js -> " + "./VegaComp"]
  }
});
_c3 = VegaComp;

var Box = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("div",  false ? 0 : {
  target: "e1coz5px4",
  label: "Box"
})( false ? 0 : {
  name: "15hc2t1",
  styles: "display:flex;flex-direction:column;padding:1rem;justify-content:space-around;align-items:center;margin-top:1.5rem;margin-bottom:1.5rem",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var H1 = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("h1",  false ? 0 : {
  target: "e1coz5px3",
  label: "H1"
})( false ? 0 : {
  name: "16vgk09",
  styles: "font-weight:600;font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;font-size:1.5rem;line-height:2rem;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity))",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Desc = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("p",  false ? 0 : {
  target: "e1coz5px2",
  label: "Desc"
})( false ? 0 : {
  name: "wutlv0",
  styles: "display:flex;font-size:1rem;line-height:1.5rem;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));width:100%;padding:1.5rem;text-align:justify",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Cap = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("p",  false ? 0 : {
  target: "e1coz5px1",
  label: "Cap"
})( false ? 0 : {
  name: "1sq8vmt",
  styles: "display:flex;font-size:0.875rem;line-height:1.25rem;font-style:italic;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));width:100%;padding:1.5rem;text-align:justify",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Row = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("div",  false ? 0 : {
  target: "e1coz5px0",
  label: "Row"
})( false ? 0 : {
  name: "1jzwnv4",
  styles: "display:flex;flex-direction:row;align-items:center;justify-content:space-around;width:100%",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var _ref2 =  false ? 0 : {
  name: "12q6cz7-Vis",
  styles: "display:flex;flex-direction:column;justify-content:center;align-items:center;row-gap:2rem;--tw-bg-opacity:1;background-color:rgba(31, 41, 55, var(--tw-bg-opacity));width:100vw;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref3 =  false ? 0 : {
  name: "1fr2ya8-Vis",
  styles: "display:flex;justify-content:center;align-items:center;font-size:1.125rem;line-height:1.75rem;flex-direction:column;--tw-text-opacity:1;color:rgba(255, 255, 255, var(--tw-text-opacity));height:16rem;width:100vw;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 =  false ? 0 : {
  name: "mxhahk-Vis",
  styles: "font-size:4.5rem;line-height:1;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 =  false ? 0 : {
  name: "bdyuxw-Vis",
  styles: "font-size:1rem;line-height:1.5rem;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref6 =  false ? 0 : {
  name: "ezamw-Vis",
  styles: "padding-top:3rem;padding-bottom:3rem;padding-left:5rem;padding-right:5rem;--tw-bg-opacity:1;background-color:rgba(55, 65, 81, var(--tw-bg-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref7 =  false ? 0 : {
  name: "krw03v-Vis",
  styles: "font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;font-size:1.5rem;line-height:2rem;font-weight:700;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref8 =  false ? 0 : {
  name: "1r3rv40-Vis",
  styles: "font-size:1.125rem;line-height:1.75rem;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref9 =  false ? 0 : {
  name: "7t94bd-Vis",
  styles: "width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref10 =  false ? 0 : {
  name: "1efx88n-Vis",
  styles: "display:flex;column-gap:0.5rem;justify-content:space-around;align-items:center;width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref11 =  false ? 0 : {
  name: "7t94bd-Vis",
  styles: "width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref12 =  false ? 0 : {
  name: "1efx88n-Vis",
  styles: "display:flex;column-gap:0.5rem;justify-content:space-around;align-items:center;width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Vis = function Vis() {
  _s2();

  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)(2018),
      ageYear = _useState[0],
      setAgeYear = _useState[1];

  var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)(2018),
      mapYearP = _useState2[0],
      setMapYearP = _useState2[1];

  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)(2018),
      mapYearG = _useState3[0],
      setMapYearG = _useState3[1];

  var _useState4 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("WA"),
      mapStateP = _useState4[0],
      setMapStateP = _useState4[1];

  var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("WA"),
      mapStateG = _useState5[0],
      setMapStateG = _useState5[1];

  var _useState6 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("gun"),
      wordwordCloud = _useState6[0],
      setWordWordCloud = _useState6[1];

  var _useState7 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)(true),
      wcLoading = _useState7[0],
      setWCLoading = _useState7[1];

  var _useState8 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("underages_ratio"),
      feat = _useState8[0],
      setFeat = _useState8[1];

  var _useState9 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("Handgun"),
      gun = _useState9[0],
      setGun = _useState9[1];

  var guns = _components_choices__WEBPACK_IMPORTED_MODULE_13__.default.guns,
      features = _components_choices__WEBPACK_IMPORTED_MODULE_13__.default.features;

  var _useState10 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)([{
    text: "loading",
    value: 100,
    weight: 200
  }]),
      dataWord = _useState10[0],
      setData = _useState10[1];

  (0,react__WEBPACK_IMPORTED_MODULE_12__.useEffect)(function () {
    setWCLoading(true);
    fetch("https://advise-pressing-dolls-suit.trycloudflare.com/api/getWordCloud", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        keyword: wordwordCloud
      })
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      setWCLoading(false);
      console.log("response: ", response);
      setData(response);
    })["catch"](function (err) {
      console.error(err);
    });
  }, [wordwordCloud]);
  return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("main", {
    css: _ref2,
    "data-tw": "flex flex-col justify-center items-center gap-y-8 bg-gray-800 w-screen",
    children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("section", {
      children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("p", {
        css: _ref3,
        "data-tw": "flex justify-center items-center text-lg flex-col text-white h-64 w-screen",
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("span", {
          css: _ref4,
          "data-tw": "text-7xl",
          children: "US Gun Violence"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 115,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("span", {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 116,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("span", {
          css: _ref5,
          "data-tw": "text-base",
          children: "Interactive data visualizations about gun violence in US"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 117,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 114,
        columnNumber: 9
      }, _this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 113,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("section", {
      css: _ref6,
      "data-tw": "py-12 px-20 bg-gray-700",
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("h1", {
        css: _ref7,
        "data-tw": "font-mono text-2xl font-bold text-gray-50",
        children: "Introduction"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 123,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("p", {
        css: _ref8,
        "data-tw": "text-lg text-gray-50",
        children: "There are a very few countries in the word where citizens have the right to bear arms. US is one of them where their citizens own guns nearly half of all civilian guns in the world. As a result, gun incidents are alarming in US. This project aims to study the trends of gun violence in US and explore any potential concerns regarding civilian-owned guns in US. The dataset used in this project contains records of gun incidents in US from January 2013 to March 2018 provided by Gun Violence Archive. We aim to explore the patterns lie in the demographics of gun perpetrators including age and gender. Moreover, we also want to use a geospatial map to address gun control problems by states. Finally, we will also explore which gun types are most used and most associated with hihger lethality."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 124,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 122,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Male and Female perpetrators over time"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 141,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "To understand the characteristics and patterns of gun perpetrators across the years, we first plotted a stacked area plot of the number and proportion of perpetrators of the two genders from 2014 to 2018."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 143,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 142,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
          func: _components_functions_PrepetratorsByGender__WEBPACK_IMPORTED_MODULE_3__.default,
          name: "perpetratorsByGender"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 150,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 149,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Drag over the area chart to select a smaller time frame."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 152,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Overall, the total number of gun violence incidents did not change very much in 5 years. The number of perpetrators from April 2014 to October 2014 was relatively higher. From the percentage graph, we can see that male perpetrators are accounted for a much greater portion compared to female perpetrators at about 10 times higher."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 154,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 153,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 140,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Age distribution of perpetrators"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 165,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
            func: _functions_ageDistribution__WEBPACK_IMPORTED_MODULE_5__.default,
            options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
              return {
                yearStart: 2014,
                yearEnd: 2018,
                color: "teal"
              };
            }, [ageYear]),
            name: "ageDistribution"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 168,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 167,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 166,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click on a boxplot to display the distribution accordingly."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 182,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Besides the genders, the next important feature of perpetrators to observe is age. The boxplots show how the ages of perpetrators were distributed in each year. The distribution of ages stayed mostly the same throughout the years as mean and median ages of perpetrators did not vary much. The higher mean than the median indicates that the distribution skews left towards younger ages. The number of perpetrators is highest between the ages of 20 - 25. The distribution of each looked pretty much the same except for 2018, because the data is only available for the early months."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 184,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 183,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 164,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Underage ratio and mean age of perpetrators across US"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 199,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Young perpetrators, especially underage ones, are a big concern considering guns falling into young people\u2019s hands. Here, we want to see the number of underage perpetrators in different states and see which states in particular have gun control problems to address. As a result, we plotted a geospatial map showing the number of underage perpetrators in each US state."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 201,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 200,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
        css: _ref9,
        "data-tw": "w-full",
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("div", {
          css: _ref10,
          "data-tw": "flex gap-x-2 justify-around items-center w-full",
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_15__.Select, {
            showSearch: true,
            style: {
              width: 200,
              fill: "#6b7280"
            },
            placeholder: "select feature",
            optionFilterProp: "children",
            onChange: function onChange(v) {
              return setFeat(v);
            },
            filterOption: function filterOption(input, option) {
              return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;
            },
            children: features.map(function (feat) {
              return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Option, {
                value: feat,
                children: feat.replaceAll("_", " ").replaceAll("pctg", "percentage")
              }, feat, false, {
                fileName: _jsxFileName,
                lineNumber: 223,
                columnNumber: 17
              }, _this);
            })
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 212,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 211,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
          func: _components_functions_perpetratorMapFull__WEBPACK_IMPORTED_MODULE_4__.default,
          name: "perpetratorMapFull",
          options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
            return {
              field: feat,
              yearStart: mapYearP,
              yearEnd: mapYearP
            };
          }, [feat, mapYearP])
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 229,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 210,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click to highlight a state."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 242,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "From the map, a pattern is recognizable: the south-eastern states tend to have higher percentages of underage perpetrators. South eastern states also had higher numbers of perpetrators per population."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 244,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 243,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "In the next section, we will explore the gun types used in gun violence incidents, to analyze their distributions and lethality."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 252,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 251,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 198,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Number of guns used over time"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 260,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
            func: _components_functions_gunArea__WEBPACK_IMPORTED_MODULE_6__.default,
            name: "gunArea"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 263,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 262,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 261,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click on the legend to highlight specific gun types to compare or drag over the area chart to explore a smaller time frame."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 266,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Our next part includes finding insights from different gun types used in gun incidents. By plotting a number and percentage of each gun type over time, we could see which types of guns are most commonly used by the perpetrators. The stacked area plot on the left had a huge gap in November 2014, it was caused by missing data. From two graphs, we could see that handguns are used most often among all gun types and the percentage of handguns increased rapidly in 2015. Other frequently used gun types included 9mm, rifle and shotgun."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 271,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 270,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 259,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Percentage of guns used and lethality"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 284,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
          func: _functions_numGunByTypes__WEBPACK_IMPORTED_MODULE_7__.default,
          name: "numGunByTypes",
          options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
            return {
              yearStart: 2014,
              yearEnd: 2018
            };
          })
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 286,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 285,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click a bar to highlight a specific gun type."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 295,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
        children: "This visualization has an all-year summary of how frequent each type of gun was used. The trend is similar to what we saw in the previous visualization. However, the lethality of each type of gun (specified by the ratio of total kill count over the total number of victims) varies differently. We can see how handguns as the most common ones are not that lethal compared to long rifles while shotguns tend to be the least lethal."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 296,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 283,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Percentage of each gun type across US"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 307,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
        css: _ref11,
        "data-tw": "w-full",
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("div", {
          css: _ref12,
          "data-tw": "flex gap-x-2 justify-around items-center w-full",
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_15__.Select, {
            showSearch: true,
            style: {
              width: 200
            },
            placeholder: "Select guns",
            optionFilterProp: "children",
            onChange: function onChange(v) {
              return setGun(v);
            },
            filterOption: function filterOption(input, option) {
              return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;
            },
            children: guns.map(function (gun) {
              return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Option, {
                value: gun,
                children: gun
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 321,
                columnNumber: 17
              }, _this);
            })
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 310,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 309,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
          func: _functions_gunMapFull__WEBPACK_IMPORTED_MODULE_8__.default,
          name: "gunMapFull",
          options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
            return {
              gun: gun,
              yearStart: mapYearG,
              yearEnd: mapYearG
            };
          }, [gun, mapYearG])
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 325,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 308,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click to highlight a state."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 338,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Next, we plotted a geospatial map of the US showing how frequent each type of gun is used in each state to see any patterns. Generally, west states had higher rates of guns used. Following the lethality plot in the previous visualization, we can point out states that have more highly lethal gun types. For example, could see Alaska having the most frequent use of a 12 gauge gun which is gun with almost 0.5 lethality. Using the given information we could infer high risk states to a specific gun type and predict future gun violence incidents. By knowing the gun types distributed geographically in the US we could know which gun types are \u201Cfavored\u201D by perpetrators in different states or geographical areas and predict their lethalities."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 340,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 339,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 306,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Word Cloud"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 357,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Search, {
        placeholder: wordwordCloud,
        loading: wcLoading,
        onSearch: function onSearch(value) {
          setWordWordCloud(value);
        }
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 358,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(_components_vegaEmbeded__WEBPACK_IMPORTED_MODULE_14__.default, {
        func: _functions_wordCloud__WEBPACK_IMPORTED_MODULE_9__.default,
        name: "wordCloud",
        options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
          return {
            dataWord: dataWord
          };
        }, [dataWord])
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 365,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
        children: ["Here is the word cloud of 1000 most recent tweet from Twitter related to keyword: ", wordwordCloud, " The size is encode by number of occurence. The color is encode by the sentiment value calculate from VANDER NLP model."]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 375,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 356,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
        func: _functions_tweetmapWA__WEBPACK_IMPORTED_MODULE_10__.default,
        name: "tweetmapWA"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 383,
        columnNumber: 9
      }, _this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 382,
      columnNumber: 7
    }, _this)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 112,
    columnNumber: 5
  }, _this);
};

_s2(Vis, "QnK0cGQ+12HBg7HJdhSZZUSrbck=");

_c4 = Vis;
/* harmony default export */ __webpack_exports__["default"] = (Vis);

var _c, _c2, _c3, _c4;

$RefreshReg$(_c, "Section");
$RefreshReg$(_c2, "VegaComp$dynamic");
$RefreshReg$(_c3, "VegaComp");
$RefreshReg$(_c4, "Vis");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,