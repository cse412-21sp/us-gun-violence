self["webpackHotUpdate_N_E"]("components_Vis_js-node_modules_moment_locale_sync_recursive_",{

/***/ "./components/functions/tweetmapWA.js":
/*!********************************************!*\
  !*** ./components/functions/tweetmapWA.js ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function perpetratorMap(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var usa = dataSet.usa,
      pst = dataSet.pst;
  var titles = {
    mean_age: "Perpetrators mean age",
    underages_ratio: ["Percentage of underage/total", "perpetrators"],
    male_pctg: ["Percentage of ", "male perpetrators"],
    female_pctg: ["Percentage of ", "female perpetrators"]
  };
  var schemes = {
    mean_age: "goldred",
    underages_ratio: "yellowgreenblue",
    male_pctg: "tealblues",
    female_pctg: "redpurple"
  };
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.data(pst).layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markGeoshape({
    fill: "#374151",
    stroke: "#fff",
    strokeWidth: 1
  }).data(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.topojson(usa).feature("counties"))).project(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.projection("albersUsa"));
}

function perpetratorMapFull(_ref2) {
  var dataSet = _ref2.dataSet,
      options = _ref2.options;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(perpetratorMap({
    dataSet: dataSet,
    options: options
  }).height(500).width(720)).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 16,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      domainColor: "white"
    },
    legend: {
      titleFontSize: 14,
      labelFontSize: 12,
      labelColor: "white",
      titleColor: "white",
      symbolFillColor: "#6b7280",
      symbolStrokeColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (perpetratorMapFull);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9mdW5jdGlvbnMvdHdlZXRtYXBXQS5qcyJdLCJuYW1lcyI6WyJwZXJwZXRyYXRvck1hcCIsImRhdGFTZXQiLCJvcHRpb25zIiwidXNhIiwicHN0IiwidGl0bGVzIiwibWVhbl9hZ2UiLCJ1bmRlcmFnZXNfcmF0aW8iLCJtYWxlX3BjdGciLCJmZW1hbGVfcGN0ZyIsInNjaGVtZXMiLCJ2bCIsImxheWVyIiwiZmlsbCIsInN0cm9rZSIsInN0cm9rZVdpZHRoIiwiZGF0YSIsImZlYXR1cmUiLCJwcm9qZWN0IiwicGVycGV0cmF0b3JNYXBGdWxsIiwiaGVpZ2h0Iiwid2lkdGgiLCJjb25maWciLCJtYXJrIiwib3BhY2l0eSIsImJhY2tncm91bmQiLCJheGlzIiwidGl0bGVGb250U2l6ZSIsInRpY2tDb2xvciIsImxhYmVsQ29sb3IiLCJ0aXRsZUNvbG9yIiwiZ3JpZENvbG9yIiwiZG9tYWluQ29sb3IiLCJsZWdlbmQiLCJsYWJlbEZvbnRTaXplIiwic3ltYm9sRmlsbENvbG9yIiwic3ltYm9sU3Ryb2tlQ29sb3IiLCJzY2FsZSIsIm1heFNpemUiLCJ2aWV3IiwidmVnYU9wdGlvbnMiLCJpbml0IiwidG9vbHRpcCIsInZlZ2FUb29sdGlwIiwiY2FsbCIsInJlbmRlcmVyIiwidmVnYSIsInZlZ2FMaXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxjQUFULE9BQThDO0FBQUEsTUFBcEJDLE9BQW9CLFFBQXBCQSxPQUFvQjtBQUFBLE1BQVhDLE9BQVcsUUFBWEEsT0FBVztBQUFBLE1BQ3BDQyxHQURvQyxHQUN2QkYsT0FEdUIsQ0FDcENFLEdBRG9DO0FBQUEsTUFDL0JDLEdBRCtCLEdBQ3ZCSCxPQUR1QixDQUMvQkcsR0FEK0I7QUFFNUMsTUFBTUMsTUFBTSxHQUFHO0FBQ2JDLFlBQVEsRUFBRSx1QkFERztBQUViQyxtQkFBZSxFQUFFLENBQUMsOEJBQUQsRUFBaUMsY0FBakMsQ0FGSjtBQUdiQyxhQUFTLEVBQUUsQ0FBQyxnQkFBRCxFQUFtQixtQkFBbkIsQ0FIRTtBQUliQyxlQUFXLEVBQUUsQ0FBQyxnQkFBRCxFQUFtQixxQkFBbkI7QUFKQSxHQUFmO0FBT0EsTUFBTUMsT0FBTyxHQUFHO0FBQ2RKLFlBQVEsRUFBRSxTQURJO0FBRWRDLG1CQUFlLEVBQUUsaUJBRkg7QUFHZEMsYUFBUyxFQUFFLFdBSEc7QUFJZEMsZUFBVyxFQUFFO0FBSkMsR0FBaEI7QUFPQSxTQUFPRSwrQ0FBQSxDQUNDUCxHQURELEVBRUpRLEtBRkksQ0FHSEQsdURBQUEsQ0FDZ0I7QUFBRUUsUUFBSSxFQUFFLFNBQVI7QUFBbUJDLFVBQU0sRUFBRSxNQUEzQjtBQUFtQ0MsZUFBVyxFQUFFO0FBQWhELEdBRGhCLEVBRUdDLElBRkgsQ0FFUUwsbURBQUEsQ0FBWVIsR0FBWixFQUFpQmMsT0FBakIsQ0FBeUIsVUFBekIsQ0FGUixDQUhHLEVBT0pDLE9BUEksQ0FPSVAscURBQUEsQ0FBYyxXQUFkLENBUEosQ0FBUDtBQVFEOztBQUVELFNBQVNRLGtCQUFULFFBQWtEO0FBQUEsTUFBcEJsQixPQUFvQixTQUFwQkEsT0FBb0I7QUFBQSxNQUFYQyxPQUFXLFNBQVhBLE9BQVc7QUFDaEQsU0FBT1Msa0RBQUEsQ0FDSVgsY0FBYyxDQUFDO0FBQUVDLFdBQU8sRUFBUEEsT0FBRjtBQUFXQyxXQUFPLEVBQVBBO0FBQVgsR0FBRCxDQUFkLENBQXFDa0IsTUFBckMsQ0FBNEMsR0FBNUMsRUFBaURDLEtBQWpELENBQXVELEdBQXZELENBREosRUFFSkMsTUFGSSxDQUVHO0FBQ05DLFFBQUksRUFBRTtBQUFFQyxhQUFPLEVBQUU7QUFBWCxLQURBO0FBRU5DLGNBQVUsRUFBRSxTQUZOO0FBR05DLFFBQUksRUFBRTtBQUNKQyxtQkFBYSxFQUFFLEVBRFg7QUFFSkMsZUFBUyxFQUFFLE9BRlA7QUFHSkMsZ0JBQVUsRUFBRSxPQUhSO0FBSUpDLGdCQUFVLEVBQUUsT0FKUjtBQUtKQyxlQUFTLEVBQUUsT0FMUDtBQU1KQyxpQkFBVyxFQUFFO0FBTlQsS0FIQTtBQVdOQyxVQUFNLEVBQUU7QUFDTk4sbUJBQWEsRUFBRSxFQURUO0FBRU5PLG1CQUFhLEVBQUUsRUFGVDtBQUdOTCxnQkFBVSxFQUFFLE9BSE47QUFJTkMsZ0JBQVUsRUFBRSxPQUpOO0FBS05LLHFCQUFlLEVBQUUsU0FMWDtBQU1OQyx1QkFBaUIsRUFBRTtBQU5iLEtBWEY7QUFtQk5DLFNBQUssRUFBRTtBQUFFQyxhQUFPLEVBQUU7QUFBWCxLQW5CRDtBQW9CTkMsUUFBSSxFQUFFO0FBQUV6QixZQUFNLEVBQUU7QUFBVjtBQXBCQSxHQUZILENBQVA7QUF3QkQ7O0FBRUQsSUFBTTBCLFdBQVcsR0FBRztBQUNsQmxCLFFBQU0sRUFBRSxDQUNOO0FBRE0sR0FEVTtBQUlsQm1CLE1BQUksRUFBRSxjQUFDRixJQUFELEVBQVU7QUFDZDtBQUNBQSxRQUFJLENBQUNHLE9BQUwsQ0FBYSxJQUFJQyxpREFBSixHQUEwQkMsSUFBdkM7QUFDRCxHQVBpQjtBQVFsQkwsTUFBSSxFQUFFO0FBQ0pNLFlBQVEsRUFBRTtBQUROO0FBUlksQ0FBcEI7QUFZQWxDLG1EQUFBLENBQVltQyxpQ0FBWixFQUFrQkMsc0NBQWxCLEVBQTRCUCxXQUE1QjtBQUVBLCtEQUFlckIsa0JBQWYiLCJmaWxlIjoic3RhdGljL3dlYnBhY2svY29tcG9uZW50c19WaXNfanMtbm9kZV9tb2R1bGVzX21vbWVudF9sb2NhbGVfc3luY19yZWN1cnNpdmVfLjM3ZGNkMzE2YmFjMDRkOGQ3MmNiLmhvdC11cGRhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB2ZWdhIGZyb20gXCJ2ZWdhXCI7XG5pbXBvcnQgKiBhcyB2bCBmcm9tIFwidmVnYS1saXRlLWFwaVwiO1xuaW1wb3J0ICogYXMgdmVnYUxpdGUgZnJvbSBcInZlZ2EtbGl0ZVwiO1xuaW1wb3J0ICogYXMgdmVnYVRvb2x0aXAgZnJvbSBcInZlZ2EtdG9vbHRpcFwiO1xuXG5mdW5jdGlvbiBwZXJwZXRyYXRvck1hcCh7IGRhdGFTZXQsIG9wdGlvbnMgfSkge1xuICBjb25zdCB7IHVzYSwgcHN0IH0gPSBkYXRhU2V0O1xuICBjb25zdCB0aXRsZXMgPSB7XG4gICAgbWVhbl9hZ2U6IFwiUGVycGV0cmF0b3JzIG1lYW4gYWdlXCIsXG4gICAgdW5kZXJhZ2VzX3JhdGlvOiBbXCJQZXJjZW50YWdlIG9mIHVuZGVyYWdlL3RvdGFsXCIsIFwicGVycGV0cmF0b3JzXCJdLFxuICAgIG1hbGVfcGN0ZzogW1wiUGVyY2VudGFnZSBvZiBcIiwgXCJtYWxlIHBlcnBldHJhdG9yc1wiXSxcbiAgICBmZW1hbGVfcGN0ZzogW1wiUGVyY2VudGFnZSBvZiBcIiwgXCJmZW1hbGUgcGVycGV0cmF0b3JzXCJdLFxuICB9O1xuXG4gIGNvbnN0IHNjaGVtZXMgPSB7XG4gICAgbWVhbl9hZ2U6IFwiZ29sZHJlZFwiLFxuICAgIHVuZGVyYWdlc19yYXRpbzogXCJ5ZWxsb3dncmVlbmJsdWVcIixcbiAgICBtYWxlX3BjdGc6IFwidGVhbGJsdWVzXCIsXG4gICAgZmVtYWxlX3BjdGc6IFwicmVkcHVycGxlXCIsXG4gIH07XG5cbiAgcmV0dXJuIHZsXG4gICAgLmRhdGEocHN0KVxuICAgIC5sYXllcihcbiAgICAgIHZsXG4gICAgICAgIC5tYXJrR2Vvc2hhcGUoeyBmaWxsOiBcIiMzNzQxNTFcIiwgc3Ryb2tlOiBcIiNmZmZcIiwgc3Ryb2tlV2lkdGg6IDEgfSlcbiAgICAgICAgLmRhdGEodmwudG9wb2pzb24odXNhKS5mZWF0dXJlKFwiY291bnRpZXNcIikpXG4gICAgKVxuICAgIC5wcm9qZWN0KHZsLnByb2plY3Rpb24oXCJhbGJlcnNVc2FcIikpO1xufVxuXG5mdW5jdGlvbiBwZXJwZXRyYXRvck1hcEZ1bGwoeyBkYXRhU2V0LCBvcHRpb25zIH0pIHtcbiAgcmV0dXJuIHZsXG4gICAgLmhjb25jYXQocGVycGV0cmF0b3JNYXAoeyBkYXRhU2V0LCBvcHRpb25zIH0pLmhlaWdodCg1MDApLndpZHRoKDcyMCkpXG4gICAgLmNvbmZpZyh7XG4gICAgICBtYXJrOiB7IG9wYWNpdHk6IDAuOSB9LFxuICAgICAgYmFja2dyb3VuZDogXCIjMWYyOTM3XCIsXG4gICAgICBheGlzOiB7XG4gICAgICAgIHRpdGxlRm9udFNpemU6IDE2LFxuICAgICAgICB0aWNrQ29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgbGFiZWxDb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICB0aXRsZUNvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgIGdyaWRDb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICBkb21haW5Db2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICB0aXRsZUZvbnRTaXplOiAxNCxcbiAgICAgICAgbGFiZWxGb250U2l6ZTogMTIsXG4gICAgICAgIGxhYmVsQ29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgdGl0bGVDb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICBzeW1ib2xGaWxsQ29sb3I6IFwiIzZiNzI4MFwiLFxuICAgICAgICBzeW1ib2xTdHJva2VDb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgfSxcbiAgICAgIHNjYWxlOiB7IG1heFNpemU6IDE1MDAgfSxcbiAgICAgIHZpZXc6IHsgc3Ryb2tlOiBudWxsIH0sXG4gICAgfSk7XG59XG5cbmNvbnN0IHZlZ2FPcHRpb25zID0ge1xuICBjb25maWc6IHtcbiAgICAvLyBWZWdhLUxpdGUgZGVmYXVsdCBjb25maWd1cmF0aW9uXG4gIH0sXG4gIGluaXQ6ICh2aWV3KSA9PiB7XG4gICAgLy8gaW5pdGlhbGl6ZSB0b29sdGlwIGhhbmRsZXJcbiAgICB2aWV3LnRvb2x0aXAobmV3IHZlZ2FUb29sdGlwLkhhbmRsZXIoKS5jYWxsKTtcbiAgfSxcbiAgdmlldzoge1xuICAgIHJlbmRlcmVyOiBcImNhbnZhc1wiLFxuICB9LFxufTtcbnZsLnJlZ2lzdGVyKHZlZ2EsIHZlZ2FMaXRlLCB2ZWdhT3B0aW9ucyk7XG5cbmV4cG9ydCBkZWZhdWx0IHBlcnBldHJhdG9yTWFwRnVsbDtcbiJdLCJzb3VyY2VSb290IjoiIn0=