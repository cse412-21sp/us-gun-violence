self["webpackHotUpdate_N_E"]("components_Vis_js-node_modules_moment_locale_sync_recursive_",{

/***/ "./components/Vis.js":
/*!***************************!*\
  !*** ./components/Vis.js ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ "./node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js");
/* harmony import */ var _home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/styled/base */ "./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js");
/* harmony import */ var _components_functions_PrepetratorsByGender__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/functions/PrepetratorsByGender */ "./components/functions/PrepetratorsByGender.js");
/* harmony import */ var _components_functions_perpetratorMapFull__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/functions/perpetratorMapFull */ "./components/functions/perpetratorMapFull.js");
/* harmony import */ var _functions_ageDistribution__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./functions/ageDistribution */ "./components/functions/ageDistribution.js");
/* harmony import */ var _components_functions_gunArea__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/functions/gunArea */ "./components/functions/gunArea.js");
/* harmony import */ var _functions_numGunByTypes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./functions/numGunByTypes */ "./components/functions/numGunByTypes.js");
/* harmony import */ var _functions_gunMapFull__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./functions/gunMapFull */ "./components/functions/gunMapFull.js");
/* harmony import */ var _functions_wordCloud__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./functions/wordCloud */ "./components/functions/wordCloud.js");
/* harmony import */ var _functions_tweetmapWA__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./functions/tweetmapWA */ "./components/functions/tweetmapWA.js");
/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dynamic */ "./node_modules/next/dynamic.js");
/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! antd */ "./node_modules/antd/es/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! framer-motion */ "./node_modules/framer-motion/dist/es/index.js");
/* harmony import */ var _components_choices__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/choices */ "./components/choices.js");
/* harmony import */ var react_intersection_observer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! react-intersection-observer */ "./node_modules/react-intersection-observer/react-intersection-observer.m.js");
/* harmony import */ var _components_vegaEmbeded__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../components/vegaEmbeded */ "./components/vegaEmbeded.js");
/* module decorator */ module = __webpack_require__.hmd(module);





var _jsxFileName = "/home/yeraf/proj/us-gun-violence/components/Vis.js",
    _this = undefined,
    _s = $RefreshSig$(),
    _s2 = $RefreshSig$();

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
















var Option = antd__WEBPACK_IMPORTED_MODULE_15__.Select.Option;
var Search = antd__WEBPACK_IMPORTED_MODULE_15__.Input.Search;
var variants = {
  visible: {
    opacity: 1,
    scale: 1
  },
  hidden: {
    opacity: 0
  }
};

var _ref =  false ? 0 : {
  name: "7vr7tw-Section",
  styles: "display:flex;flex-direction:column;justify-content:center;align-items:center;width:75%;label:Section;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Section = function Section(props) {
  _s();

  var _useInView = (0,react_intersection_observer__WEBPACK_IMPORTED_MODULE_16__.useInView)({
    /* Optional options */
    threshold: 0.4,
    triggerOnce: false
  }),
      _useInView2 = (0,_home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__.default)(_useInView, 3),
      ref = _useInView2[0],
      inView = _useInView2[1],
      entry = _useInView2[2];

  return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_18__.motion.section, {
    css: _ref,
    "data-tw": "flex flex-col justify-center items-center w-9/12",
    animate: inView ? "visible" : "hidden",
    variants: variants,
    ref: ref,
    transition: {
      duration: 0.2,
      ease: "easeIn"
    },
    children: props.children
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 34,
    columnNumber: 5
  }, _this);
};

_s(Section, "xcNnOkK/eOBEx/AJ1BTvf70kBfM=", false, function () {
  return [react_intersection_observer__WEBPACK_IMPORTED_MODULE_16__.useInView];
});

_c = Section;
var yearMark = Array.from(Array(2018 - 2013 + 1).keys()).map(function (k) {
  return 2013 + k;
}).reduce(function (acc, v) {
  return _objectSpread(_objectSpread({}, acc), {}, (0,_home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({}, v, {
    style: {
      color: "#f9fafb"
    },
    label: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("strong", {
      children: v
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 55,
      columnNumber: 16
    }, _this)
  }));
}, {});
var VegaComp = next_dynamic__WEBPACK_IMPORTED_MODULE_11___default()(_c2 = function _c2() {
  return __webpack_require__.e(/*! import() */ "components_VegaComp_js").then(__webpack_require__.bind(__webpack_require__, /*! ./VegaComp */ "./components/VegaComp.js"));
}, {
  ssr: false,
  loadableGenerated: {
    webpack: function webpack() {
      return [/*require.resolve*/(/*! ./VegaComp */ "./components/VegaComp.js")];
    },
    modules: ["../components/Vis.js -> " + "./VegaComp"]
  }
});
_c3 = VegaComp;

var Box = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("div",  false ? 0 : {
  target: "e1coz5px4",
  label: "Box"
})( false ? 0 : {
  name: "15hc2t1",
  styles: "display:flex;flex-direction:column;padding:1rem;justify-content:space-around;align-items:center;margin-top:1.5rem;margin-bottom:1.5rem",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var H1 = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("h1",  false ? 0 : {
  target: "e1coz5px3",
  label: "H1"
})( false ? 0 : {
  name: "16vgk09",
  styles: "font-weight:600;font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;font-size:1.5rem;line-height:2rem;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity))",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Desc = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("p",  false ? 0 : {
  target: "e1coz5px2",
  label: "Desc"
})( false ? 0 : {
  name: "xrmfwl",
  styles: "font-size:1rem;line-height:1.5rem;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));width:100%;padding:1.5rem;text-align:justify",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Cap = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("p",  false ? 0 : {
  target: "e1coz5px1",
  label: "Cap"
})( false ? 0 : {
  name: "1sq8vmt",
  styles: "display:flex;font-size:0.875rem;line-height:1.25rem;font-style:italic;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));width:100%;padding:1.5rem;text-align:justify",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3llcmFmL3Byb2ovdXMtZ3VuLXZpb2xlbmNlL2NvbXBvbmVudHMvVmlzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNFWSIsImZpbGUiOiIvaG9tZS95ZXJhZi9wcm9qL3VzLWd1bi12aW9sZW5jZS9jb21wb25lbnRzL1Zpcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwZXJwZXRyYXRvcnNCeUdlbmRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9mdW5jdGlvbnMvUHJlcGV0cmF0b3JzQnlHZW5kZXJcIjtcbmltcG9ydCBwZXJwZXRyYXRvck1hcEZ1bGwgZnJvbSBcIi4uL2NvbXBvbmVudHMvZnVuY3Rpb25zL3BlcnBldHJhdG9yTWFwRnVsbFwiO1xuaW1wb3J0IGFnZURpc3RyaWJ1dGlvbiBmcm9tIFwiLi9mdW5jdGlvbnMvYWdlRGlzdHJpYnV0aW9uXCI7XG5pbXBvcnQgZ3VuQXJlYSBmcm9tIFwiLi4vY29tcG9uZW50cy9mdW5jdGlvbnMvZ3VuQXJlYVwiO1xuaW1wb3J0IG51bUd1bkJ5VHlwZXMgZnJvbSBcIi4vZnVuY3Rpb25zL251bUd1bkJ5VHlwZXNcIjtcbmltcG9ydCBndW5NYXBGdWxsIGZyb20gXCIuL2Z1bmN0aW9ucy9ndW5NYXBGdWxsXCI7XG5pbXBvcnQgd29yZENsb3VkIGZyb20gXCIuL2Z1bmN0aW9ucy93b3JkQ2xvdWRcIjtcbmltcG9ydCB0d2VldG1hcFdBIGZyb20gXCIuL2Z1bmN0aW9ucy90d2VldG1hcFdBXCI7XG5pbXBvcnQgdHcgZnJvbSBcInR3aW4ubWFjcm9cIjtcbmltcG9ydCBkeW5hbWljIGZyb20gXCJuZXh0L2R5bmFtaWNcIjtcbmltcG9ydCB7IElucHV0LCBTZWxlY3QgfSBmcm9tIFwiYW50ZFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZU1lbW8sIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcbmltcG9ydCBjaG9pY2VzIGZyb20gXCIuLi9jb21wb25lbnRzL2Nob2ljZXNcIjtcbmltcG9ydCB7IHVzZUluVmlldyB9IGZyb20gXCJyZWFjdC1pbnRlcnNlY3Rpb24tb2JzZXJ2ZXJcIjtcbmltcG9ydCBWZWdhRW1iZWRlZCBmcm9tIFwiLi4vY29tcG9uZW50cy92ZWdhRW1iZWRlZFwiO1xuY29uc3QgeyBPcHRpb24gfSA9IFNlbGVjdDtcbmNvbnN0IHsgU2VhcmNoIH0gPSBJbnB1dDtcblxuY29uc3QgdmFyaWFudHMgPSB7XG4gIHZpc2libGU6IHsgb3BhY2l0eTogMSwgc2NhbGU6IDEgfSxcbiAgaGlkZGVuOiB7XG4gICAgb3BhY2l0eTogMCxcbiAgfSxcbn07XG5cbmNvbnN0IFNlY3Rpb24gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgW3JlZiwgaW5WaWV3LCBlbnRyeV0gPSB1c2VJblZpZXcoe1xuICAgIC8qIE9wdGlvbmFsIG9wdGlvbnMgKi9cbiAgICB0aHJlc2hvbGQ6IDAuNCxcbiAgICB0cmlnZ2VyT25jZTogZmFsc2UsXG4gIH0pO1xuICByZXR1cm4gKFxuICAgIDxtb3Rpb24uc2VjdGlvblxuICAgICAgdHc9XCJmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciB3LTkvMTJcIlxuICAgICAgYW5pbWF0ZT17aW5WaWV3ID8gXCJ2aXNpYmxlXCIgOiBcImhpZGRlblwifVxuICAgICAgdmFyaWFudHM9e3ZhcmlhbnRzfVxuICAgICAgcmVmPXtyZWZ9XG4gICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjIsIGVhc2U6IFwiZWFzZUluXCIgfX1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9tb3Rpb24uc2VjdGlvbj5cbiAgKTtcbn07XG5cbmNvbnN0IHllYXJNYXJrID0gQXJyYXkuZnJvbShBcnJheSgyMDE4IC0gMjAxMyArIDEpLmtleXMoKSlcbiAgLm1hcCgoaykgPT4gMjAxMyArIGspXG4gIC5yZWR1Y2UoXG4gICAgKGFjYywgdikgPT4gKHtcbiAgICAgIC4uLmFjYyxcbiAgICAgIFt2XToge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGNvbG9yOiBcIiNmOWZhZmJcIixcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWw6IDxzdHJvbmc+e3Z9PC9zdHJvbmc+LFxuICAgICAgfSxcbiAgICB9KSxcbiAgICB7fVxuICApO1xuXG5jb25zdCBWZWdhQ29tcCA9IGR5bmFtaWMoKCkgPT4gaW1wb3J0KFwiLi9WZWdhQ29tcFwiKSwge1xuICBzc3I6IGZhbHNlLFxufSk7XG5cbmNvbnN0IEJveCA9IHR3LmRpdmBmbGV4IGZsZXgtY29sIHAtNCBqdXN0aWZ5LWFyb3VuZCBpdGVtcy1jZW50ZXIgbXktNmA7XG5cbmNvbnN0IEgxID0gdHcuaDFgZm9udC1zZW1pYm9sZCBmb250LW1vbm8gdGV4dC0yeGwgdGV4dC1ncmF5LTUwYDtcblxuY29uc3QgRGVzYyA9IHR3LnBgdGV4dC1iYXNlIHRleHQtZ3JheS01MCB3LWZ1bGwgcC02IHRleHQtanVzdGlmeWA7XG5cbmNvbnN0IENhcCA9IHR3LnBgZmxleCB0ZXh0LXNtIGl0YWxpYyB0ZXh0LWdyYXktNTAgdy1mdWxsIHAtNiB0ZXh0LWp1c3RpZnlgO1xuXG5jb25zdCBSb3cgPSB0dy5kaXZgZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXIganVzdGlmeS1hcm91bmQgdy1mdWxsYDtcblxuY29uc3QgVmlzID0gKCkgPT4ge1xuICBjb25zdCBbYWdlWWVhciwgc2V0QWdlWWVhcl0gPSB1c2VTdGF0ZSgyMDE4KTtcbiAgY29uc3QgW21hcFllYXJQLCBzZXRNYXBZZWFyUF0gPSB1c2VTdGF0ZSgyMDE4KTtcbiAgY29uc3QgW21hcFllYXJHLCBzZXRNYXBZZWFyR10gPSB1c2VTdGF0ZSgyMDE4KTtcbiAgY29uc3QgW21hcFN0YXRlUCwgc2V0TWFwU3RhdGVQXSA9IHVzZVN0YXRlKFwiV0FcIik7XG4gIGNvbnN0IFttYXBTdGF0ZUcsIHNldE1hcFN0YXRlR10gPSB1c2VTdGF0ZShcIldBXCIpO1xuICBjb25zdCBbd29yZHdvcmRDbG91ZCwgc2V0V29yZFdvcmRDbG91ZF0gPSB1c2VTdGF0ZShcImd1blwiKTtcbiAgY29uc3QgW3djTG9hZGluZywgc2V0V0NMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbZmVhdCwgc2V0RmVhdF0gPSB1c2VTdGF0ZShcInVuZGVyYWdlc19yYXRpb1wiKTtcbiAgY29uc3QgW2d1biwgc2V0R3VuXSA9IHVzZVN0YXRlKFwiSGFuZGd1blwiKTtcbiAgY29uc3QgeyBndW5zLCBmZWF0dXJlcyB9ID0gY2hvaWNlcztcbiAgY29uc3QgW2RhdGFXb3JkLCBzZXREYXRhXSA9IHVzZVN0YXRlKFtcbiAgICB7IHRleHQ6IFwibG9hZGluZ1wiLCB2YWx1ZTogMTAwLCB3ZWlnaHQ6IDIwMCB9LFxuICBdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRXQ0xvYWRpbmcodHJ1ZSk7XG4gICAgZmV0Y2goXG4gICAgICBcImh0dHBzOi8vYWR2aXNlLXByZXNzaW5nLWRvbGxzLXN1aXQudHJ5Y2xvdWRmbGFyZS5jb20vYXBpL2dldFdvcmRDbG91ZFwiLFxuICAgICAge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsga2V5d29yZDogd29yZHdvcmRDbG91ZCB9KSxcbiAgICAgIH1cbiAgICApXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBzZXRXQ0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICBjb25zb2xlLmxvZyhcInJlc3BvbnNlOiBcIiwgcmVzcG9uc2UpO1xuICAgICAgICBzZXREYXRhKHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9KTtcbiAgfSwgW3dvcmR3b3JkQ2xvdWRdKTtcbiAgcmV0dXJuIChcbiAgICA8bWFpbiB0dz1cImZsZXggZmxleC1jb2wganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIGdhcC15LTggYmctZ3JheS04MDAgdy1zY3JlZW5cIj5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8cCB0dz1cImZsZXgganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIHRleHQtbGcgZmxleC1jb2wgdGV4dC13aGl0ZSBoLTY0ICB3LXNjcmVlblwiPlxuICAgICAgICAgIDxzcGFuIHR3PVwidGV4dC03eGxcIj5VUyBHdW4gVmlvbGVuY2U8L3NwYW4+XG4gICAgICAgICAgPHNwYW4+PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIHR3PVwidGV4dC1iYXNlXCI+XG4gICAgICAgICAgICBJbnRlcmFjdGl2ZSBkYXRhIHZpc3VhbGl6YXRpb25zIGFib3V0IGd1biB2aW9sZW5jZSBpbiBVU1xuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9wPlxuICAgICAgPC9zZWN0aW9uPlxuICAgICAgPHNlY3Rpb24gdHc9XCJweS0xMiBweC0yMCBiZy1ncmF5LTcwMFwiPlxuICAgICAgICA8aDEgdHc9XCJmb250LW1vbm8gdGV4dC0yeGwgZm9udC1ib2xkIHRleHQtZ3JheS01MFwiPkludHJvZHVjdGlvbjwvaDE+XG4gICAgICAgIDxwIHR3PVwidGV4dC1sZyB0ZXh0LWdyYXktNTBcIj5cbiAgICAgICAgICBUaGVyZSBhcmUgYSB2ZXJ5IGZldyBjb3VudHJpZXMgaW4gdGhlIHdvcmQgd2hlcmUgY2l0aXplbnMgaGF2ZSB0aGVcbiAgICAgICAgICByaWdodCB0byBiZWFyIGFybXMuIFVTIGlzIG9uZSBvZiB0aGVtIHdoZXJlIHRoZWlyIGNpdGl6ZW5zIG93biBndW5zXG4gICAgICAgICAgbmVhcmx5IGhhbGYgb2YgYWxsIGNpdmlsaWFuIGd1bnMgaW4gdGhlIHdvcmxkLiBBcyBhIHJlc3VsdCwgZ3VuXG4gICAgICAgICAgaW5jaWRlbnRzIGFyZSBhbGFybWluZyBpbiBVUy4gVGhpcyBwcm9qZWN0IGFpbXMgdG8gc3R1ZHkgdGhlIHRyZW5kcyBvZlxuICAgICAgICAgIGd1biB2aW9sZW5jZSBpbiBVUyBhbmQgZXhwbG9yZSBhbnkgcG90ZW50aWFsIGNvbmNlcm5zIHJlZ2FyZGluZ1xuICAgICAgICAgIGNpdmlsaWFuLW93bmVkIGd1bnMgaW4gVVMuIFRoZSBkYXRhc2V0IHVzZWQgaW4gdGhpcyBwcm9qZWN0IGNvbnRhaW5zXG4gICAgICAgICAgcmVjb3JkcyBvZiBndW4gaW5jaWRlbnRzIGluIFVTIGZyb20gSmFudWFyeSAyMDEzIHRvIE1hcmNoIDIwMThcbiAgICAgICAgICBwcm92aWRlZCBieSBHdW4gVmlvbGVuY2UgQXJjaGl2ZS4gV2UgYWltIHRvIGV4cGxvcmUgdGhlIHBhdHRlcm5zIGxpZVxuICAgICAgICAgIGluIHRoZSBkZW1vZ3JhcGhpY3Mgb2YgZ3VuIHBlcnBldHJhdG9ycyBpbmNsdWRpbmcgYWdlIGFuZCBnZW5kZXIuXG4gICAgICAgICAgTW9yZW92ZXIsIHdlIGFsc28gd2FudCB0byB1c2UgYSBnZW9zcGF0aWFsIG1hcCB0byBhZGRyZXNzIGd1biBjb250cm9sXG4gICAgICAgICAgcHJvYmxlbXMgYnkgc3RhdGVzLiBGaW5hbGx5LCB3ZSB3aWxsIGFsc28gZXhwbG9yZSB3aGljaCBndW4gdHlwZXMgYXJlXG4gICAgICAgICAgbW9zdCB1c2VkIGFuZCBtb3N0IGFzc29jaWF0ZWQgd2l0aCBoaWhnZXIgbGV0aGFsaXR5LlxuICAgICAgICA8L3A+XG4gICAgICA8L3NlY3Rpb24+XG5cbiAgICAgIDxTZWN0aW9uPlxuICAgICAgICA8SDE+TWFsZSBhbmQgRmVtYWxlIHBlcnBldHJhdG9ycyBvdmVyIHRpbWU8L0gxPlxuICAgICAgICA8Um93PlxuICAgICAgICAgIDxEZXNjPlxuICAgICAgICAgICAgVG8gdW5kZXJzdGFuZCB0aGUgY2hhcmFjdGVyaXN0aWNzIGFuZCBwYXR0ZXJucyBvZiBndW4gcGVycGV0cmF0b3JzXG4gICAgICAgICAgICBhY3Jvc3MgdGhlIHllYXJzLCB3ZSBmaXJzdCBwbG90dGVkIGEgc3RhY2tlZCBhcmVhIHBsb3Qgb2YgdGhlIG51bWJlclxuICAgICAgICAgICAgYW5kIHByb3BvcnRpb24gb2YgcGVycGV0cmF0b3JzIG9mIHRoZSB0d28gZ2VuZGVycyBmcm9tIDIwMTQgdG8gMjAxOC5cbiAgICAgICAgICA8L0Rlc2M+XG4gICAgICAgIDwvUm93PlxuICAgICAgICA8Um93PlxuICAgICAgICAgIDxWZWdhQ29tcCBmdW5jPXtwZXJwZXRyYXRvcnNCeUdlbmRlcn0gbmFtZT1cInBlcnBldHJhdG9yc0J5R2VuZGVyXCIgLz5cbiAgICAgICAgPC9Sb3c+XG4gICAgICAgIDxDYXA+RHJhZyBvdmVyIHRoZSBhcmVhIGNoYXJ0IHRvIHNlbGVjdCBhIHNtYWxsZXIgdGltZSBmcmFtZS48L0NhcD5cbiAgICAgICAgPFJvdz5cbiAgICAgICAgICA8RGVzYz5cbiAgICAgICAgICAgIE92ZXJhbGwsIHRoZSB0b3RhbCBudW1iZXIgb2YgZ3VuIHZpb2xlbmNlIGluY2lkZW50cyBkaWQgbm90IGNoYW5nZVxuICAgICAgICAgICAgdmVyeSBtdWNoIGluIDUgeWVhcnMuIFRoZSBudW1iZXIgb2YgcGVycGV0cmF0b3JzIGZyb20gQXByaWwgMjAxNCB0b1xuICAgICAgICAgICAgT2N0b2JlciAyMDE0IHdhcyByZWxhdGl2ZWx5IGhpZ2hlci4gRnJvbSB0aGUgcGVyY2VudGFnZSBncmFwaCwgd2VcbiAgICAgICAgICAgIGNhbiBzZWUgdGhhdCBtYWxlIHBlcnBldHJhdG9ycyBhcmUgYWNjb3VudGVkIGZvciBhIG11Y2ggZ3JlYXRlclxuICAgICAgICAgICAgcG9ydGlvbiBjb21wYXJlZCB0byBmZW1hbGUgcGVycGV0cmF0b3JzIGF0IGFib3V0IDEwIHRpbWVzIGhpZ2hlci5cbiAgICAgICAgICA8L0Rlc2M+XG4gICAgICAgIDwvUm93PlxuICAgICAgPC9TZWN0aW9uPlxuXG4gICAgICA8U2VjdGlvbj5cbiAgICAgICAgPEgxPkFnZSBkaXN0cmlidXRpb24gb2YgcGVycGV0cmF0b3JzPC9IMT5cbiAgICAgICAgPFJvdz5cbiAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgPFZlZ2FDb21wXG4gICAgICAgICAgICAgIGZ1bmM9e2FnZURpc3RyaWJ1dGlvbn1cbiAgICAgICAgICAgICAgb3B0aW9ucz17dXNlTWVtbyhcbiAgICAgICAgICAgICAgICAoKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgeWVhclN0YXJ0OiAyMDE0LFxuICAgICAgICAgICAgICAgICAgeWVhckVuZDogMjAxOCxcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiBcInRlYWxcIixcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBbYWdlWWVhcl1cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgbmFtZT1cImFnZURpc3RyaWJ1dGlvblwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L1Jvdz5cbiAgICAgICAgPENhcD5DbGljayBvbiBhIGJveHBsb3QgdG8gZGlzcGxheSB0aGUgZGlzdHJpYnV0aW9uIGFjY29yZGluZ2x5LjwvQ2FwPlxuICAgICAgICA8Um93PlxuICAgICAgICAgIDxEZXNjPlxuICAgICAgICAgICAgQmVzaWRlcyB0aGUgZ2VuZGVycywgdGhlIG5leHQgaW1wb3J0YW50IGZlYXR1cmUgb2YgcGVycGV0cmF0b3JzIHRvXG4gICAgICAgICAgICBvYnNlcnZlIGlzIGFnZS4gVGhlIGJveHBsb3RzIHNob3cgaG93IHRoZSBhZ2VzIG9mIHBlcnBldHJhdG9ycyB3ZXJlXG4gICAgICAgICAgICBkaXN0cmlidXRlZCBpbiBlYWNoIHllYXIuIFRoZSBkaXN0cmlidXRpb24gb2YgYWdlcyBzdGF5ZWQgbW9zdGx5IHRoZVxuICAgICAgICAgICAgc2FtZSB0aHJvdWdob3V0IHRoZSB5ZWFycyBhcyBtZWFuIGFuZCBtZWRpYW4gYWdlcyBvZiBwZXJwZXRyYXRvcnNcbiAgICAgICAgICAgIGRpZCBub3QgdmFyeSBtdWNoLiBUaGUgaGlnaGVyIG1lYW4gdGhhbiB0aGUgbWVkaWFuIGluZGljYXRlcyB0aGF0XG4gICAgICAgICAgICB0aGUgZGlzdHJpYnV0aW9uIHNrZXdzIGxlZnQgdG93YXJkcyB5b3VuZ2VyIGFnZXMuIFRoZSBudW1iZXIgb2ZcbiAgICAgICAgICAgIHBlcnBldHJhdG9ycyBpcyBoaWdoZXN0IGJldHdlZW4gdGhlIGFnZXMgb2YgMjAgLSAyNS4gVGhlXG4gICAgICAgICAgICBkaXN0cmlidXRpb24gb2YgZWFjaCBsb29rZWQgcHJldHR5IG11Y2ggdGhlIHNhbWUgZXhjZXB0IGZvciAyMDE4LFxuICAgICAgICAgICAgYmVjYXVzZSB0aGUgZGF0YSBpcyBvbmx5IGF2YWlsYWJsZSBmb3IgdGhlIGVhcmx5IG1vbnRocy5cbiAgICAgICAgICA8L0Rlc2M+XG4gICAgICAgIDwvUm93PlxuICAgICAgPC9TZWN0aW9uPlxuXG4gICAgICA8U2VjdGlvbj5cbiAgICAgICAgPEgxPlVuZGVyYWdlIHJhdGlvIGFuZCBtZWFuIGFnZSBvZiBwZXJwZXRyYXRvcnMgYWNyb3NzIFVTPC9IMT5cbiAgICAgICAgPFJvdz5cbiAgICAgICAgICA8RGVzYz5cbiAgICAgICAgICAgIFlvdW5nIHBlcnBldHJhdG9ycywgZXNwZWNpYWxseSB1bmRlcmFnZSBvbmVzLCBhcmUgYSBiaWcgY29uY2VyblxuICAgICAgICAgICAgY29uc2lkZXJpbmcgZ3VucyBmYWxsaW5nIGludG8geW91bmcgcGVvcGxl4oCZcyBoYW5kcy4gSGVyZSwgd2Ugd2FudCB0b1xuICAgICAgICAgICAgc2VlIHRoZSBudW1iZXIgb2YgdW5kZXJhZ2UgcGVycGV0cmF0b3JzIGluIGRpZmZlcmVudCBzdGF0ZXMgYW5kIHNlZVxuICAgICAgICAgICAgd2hpY2ggc3RhdGVzIGluIHBhcnRpY3VsYXIgaGF2ZSBndW4gY29udHJvbCBwcm9ibGVtcyB0byBhZGRyZXNzLiBBc1xuICAgICAgICAgICAgYSByZXN1bHQsIHdlIHBsb3R0ZWQgYSBnZW9zcGF0aWFsIG1hcCBzaG93aW5nIHRoZSBudW1iZXIgb2YgdW5kZXJhZ2VcbiAgICAgICAgICAgIHBlcnBldHJhdG9ycyBpbiBlYWNoIFVTIHN0YXRlLlxuICAgICAgICAgIDwvRGVzYz5cbiAgICAgICAgPC9Sb3c+XG4gICAgICAgIDxCb3ggdHc9XCJ3LWZ1bGxcIj5cbiAgICAgICAgICA8ZGl2IHR3PVwiZmxleCBnYXAteC0yIGp1c3RpZnktYXJvdW5kIGl0ZW1zLWNlbnRlciB3LWZ1bGxcIj5cbiAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgc2hvd1NlYXJjaFxuICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogMjAwLCBmaWxsOiBcIiM2YjcyODBcIiB9fVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInNlbGVjdCBmZWF0dXJlXCJcbiAgICAgICAgICAgICAgb3B0aW9uRmlsdGVyUHJvcD1cImNoaWxkcmVuXCJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2KSA9PiBzZXRGZWF0KHYpfVxuICAgICAgICAgICAgICBmaWx0ZXJPcHRpb249eyhpbnB1dCwgb3B0aW9uKSA9PlxuICAgICAgICAgICAgICAgIG9wdGlvbi5jaGlsZHJlbi50b0xvd2VyQ2FzZSgpLmluZGV4T2YoaW5wdXQudG9Mb3dlckNhc2UoKSkgPj0gMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtmZWF0dXJlcy5tYXAoKGZlYXQpID0+IChcbiAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPXtmZWF0fSBrZXk9e2ZlYXR9PlxuICAgICAgICAgICAgICAgICAge2ZlYXQucmVwbGFjZUFsbChcIl9cIiwgYCBgKS5yZXBsYWNlQWxsKFwicGN0Z1wiLCBcInBlcmNlbnRhZ2VcIil9XG4gICAgICAgICAgICAgICAgPC9PcHRpb24+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPFZlZ2FDb21wXG4gICAgICAgICAgICBmdW5jPXtwZXJwZXRyYXRvck1hcEZ1bGx9XG4gICAgICAgICAgICBuYW1lPVwicGVycGV0cmF0b3JNYXBGdWxsXCJcbiAgICAgICAgICAgIG9wdGlvbnM9e3VzZU1lbW8oXG4gICAgICAgICAgICAgICgpID0+ICh7XG4gICAgICAgICAgICAgICAgZmllbGQ6IGZlYXQsXG4gICAgICAgICAgICAgICAgeWVhclN0YXJ0OiBtYXBZZWFyUCxcbiAgICAgICAgICAgICAgICB5ZWFyRW5kOiBtYXBZZWFyUCxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIFtmZWF0LCBtYXBZZWFyUF1cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgICAgIDxDYXA+Q2xpY2sgdG8gaGlnaGxpZ2h0IGEgc3RhdGUuPC9DYXA+XG4gICAgICAgIDxSb3c+XG4gICAgICAgICAgPERlc2M+XG4gICAgICAgICAgICBGcm9tIHRoZSBtYXAsIGEgcGF0dGVybiBpcyByZWNvZ25pemFibGU6IHRoZSBzb3V0aC1lYXN0ZXJuIHN0YXRlc1xuICAgICAgICAgICAgdGVuZCB0byBoYXZlIGhpZ2hlciBwZXJjZW50YWdlcyBvZiB1bmRlcmFnZSBwZXJwZXRyYXRvcnMuIFNvdXRoXG4gICAgICAgICAgICBlYXN0ZXJuIHN0YXRlcyBhbHNvIGhhZCBoaWdoZXIgbnVtYmVycyBvZiBwZXJwZXRyYXRvcnMgcGVyXG4gICAgICAgICAgICBwb3B1bGF0aW9uLlxuICAgICAgICAgIDwvRGVzYz5cbiAgICAgICAgPC9Sb3c+XG4gICAgICAgIDxSb3c+XG4gICAgICAgICAgPERlc2M+XG4gICAgICAgICAgICBJbiB0aGUgbmV4dCBzZWN0aW9uLCB3ZSB3aWxsIGV4cGxvcmUgdGhlIGd1biB0eXBlcyB1c2VkIGluIGd1blxuICAgICAgICAgICAgdmlvbGVuY2UgaW5jaWRlbnRzLCB0byBhbmFseXplIHRoZWlyIGRpc3RyaWJ1dGlvbnMgYW5kIGxldGhhbGl0eS5cbiAgICAgICAgICA8L0Rlc2M+XG4gICAgICAgIDwvUm93PlxuICAgICAgPC9TZWN0aW9uPlxuXG4gICAgICA8U2VjdGlvbj5cbiAgICAgICAgPEgxPk51bWJlciBvZiBndW5zIHVzZWQgb3ZlciB0aW1lPC9IMT5cbiAgICAgICAgPFJvdz5cbiAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgPFZlZ2FDb21wIGZ1bmM9e2d1bkFyZWF9IG5hbWU9XCJndW5BcmVhXCIgLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgPC9Sb3c+XG4gICAgICAgIDxDYXA+XG4gICAgICAgICAgQ2xpY2sgb24gdGhlIGxlZ2VuZCB0byBoaWdobGlnaHQgc3BlY2lmaWMgZ3VuIHR5cGVzIHRvIGNvbXBhcmUgb3IgZHJhZ1xuICAgICAgICAgIG92ZXIgdGhlIGFyZWEgY2hhcnQgdG8gZXhwbG9yZSBhIHNtYWxsZXIgdGltZSBmcmFtZS5cbiAgICAgICAgPC9DYXA+XG4gICAgICAgIDxSb3c+XG4gICAgICAgICAgPERlc2M+XG4gICAgICAgICAgICBPdXIgbmV4dCBwYXJ0IGluY2x1ZGVzIGZpbmRpbmcgaW5zaWdodHMgZnJvbSBkaWZmZXJlbnQgZ3VuIHR5cGVzXG4gICAgICAgICAgICB1c2VkIGluIGd1biBpbmNpZGVudHMuIEJ5IHBsb3R0aW5nIGEgbnVtYmVyIGFuZCBwZXJjZW50YWdlIG9mIGVhY2hcbiAgICAgICAgICAgIGd1biB0eXBlIG92ZXIgdGltZSwgd2UgY291bGQgc2VlIHdoaWNoIHR5cGVzIG9mIGd1bnMgYXJlIG1vc3RcbiAgICAgICAgICAgIGNvbW1vbmx5IHVzZWQgYnkgdGhlIHBlcnBldHJhdG9ycy4gVGhlIHN0YWNrZWQgYXJlYSBwbG90IG9uIHRoZSBsZWZ0XG4gICAgICAgICAgICBoYWQgYSBodWdlIGdhcCBpbiBOb3ZlbWJlciAyMDE0LCBpdCB3YXMgY2F1c2VkIGJ5IG1pc3NpbmcgZGF0YS4gRnJvbVxuICAgICAgICAgICAgdHdvIGdyYXBocywgd2UgY291bGQgc2VlIHRoYXQgaGFuZGd1bnMgYXJlIHVzZWQgbW9zdCBvZnRlbiBhbW9uZyBhbGxcbiAgICAgICAgICAgIGd1biB0eXBlcyBhbmQgdGhlIHBlcmNlbnRhZ2Ugb2YgaGFuZGd1bnMgaW5jcmVhc2VkIHJhcGlkbHkgaW4gMjAxNS5cbiAgICAgICAgICAgIE90aGVyIGZyZXF1ZW50bHkgdXNlZCBndW4gdHlwZXMgaW5jbHVkZWQgOW1tLCByaWZsZSBhbmQgc2hvdGd1bi5cbiAgICAgICAgICA8L0Rlc2M+XG4gICAgICAgIDwvUm93PlxuICAgICAgPC9TZWN0aW9uPlxuICAgICAgPFNlY3Rpb24+XG4gICAgICAgIDxIMT5QZXJjZW50YWdlIG9mIGd1bnMgdXNlZCBhbmQgbGV0aGFsaXR5PC9IMT5cbiAgICAgICAgPEJveD5cbiAgICAgICAgICA8VmVnYUNvbXBcbiAgICAgICAgICAgIGZ1bmM9e251bUd1bkJ5VHlwZXN9XG4gICAgICAgICAgICBuYW1lPVwibnVtR3VuQnlUeXBlc1wiXG4gICAgICAgICAgICBvcHRpb25zPXt1c2VNZW1vKCgpID0+ICh7XG4gICAgICAgICAgICAgIHllYXJTdGFydDogMjAxNCxcbiAgICAgICAgICAgICAgeWVhckVuZDogMjAxOCxcbiAgICAgICAgICAgIH0pKX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0JveD5cbiAgICAgICAgPENhcD5DbGljayBhIGJhciB0byBoaWdobGlnaHQgYSBzcGVjaWZpYyBndW4gdHlwZS48L0NhcD5cbiAgICAgICAgPERlc2M+XG4gICAgICAgICAgVGhpcyB2aXN1YWxpemF0aW9uIGhhcyBhbiBhbGwteWVhciBzdW1tYXJ5IG9mIGhvdyBmcmVxdWVudCBlYWNoIHR5cGVcbiAgICAgICAgICBvZiBndW4gd2FzIHVzZWQuIFRoZSB0cmVuZCBpcyBzaW1pbGFyIHRvIHdoYXQgd2Ugc2F3IGluIHRoZSBwcmV2aW91c1xuICAgICAgICAgIHZpc3VhbGl6YXRpb24uIEhvd2V2ZXIsIHRoZSBsZXRoYWxpdHkgb2YgZWFjaCB0eXBlIG9mIGd1biAoc3BlY2lmaWVkXG4gICAgICAgICAgYnkgdGhlIHJhdGlvIG9mIHRvdGFsIGtpbGwgY291bnQgb3ZlciB0aGUgdG90YWwgbnVtYmVyIG9mIHZpY3RpbXMpXG4gICAgICAgICAgdmFyaWVzIGRpZmZlcmVudGx5LiBXZSBjYW4gc2VlIGhvdyBoYW5kZ3VucyBhcyB0aGUgbW9zdCBjb21tb24gb25lc1xuICAgICAgICAgIGFyZSBub3QgdGhhdCBsZXRoYWwgY29tcGFyZWQgdG8gbG9uZyByaWZsZXMgd2hpbGUgc2hvdGd1bnMgdGVuZCB0byBiZVxuICAgICAgICAgIHRoZSBsZWFzdCBsZXRoYWwuXG4gICAgICAgIDwvRGVzYz5cbiAgICAgIDwvU2VjdGlvbj5cbiAgICAgIDxTZWN0aW9uPlxuICAgICAgICA8SDE+UGVyY2VudGFnZSBvZiBlYWNoIGd1biB0eXBlIGFjcm9zcyBVUzwvSDE+XG4gICAgICAgIDxCb3ggdHc9XCJ3LWZ1bGxcIj5cbiAgICAgICAgICA8ZGl2IHR3PVwiZmxleCBnYXAteC0yIGp1c3RpZnktYXJvdW5kIGl0ZW1zLWNlbnRlciB3LWZ1bGxcIj5cbiAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgc2hvd1NlYXJjaFxuICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogMjAwIH19XG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiU2VsZWN0IGd1bnNcIlxuICAgICAgICAgICAgICBvcHRpb25GaWx0ZXJQcm9wPVwiY2hpbGRyZW5cIlxuICAgICAgICAgICAgICBvbkNoYW5nZT17KHYpID0+IHNldEd1bih2KX1cbiAgICAgICAgICAgICAgZmlsdGVyT3B0aW9uPXsoaW5wdXQsIG9wdGlvbikgPT5cbiAgICAgICAgICAgICAgICBvcHRpb24uY2hpbGRyZW4udG9Mb3dlckNhc2UoKS5pbmRleE9mKGlucHV0LnRvTG93ZXJDYXNlKCkpID49IDBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Z3Vucy5tYXAoKGd1bikgPT4gKFxuICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9e2d1bn0+e2d1bn08L09wdGlvbj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8VmVnYUNvbXBcbiAgICAgICAgICAgIGZ1bmM9e2d1bk1hcEZ1bGx9XG4gICAgICAgICAgICBuYW1lPVwiZ3VuTWFwRnVsbFwiXG4gICAgICAgICAgICBvcHRpb25zPXt1c2VNZW1vKFxuICAgICAgICAgICAgICAoKSA9PiAoe1xuICAgICAgICAgICAgICAgIGd1bjogZ3VuLFxuICAgICAgICAgICAgICAgIHllYXJTdGFydDogbWFwWWVhckcsXG4gICAgICAgICAgICAgICAgeWVhckVuZDogbWFwWWVhckcsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBbZ3VuLCBtYXBZZWFyR11cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgICAgIDxDYXA+Q2xpY2sgdG8gaGlnaGxpZ2h0IGEgc3RhdGUuPC9DYXA+XG4gICAgICAgIDxSb3c+XG4gICAgICAgICAgPERlc2M+XG4gICAgICAgICAgICBOZXh0LCB3ZSBwbG90dGVkIGEgZ2Vvc3BhdGlhbCBtYXAgb2YgdGhlIFVTIHNob3dpbmcgaG93IGZyZXF1ZW50XG4gICAgICAgICAgICBlYWNoIHR5cGUgb2YgZ3VuIGlzIHVzZWQgaW4gZWFjaCBzdGF0ZSB0byBzZWUgYW55IHBhdHRlcm5zLlxuICAgICAgICAgICAgR2VuZXJhbGx5LCB3ZXN0IHN0YXRlcyBoYWQgaGlnaGVyIHJhdGVzIG9mIGd1bnMgdXNlZC4gRm9sbG93aW5nIHRoZVxuICAgICAgICAgICAgbGV0aGFsaXR5IHBsb3QgaW4gdGhlIHByZXZpb3VzIHZpc3VhbGl6YXRpb24sIHdlIGNhbiBwb2ludCBvdXRcbiAgICAgICAgICAgIHN0YXRlcyB0aGF0IGhhdmUgbW9yZSBoaWdobHkgbGV0aGFsIGd1biB0eXBlcy4gRm9yIGV4YW1wbGUsIHdlIGNvdWxkXG4gICAgICAgICAgICBzZWUgQWxhc2thIGhhdmluZyB0aGUgbW9zdCBmcmVxdWVudCB1c2Ugb2YgYSAxMiBnYXVnZSBndW4gd2hpY2ggaXNcbiAgICAgICAgICAgIGd1biB3aXRoIGFsbW9zdCAwLjUgbGV0aGFsaXR5LiBVc2luZyB0aGUgZ2l2ZW4gaW5mb3JtYXRpb24gd2UgY291bGRcbiAgICAgICAgICAgIGluZmVyIGhpZ2ggcmlzayBzdGF0ZXMgdG8gYSBzcGVjaWZpYyBndW4gdHlwZSBhbmQgZnV0dXJlIHRyZW5kcyBvZlxuICAgICAgICAgICAgZ3VuIHVzYWdlIHNwZWNpZmljIHRvIGFyZWFzLlxuICAgICAgICAgIDwvRGVzYz5cbiAgICAgICAgPC9Sb3c+XG4gICAgICAgIDxSb3c+XG4gICAgICAgICAgPERlc2M+XG4gICAgICAgICAgICBJbiBjb25jbHVzaW9uLCB0aGVzZSB2aXN1YWxpemF0aW9ucyB3aWxsIGJlIHVzZWZ1bCBmb3IgYXV0aG9yaXRpZXNcbiAgICAgICAgICAgIG9mIGRpZmZlcmVudCBzdGF0ZXMgdG8gZmlndXJlIG91dCBndW4gY29udHJvbCBwcm9ibGVtcyB0aGF0IHNob3VsZFxuICAgICAgICAgICAgYmUgZnVydGhlciBpbnZlc3RpZ2F0ZWQuIFRoaXMgaW5jbHVkZXMgaGlnaGx5IGxldGhhbCBndW5zIGFuZFxuICAgICAgICAgICAgdW5kZXJhZ2UgcGVycGV0cmF0b3JzLiBGb3IgaW5zdGFuY2UsIGJ5IGtub3dpbmcgdGhlIGd1biB0eXBlc1xuICAgICAgICAgICAgZGlzdHJpYnV0ZWQgZ2VvZ3JhcGhpY2FsbHkgaW4gdGhlIFVTIHdlIGNvdWxkIGtub3cgd2hpY2ggZ3VuIHR5cGVzXG4gICAgICAgICAgICBhcmUgY29tbW9ubHkgdXNlZCBieSBwZXJwZXRyYXRvcnMgaW4gZGlmZmVyZW50IGFyZWFzIHNvIHRoZVxuICAgICAgICAgICAgYXV0aG9yaXRpZXMgY2FuIGludmVzdGlnYXRlIGFuZCBlbmZvcmNlIHByb3BlciBndW4gY29udHJvbHMgc3BlY2lmaWNcbiAgICAgICAgICAgIHRvIGEgZGlmZmVyZW50IGFyZWEuIFdlIGhvcGUgdGhlc2UgdmlzdWFsaXphdGlvbnMgd2lsbCBiZSB1c2VmdWwgZm9yXG4gICAgICAgICAgICB0aG9zZSB3aG8gd2FudCB0byBsZWFybiB0aGUgb3ZlcmFsbCBwaWN0dXJlIG9mIGd1biB2aW9sZW5jZSBpbiBVU1xuICAgICAgICAgICAgYW5kIHRob3NlIHdobyB3YW50IHRvIGRvIGZ1cnRoZXIgcmVzZWFyY2ggb24gZ3VuIHZpb2xlbmNlLlxuICAgICAgICAgIDwvRGVzYz5cbiAgICAgICAgPC9Sb3c+XG4gICAgICA8L1NlY3Rpb24+XG4gICAgICA8U2VjdGlvbj5cbiAgICAgICAgPEgxPlxuICAgICAgICAgIEV4dHJhOiBTZW50aW1lbnRhbGl0eSBBbmFseXNpcyBvZiBUd2VldHMgYWJvdXQgR3VuIFZpb2xlbmNlIGluIFVTLlxuICAgICAgICA8L0gxPlxuICAgICAgICA8RGVzYz5cbiAgICAgICAgICBJbiBhZGRpdGlvbiB0byBndW4gdmlvbGVuY2UgZGF0YSByZXRyaWV2ZWQgZnJvbSBHdW4gVmlvbGVuY2UgQXJjaGl2ZSxcbiAgICAgICAgICB3ZSBoYXZlIHB1bGxlZCBkYXRhIG9mIHR3ZWV0cyBhYm91dCBndW4gaW5jaWRlbnRzIGZyb20gVHdpdHRlciBBUEkgYXNcbiAgICAgICAgICBhbiBleHBlcmltZW50LiBOZXh0LCB3ZSBwZXJmb3JtZWQgc2VudGltZW50YWxpdHkgYW5hbHlzaXMgd2hpY2hcbiAgICAgICAgICBldmFsdWF0ZXMgbmVnYXRpdml0eSBhbmQgcG9zaXRpdml0eSBvZiBsYW5ndWFnZSB1c2VkIGluIGVhY2ggdHdlZXQuXG4gICAgICAgICAgRm9yIHRoZSBzZW50aW1lbnRhbGl0eSBhbmFseXNpcyB3ZSB1c2VkIHRoZSBsaWJyYXJ5e1wiIFwifVxuICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgPGEgdHc9XCJ1bmRlcmxpbmVcIiBocmVmPVwiaHR0cHM6Ly9ubHRrLm9yZ1wiPlxuICAgICAgICAgICAgICBOTFRLIChOYXR1cmFsIExhbmd1YWdlIFRvb2xraXQpXG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIHdpdGggdGhlIG1vZGVsXG4gICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICA8YSB0dz1cInVuZGVybGluZVwiIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vY2podXR0by92YWRlclNlbnRpbWVudFwiPlxuICAgICAgICAgICAgICBWYWRlclxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgIHR3PVwidW5kZXJsaW5lXCJcbiAgICAgICAgICAgICAgaHJlZj1cImh0dHA6Ly9jb21wLnNvY2lhbC5nYXRlY2guZWR1L3BhcGVycy9pY3dzbTE0LnZhZGVyLmh1dHRvLnBkZlwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIChMaW5rIHRvIHRoZSBwYXBlcilcbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgaW1wbGVtZW50ZWQuIFRoaXMgcGFydCBvZiB2aXN1YWxpemF0aW9ucyBpcyBvbmx5IGludGVuZGVkIHRvIGJlIGFuXG4gICAgICAgICAgZXhwZXJpbWVudC4gV2Ugd2FudCB0byBzZWUgcG9zc2liaWxpdHkgb2YgdmlzdWFsaXphdGlvbnMgd2UgY2FuIGNyZWF0ZVxuICAgICAgICAgIG91dCBvZiB0aGUgc2VudGltZW50YWxpdHkgYW5hbHlzaXMgd2UgaGF2ZSBwZXJmb3JtZWQuXG4gICAgICAgIDwvRGVzYz5cbiAgICAgICAgPERlc2M+XG4gICAgICAgICAgRm9yIHRoZSBmaXJzdCB2aXN1YWxpemF0aW9uLCB3ZSBjcmVhdGVkIGEgd29yZCBjbG91ZCB0aGF0IGR5bmFtaWNhbGx5XG4gICAgICAgICAgcHVsbHMgcmVhbC10aW1lIHR3ZWV0cyBkYXRhIGFjY29yZGluZyB0byB0aGUgd29yZCBpbnB1dC4gVGhlIHdvcmRzXG4gICAgICAgICAgZGlzcGxheWVkIGFyZSB0aGUgdG9wIHdvcmRzIGNvbnRhaW5lZCBpbiB0aGUgdHdlZXRzIHRoYXQgYXJlXG4gICAgICAgICAgYXNzb2NpYXRlZCB3aXRoIHRoZSBpbnB1dCB3b3JkLiBUaGUgYmx1ZSwgb3JhbmdlIGFuZCByZWQgY29sb3JzXG4gICAgICAgICAgaW5jaWNhdGUgYSBwb3NpdGl2ZSwgbmV1dHJhbCBhbmQgbmVnYXRpdmUgd29yZCByZXNwZWN0aXZlbHkgYWNjb3JkaW5nXG4gICAgICAgICAgdG8gdGhlIG1vZGVsLiBXZSBhbHNvIGZpbHRlciBvdXQgc3RvY2sgd29yZHMgKGFydGljbGVzLCBwcm9ub3VucyBldGMuKVxuICAgICAgICAgIHByaW9yIHRvIHRoaXMgdmlzdWFsaXphdGlvbi5cbiAgICAgICAgPC9EZXNjPlxuICAgICAgICA8U2VhcmNoXG4gICAgICAgICAgcGxhY2Vob2xkZXI9e3dvcmR3b3JkQ2xvdWR9XG4gICAgICAgICAgbG9hZGluZz17d2NMb2FkaW5nfVxuICAgICAgICAgIG9uU2VhcmNoPXsodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHNldFdvcmRXb3JkQ2xvdWQodmFsdWUpO1xuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIDxWZWdhRW1iZWRlZFxuICAgICAgICAgIGZ1bmM9e3dvcmRDbG91ZH1cbiAgICAgICAgICBuYW1lPVwid29yZENsb3VkXCJcbiAgICAgICAgICBvcHRpb25zPXt1c2VNZW1vKFxuICAgICAgICAgICAgKCkgPT4gKHtcbiAgICAgICAgICAgICAgZGF0YVdvcmQ6IGRhdGFXb3JkLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBbZGF0YVdvcmRdXG4gICAgICAgICAgKX1cbiAgICAgICAgLz5cbiAgICAgICAgPERlc2M+XG4gICAgICAgICAgSGVyZSBpcyB0aGUgd29yZCBjbG91ZCBvZiAxMDAwIG1vc3QgcmVjZW50IHR3ZWV0IGZyb20gVHdpdHRlciByZWxhdGVkXG4gICAgICAgICAgdG8ga2V5d29yZDogPHNwYW4+e3dvcmR3b3JkQ2xvdWR9PC9zcGFuPlxuICAgICAgICA8L0Rlc2M+XG4gICAgICA8L1NlY3Rpb24+XG4gICAgICA8U2VjdGlvbj5cbiAgICAgICAgPERlc2M+XG4gICAgICAgICAgV2l0aCB0aGUgcG9zaXRpb24gYW5kIHRpbWUgb2YgZWFjaCBndW4gaW5jaWRlbnQgZnJvbSB0aGUgcHJldmlvdXNcbiAgICAgICAgICBkYXRhc2V0IHdlIGhhdmUsIHdlIHdlcmUgYWJsZSB0byBzY29wZSBkb3duIGFuZCBzY3JhcGUgdHdlZXRzIGFyb3VuZFxuICAgICAgICAgIHRoZSBzYW1lIGxvY2F0aW9uIGFuZCB0aW1lIGFzIHRoZSBndW4gaW5jaWRlbnQuIEZvciB0aGlzXG4gICAgICAgICAgdmlzdWFsaXphdGlvbiwgd2Ugc2NvcGUgZG93biBvbmx5IHRvIHRoZSBzdGF0ZSBvZiBXYXNoaW5ndG9uLiBXZSBwbG90XG4gICAgICAgICAgdGhlIGxvY2F0aW9uIG9mIGVhY2ggZ3VuIGluY2lkZW50IG9uIHRoZSBtYXAgb2YgdGhlIFdhc2hpbmd0b24gc3RhdGUuXG4gICAgICAgICAgVGhlIGJsdWUsIG9yYW5nZSBhbmQgcmVkIGNvbG9ycyBpbmRpY2F0ZSBzZW50aW1lbnRhbGl0eSBvZiB0d2VldHNcbiAgICAgICAgICBhcm91bmQgdGhlIHNhbWUgdGltZSBhbmQgbG9jYXRpb24gb2YgZWFjaCBndW4gaW5jaWRlbnQuXG4gICAgICAgIDwvRGVzYz5cbiAgICAgICAgPFZlZ2FDb21wIGZ1bmM9e3R3ZWV0bWFwV0F9IG5hbWU9XCJ0d2VldG1hcFdBXCIgLz5cbiAgICAgIDwvU2VjdGlvbj5cbiAgICAgIDxzZWN0aW9uIHR3PVwicHktMTIgcHgtMjAgYmctZ3JheS03MDAgdy1mdWxsXCI+XG4gICAgICAgIDxoMSB0dz1cImZvbnQtbW9ubyB0ZXh0LTJ4bCBmb250LWJvbGQgdGV4dC1ncmF5LTUwXCI+RGF0YSBVc2VkPC9oMT5cbiAgICAgICAgPHVsIHR3PVwidGV4dC1sZyB0ZXh0LWdyYXktNTBcIj5cbiAgICAgICAgICA8bGk+XG4gICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9qYW1lc2xrby9ndW4tdmlvbGVuY2UtZGF0YVwiPlxuICAgICAgICAgICAgICBHdW4gVmlvbGVuY2UgRGF0YSBmcm9tIEthZ2dsZVxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC9tYWluPlxuICApO1xufTtcbmV4cG9ydCBkZWZhdWx0IFZpcztcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Row = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("div",  false ? 0 : {
  target: "e1coz5px0",
  label: "Row"
})( false ? 0 : {
  name: "1jzwnv4",
  styles: "display:flex;flex-direction:row;align-items:center;justify-content:space-around;width:100%",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var _ref2 =  false ? 0 : {
  name: "12q6cz7-Vis",
  styles: "display:flex;flex-direction:column;justify-content:center;align-items:center;row-gap:2rem;--tw-bg-opacity:1;background-color:rgba(31, 41, 55, var(--tw-bg-opacity));width:100vw;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref3 =  false ? 0 : {
  name: "1fr2ya8-Vis",
  styles: "display:flex;justify-content:center;align-items:center;font-size:1.125rem;line-height:1.75rem;flex-direction:column;--tw-text-opacity:1;color:rgba(255, 255, 255, var(--tw-text-opacity));height:16rem;width:100vw;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 =  false ? 0 : {
  name: "mxhahk-Vis",
  styles: "font-size:4.5rem;line-height:1;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 =  false ? 0 : {
  name: "bdyuxw-Vis",
  styles: "font-size:1rem;line-height:1.5rem;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref6 =  false ? 0 : {
  name: "ezamw-Vis",
  styles: "padding-top:3rem;padding-bottom:3rem;padding-left:5rem;padding-right:5rem;--tw-bg-opacity:1;background-color:rgba(55, 65, 81, var(--tw-bg-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref7 =  false ? 0 : {
  name: "krw03v-Vis",
  styles: "font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;font-size:1.5rem;line-height:2rem;font-weight:700;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref8 =  false ? 0 : {
  name: "1r3rv40-Vis",
  styles: "font-size:1.125rem;line-height:1.75rem;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref9 =  false ? 0 : {
  name: "7t94bd-Vis",
  styles: "width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref10 =  false ? 0 : {
  name: "1efx88n-Vis",
  styles: "display:flex;column-gap:0.5rem;justify-content:space-around;align-items:center;width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref11 =  false ? 0 : {
  name: "7t94bd-Vis",
  styles: "width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref12 =  false ? 0 : {
  name: "1efx88n-Vis",
  styles: "display:flex;column-gap:0.5rem;justify-content:space-around;align-items:center;width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref13 =  false ? 0 : {
  name: "hq48ay-Vis",
  styles: "text-decoration:underline;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref14 =  false ? 0 : {
  name: "hq48ay-Vis",
  styles: "text-decoration:underline;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref15 =  false ? 0 : {
  name: "hq48ay-Vis",
  styles: "text-decoration:underline;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref16 =  false ? 0 : {
  name: "gmult1-Vis",
  styles: "padding-top:3rem;padding-bottom:3rem;padding-left:5rem;padding-right:5rem;--tw-bg-opacity:1;background-color:rgba(55, 65, 81, var(--tw-bg-opacity));width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref17 =  false ? 0 : {
  name: "krw03v-Vis",
  styles: "font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;font-size:1.5rem;line-height:2rem;font-weight:700;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref18 =  false ? 0 : {
  name: "1r3rv40-Vis",
  styles: "font-size:1.125rem;line-height:1.75rem;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Vis = function Vis() {
  _s2();

  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)(2018),
      ageYear = _useState[0],
      setAgeYear = _useState[1];

  var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)(2018),
      mapYearP = _useState2[0],
      setMapYearP = _useState2[1];

  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)(2018),
      mapYearG = _useState3[0],
      setMapYearG = _useState3[1];

  var _useState4 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("WA"),
      mapStateP = _useState4[0],
      setMapStateP = _useState4[1];

  var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("WA"),
      mapStateG = _useState5[0],
      setMapStateG = _useState5[1];

  var _useState6 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("gun"),
      wordwordCloud = _useState6[0],
      setWordWordCloud = _useState6[1];

  var _useState7 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)(true),
      wcLoading = _useState7[0],
      setWCLoading = _useState7[1];

  var _useState8 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("underages_ratio"),
      feat = _useState8[0],
      setFeat = _useState8[1];

  var _useState9 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("Handgun"),
      gun = _useState9[0],
      setGun = _useState9[1];

  var guns = _components_choices__WEBPACK_IMPORTED_MODULE_13__.default.guns,
      features = _components_choices__WEBPACK_IMPORTED_MODULE_13__.default.features;

  var _useState10 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)([{
    text: "loading",
    value: 100,
    weight: 200
  }]),
      dataWord = _useState10[0],
      setData = _useState10[1];

  (0,react__WEBPACK_IMPORTED_MODULE_12__.useEffect)(function () {
    setWCLoading(true);
    fetch("https://advise-pressing-dolls-suit.trycloudflare.com/api/getWordCloud", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        keyword: wordwordCloud
      })
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      setWCLoading(false);
      console.log("response: ", response);
      setData(response);
    })["catch"](function (err) {
      console.error(err);
    });
  }, [wordwordCloud]);
  return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("main", {
    css: _ref2,
    "data-tw": "flex flex-col justify-center items-center gap-y-8 bg-gray-800 w-screen",
    children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("section", {
      children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("p", {
        css: _ref3,
        "data-tw": "flex justify-center items-center text-lg flex-col text-white h-64 w-screen",
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("span", {
          css: _ref4,
          "data-tw": "text-7xl",
          children: "US Gun Violence"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 115,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("span", {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 116,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("span", {
          css: _ref5,
          "data-tw": "text-base",
          children: "Interactive data visualizations about gun violence in US"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 117,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 114,
        columnNumber: 9
      }, _this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 113,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("section", {
      css: _ref6,
      "data-tw": "py-12 px-20 bg-gray-700",
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("h1", {
        css: _ref7,
        "data-tw": "font-mono text-2xl font-bold text-gray-50",
        children: "Introduction"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 123,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("p", {
        css: _ref8,
        "data-tw": "text-lg text-gray-50",
        children: "There are a very few countries in the word where citizens have the right to bear arms. US is one of them where their citizens own guns nearly half of all civilian guns in the world. As a result, gun incidents are alarming in US. This project aims to study the trends of gun violence in US and explore any potential concerns regarding civilian-owned guns in US. The dataset used in this project contains records of gun incidents in US from January 2013 to March 2018 provided by Gun Violence Archive. We aim to explore the patterns lie in the demographics of gun perpetrators including age and gender. Moreover, we also want to use a geospatial map to address gun control problems by states. Finally, we will also explore which gun types are most used and most associated with hihger lethality."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 124,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 122,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Male and Female perpetrators over time"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 141,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "To understand the characteristics and patterns of gun perpetrators across the years, we first plotted a stacked area plot of the number and proportion of perpetrators of the two genders from 2014 to 2018."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 143,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 142,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
          func: _components_functions_PrepetratorsByGender__WEBPACK_IMPORTED_MODULE_3__.default,
          name: "perpetratorsByGender"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 150,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 149,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Drag over the area chart to select a smaller time frame."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 152,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Overall, the total number of gun violence incidents did not change very much in 5 years. The number of perpetrators from April 2014 to October 2014 was relatively higher. From the percentage graph, we can see that male perpetrators are accounted for a much greater portion compared to female perpetrators at about 10 times higher."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 154,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 153,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 140,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Age distribution of perpetrators"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 165,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
            func: _functions_ageDistribution__WEBPACK_IMPORTED_MODULE_5__.default,
            options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
              return {
                yearStart: 2014,
                yearEnd: 2018,
                color: "teal"
              };
            }, [ageYear]),
            name: "ageDistribution"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 168,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 167,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 166,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click on a boxplot to display the distribution accordingly."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 182,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Besides the genders, the next important feature of perpetrators to observe is age. The boxplots show how the ages of perpetrators were distributed in each year. The distribution of ages stayed mostly the same throughout the years as mean and median ages of perpetrators did not vary much. The higher mean than the median indicates that the distribution skews left towards younger ages. The number of perpetrators is highest between the ages of 20 - 25. The distribution of each looked pretty much the same except for 2018, because the data is only available for the early months."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 184,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 183,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 164,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Underage ratio and mean age of perpetrators across US"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 199,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Young perpetrators, especially underage ones, are a big concern considering guns falling into young people\u2019s hands. Here, we want to see the number of underage perpetrators in different states and see which states in particular have gun control problems to address. As a result, we plotted a geospatial map showing the number of underage perpetrators in each US state."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 201,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 200,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
        css: _ref9,
        "data-tw": "w-full",
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("div", {
          css: _ref10,
          "data-tw": "flex gap-x-2 justify-around items-center w-full",
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_15__.Select, {
            showSearch: true,
            style: {
              width: 200,
              fill: "#6b7280"
            },
            placeholder: "select feature",
            optionFilterProp: "children",
            onChange: function onChange(v) {
              return setFeat(v);
            },
            filterOption: function filterOption(input, option) {
              return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;
            },
            children: features.map(function (feat) {
              return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Option, {
                value: feat,
                children: feat.replaceAll("_", " ").replaceAll("pctg", "percentage")
              }, feat, false, {
                fileName: _jsxFileName,
                lineNumber: 223,
                columnNumber: 17
              }, _this);
            })
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 212,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 211,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
          func: _components_functions_perpetratorMapFull__WEBPACK_IMPORTED_MODULE_4__.default,
          name: "perpetratorMapFull",
          options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
            return {
              field: feat,
              yearStart: mapYearP,
              yearEnd: mapYearP
            };
          }, [feat, mapYearP])
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 229,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 210,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click to highlight a state."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 242,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "From the map, a pattern is recognizable: the south-eastern states tend to have higher percentages of underage perpetrators. South eastern states also had higher numbers of perpetrators per population."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 244,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 243,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "In the next section, we will explore the gun types used in gun violence incidents, to analyze their distributions and lethality."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 252,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 251,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 198,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Number of guns used over time"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 260,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
            func: _components_functions_gunArea__WEBPACK_IMPORTED_MODULE_6__.default,
            name: "gunArea"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 263,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 262,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 261,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click on the legend to highlight specific gun types to compare or drag over the area chart to explore a smaller time frame."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 266,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Our next part includes finding insights from different gun types used in gun incidents. By plotting a number and percentage of each gun type over time, we could see which types of guns are most commonly used by the perpetrators. The stacked area plot on the left had a huge gap in November 2014, it was caused by missing data. From two graphs, we could see that handguns are used most often among all gun types and the percentage of handguns increased rapidly in 2015. Other frequently used gun types included 9mm, rifle and shotgun."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 271,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 270,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 259,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Percentage of guns used and lethality"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 284,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
          func: _functions_numGunByTypes__WEBPACK_IMPORTED_MODULE_7__.default,
          name: "numGunByTypes",
          options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
            return {
              yearStart: 2014,
              yearEnd: 2018
            };
          })
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 286,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 285,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click a bar to highlight a specific gun type."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 295,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
        children: "This visualization has an all-year summary of how frequent each type of gun was used. The trend is similar to what we saw in the previous visualization. However, the lethality of each type of gun (specified by the ratio of total kill count over the total number of victims) varies differently. We can see how handguns as the most common ones are not that lethal compared to long rifles while shotguns tend to be the least lethal."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 296,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 283,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Percentage of each gun type across US"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 307,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
        css: _ref11,
        "data-tw": "w-full",
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("div", {
          css: _ref12,
          "data-tw": "flex gap-x-2 justify-around items-center w-full",
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_15__.Select, {
            showSearch: true,
            style: {
              width: 200
            },
            placeholder: "Select guns",
            optionFilterProp: "children",
            onChange: function onChange(v) {
              return setGun(v);
            },
            filterOption: function filterOption(input, option) {
              return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;
            },
            children: guns.map(function (gun) {
              return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Option, {
                value: gun,
                children: gun
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 321,
                columnNumber: 17
              }, _this);
            })
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 310,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 309,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
          func: _functions_gunMapFull__WEBPACK_IMPORTED_MODULE_8__.default,
          name: "gunMapFull",
          options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
            return {
              gun: gun,
              yearStart: mapYearG,
              yearEnd: mapYearG
            };
          }, [gun, mapYearG])
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 325,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 308,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click to highlight a state."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 338,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Next, we plotted a geospatial map of the US showing how frequent each type of gun is used in each state to see any patterns. Generally, west states had higher rates of guns used. Following the lethality plot in the previous visualization, we can point out states that have more highly lethal gun types. For example, we could see Alaska having the most frequent use of a 12 gauge gun which is gun with almost 0.5 lethality. Using the given information we could infer high risk states to a specific gun type and future trends of gun usage specific to areas."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 340,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 339,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "In conclusion, these visualizations will be useful for authorities of different states to figure out gun control problems that should be further investigated. This includes highly lethal guns and underage perpetrators. For instance, by knowing the gun types distributed geographically in the US we could know which gun types are commonly used by perpetrators in different areas so the authorities can investigate and enforce proper gun controls specific to a different area. We hope these visualizations will be useful for those who want to learn the overall picture of gun violence in US and those who want to do further research on gun violence."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 353,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 352,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 306,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Extra: Sentimentality Analysis of Tweets about Gun Violence in US."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 368,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
        children: ["In addition to gun violence data retrieved from Gun Violence Archive, we have pulled data of tweets about gun incidents from Twitter API as an experiment. Next, we performed sentimentality analysis which evaluates negativity and positivity of language used in each tweet. For the sentimentality analysis we used the library", " ", (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("span", {
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("a", {
            css: _ref13,
            "data-tw": "underline",
            href: "https://nltk.org",
            children: "NLTK (Natural Language Toolkit)"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 378,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 377,
          columnNumber: 11
        }, _this), "with the model", (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("span", {
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("a", {
            css: _ref14,
            "data-tw": "underline",
            href: "https://github.com/cjhutto/vaderSentiment",
            children: "Vader"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 384,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 383,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("span", {
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("a", {
            css: _ref15,
            "data-tw": "underline",
            href: "http://comp.social.gatech.edu/papers/icwsm14.vader.hutto.pdf",
            children: "(Link to the paper)"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 389,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 388,
          columnNumber: 11
        }, _this), "implemented. This part of visualizations is only intended to be an experiment. We want to see possibility of visualizations we can create out of the sentimentality analysis we have performed."]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 371,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
        children: "For the first visualization, we created a word cloud that dynamically pulls real-time tweets data according to the word input. The words displayed are the top words contained in the tweets that are associated with the input word. The blue, orange and red colors incicate a positive, neutral and negative word respectively according to the model. We also filter out stock words (articles, pronouns etc.) prior to this visualization."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 400,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Search, {
        placeholder: wordwordCloud,
        loading: wcLoading,
        onSearch: function onSearch(value) {
          setWordWordCloud(value);
        }
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 409,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(_components_vegaEmbeded__WEBPACK_IMPORTED_MODULE_14__.default, {
        func: _functions_wordCloud__WEBPACK_IMPORTED_MODULE_9__.default,
        name: "wordCloud",
        options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
          return {
            dataWord: dataWord
          };
        }, [dataWord])
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 416,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
        children: ["Here is the word cloud of 1000 most recent tweet from Twitter related to keyword: ", (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("span", {
          children: wordwordCloud
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 428,
          columnNumber: 23
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 426,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 367,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
        children: "With the position and time of each gun incident from the previous dataset we have, we were able to scope down and scrape tweets around the same location and time as the gun incident. For this visualization, we scope down only to the state of Washington. We plot the location of each gun incident on the map of the Washington state. The blue, orange and red colors indicate sentimentality of tweets around the same time and location of each gun incident."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 432,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
        func: _functions_tweetmapWA__WEBPACK_IMPORTED_MODULE_10__.default,
        name: "tweetmapWA"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 441,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 431,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("section", {
      css: _ref16,
      "data-tw": "py-12 px-20 bg-gray-700 w-full",
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("h1", {
        css: _ref17,
        "data-tw": "font-mono text-2xl font-bold text-gray-50",
        children: "Data Used"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 444,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("ul", {
        css: _ref18,
        "data-tw": "text-lg text-gray-50",
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("li", {
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("a", {
            href: "https://www.kaggle.com/jameslko/gun-violence-data",
            children: "Gun Violence Data from Kaggle"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 447,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 446,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 445,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 443,
      columnNumber: 7
    }, _this)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 112,
    columnNumber: 5
  }, _this);
};

_s2(Vis, "QnK0cGQ+12HBg7HJdhSZZUSrbck=");

_c4 = Vis;
/* harmony default export */ __webpack_exports__["default"] = (Vis);

var _c, _c2, _c3, _c4;

$RefreshReg$(_c, "Section");
$RefreshReg$(_c2, "VegaComp$dynamic");
$RefreshReg$(_c3, "VegaComp");
$RefreshReg$(_c4, "Vis");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,