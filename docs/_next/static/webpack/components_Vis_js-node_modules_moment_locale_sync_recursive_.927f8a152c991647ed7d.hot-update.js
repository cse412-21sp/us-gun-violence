self["webpackHotUpdate_N_E"]("components_Vis_js-node_modules_moment_locale_sync_recursive_",{

/***/ "./components/functions/gunMapFull.js":
/*!********************************************!*\
  !*** ./components/functions/gunMapFull.js ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* harmony import */ var arquero__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! arquero */ "./node_modules/arquero/src/index.js");
/* module decorator */ module = __webpack_require__.hmd(module);







function gunRect(data) {
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markRect().data(data).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldN("state").sort(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("percentage").order("descending")).title("State"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldQ("percentage"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip([vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldN("state"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("percentage"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("guns/1M population/year")]));
}

function gunMap(data, usa, pst, gun) {
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markGeoshape({
    fill: "#ddd",
    stroke: "#fff",
    strokeWidth: 1
  }).data(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.topojson(usa).feature("states")).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.lookup("id").from(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.data(pst).key("fip").fields("state"))).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip("state")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markCircle({
    stroke: "#5e5e5e",
    strokeWidth: 2
  }).data(data).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.latitude().fieldQ("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.longitude().fieldQ("longitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldQ("percentage").scale({
    scheme: "redpurple",
    clamp: true
  }).title("Percentage of " + gun), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.size().fieldQ("guns/1M population/year"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip([vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldN("state"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("percentage"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("guns/1M population/year")]))).project(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.projection("albersUsa"));
}

function gunMapFull(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var g = dataSet.g,
      stf = dataSet.stf,
      stp = dataSet.stp,
      usa = dataSet.usa,
      pst = dataSet.pst;
  var gun = options.gun,
      yearStart = options.yearStart,
      yearEnd = options.yearEnd;
  var data = g.params({
    gun: gun,
    yearStart: yearEnd,
    yearEnd: yearEnd
  }).filter(function (d) {
    return d.gun == gun && d.year >= yearStart && d.year <= yearEnd;
  }).groupby("state").rollup({
    count_guns: function count_guns(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.count();
    },
    latitude: function latitude(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.mean(d.latitude);
    },
    longitude: function longitude(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.mean(d.longitude);
    }
  }).join(g.params({
    gun: gun,
    yearStart: yearEnd,
    yearEnd: yearEnd
  }).filter(function (d) {
    return d.year >= yearStart && d.year <= yearEnd;
  }).groupby("state").rollup({
    total_guns: function total_guns(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.count();
    }
  }), "state").join(stf, "state").join(stp.params({
    gun: gun,
    yearStart: yearEnd,
    yearEnd: yearEnd
  }).filter(function (d) {
    return d.year >= yearStart && d.year <= yearEnd;
  }).groupby("state").rollup({
    population: function population(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.mean(d.population);
    }
  }), "state").derive({
    percentage: function percentage(d) {
      return 100 * d.count_guns / d.total_guns;
    },
    "guns/1M population/year": function guns1MPopulationYear(d) {
      return d.count_guns / d.population * 1000000;
    }
  });
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(gunRect(data).height(500), gunMap(data, usa, pst, gun).height(500).width(720)).config({
    scale: {
      maxSize: 1500
    },
    view: {
      background: null,
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (gunMapFull);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,