self["webpackHotUpdate_N_E"]("components_Vis_js-node_modules_moment_locale_sync_recursive_",{

/***/ "./components/functions/tweetmapWA.js":
/*!********************************************!*\
  !*** ./components/functions/tweetmapWA.js ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function perpetratorMap(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var wa = dataSet.wa,
      polar = dataSet.polar;
  var titles = {
    mean_age: "Perpetrators mean age",
    underages_ratio: ["Percentage of underage/total", "perpetrators"],
    male_pctg: ["Percentage of ", "male perpetrators"],
    female_pctg: ["Percentage of ", "female perpetrators"]
  };
  var schemes = {
    mean_age: "goldred",
    underages_ratio: "yellowgreenblue",
    male_pctg: "tealblues",
    female_pctg: "redpurple"
  };
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markGeoshape({
    fill: "#374151",
    stroke: "#fff",
    strokeWidth: 1
  }).data(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.topojson(wa).feature("counties")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markCircle({
    stroke: "#white"
  }).data(polar).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["year"] >= ' + yearStart + ' && datum["year"] <= ' + yearEnd), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.groupby("state").aggregate(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean(field).as(field), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("perpetrators_per_1M").as("perpetrators_per_1M"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("latitude").as("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("longitude").as("longitude")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.calculate('datum["underages_ratio"] * 100').as("underages_ratio")).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.latitude().fieldQ("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.longitude().fieldQ("longitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().mean(field).legend({
    titleLineHeight: 10
  }).scale({
    scheme: schemes[field]
  }).title(titles[field]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.size().mean("perpetrators_per_1M").title(["Perpetrators/", "1M population/year"]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip([vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldN("state"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ(field), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("perpetrators_per_1M")]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.opacity()["if"](select, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.value(1)).value(0.2)));
}

function perpetratorMapFull(_ref2) {
  var dataSet = _ref2.dataSet,
      options = _ref2.options;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(perpetratorMap({
    dataSet: dataSet,
    options: options
  }).height(500).width(720)).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 16,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      domainColor: "white"
    },
    legend: {
      titleFontSize: 14,
      labelFontSize: 12,
      labelColor: "white",
      titleColor: "white",
      symbolFillColor: "#6b7280",
      symbolStrokeColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (perpetratorMapFull);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,