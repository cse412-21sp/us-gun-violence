(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["components_Vis_js-node_modules_moment_locale_sync_recursive_"],{

/***/ "./components/Vis.js":
/*!***************************!*\
  !*** ./components/Vis.js ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ "./node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js");
/* harmony import */ var _home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/styled/base */ "./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js");
/* harmony import */ var _components_functions_PrepetratorsByGender__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/functions/PrepetratorsByGender */ "./components/functions/PrepetratorsByGender.js");
/* harmony import */ var _components_functions_perpetratorMapFull__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/functions/perpetratorMapFull */ "./components/functions/perpetratorMapFull.js");
/* harmony import */ var _functions_ageDistribution__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./functions/ageDistribution */ "./components/functions/ageDistribution.js");
/* harmony import */ var _components_functions_gunArea__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/functions/gunArea */ "./components/functions/gunArea.js");
/* harmony import */ var _functions_numGunByTypes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./functions/numGunByTypes */ "./components/functions/numGunByTypes.js");
/* harmony import */ var _functions_gunMapFull__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./functions/gunMapFull */ "./components/functions/gunMapFull.js");
/* harmony import */ var _functions_wordCloud__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./functions/wordCloud */ "./components/functions/wordCloud.js");
/* harmony import */ var _functions_tweetmapWA__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./functions/tweetmapWA */ "./components/functions/tweetmapWA.js");
/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dynamic */ "./node_modules/next/dynamic.js");
/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! antd */ "./node_modules/antd/es/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! framer-motion */ "./node_modules/framer-motion/dist/es/index.js");
/* harmony import */ var _components_choices__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/choices */ "./components/choices.js");
/* harmony import */ var react_intersection_observer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! react-intersection-observer */ "./node_modules/react-intersection-observer/react-intersection-observer.m.js");
/* harmony import */ var _components_vegaEmbeded__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../components/vegaEmbeded */ "./components/vegaEmbeded.js");
/* module decorator */ module = __webpack_require__.hmd(module);





var _jsxFileName = "/home/yeraf/proj/us-gun-violence/components/Vis.js",
    _this = undefined,
    _s = $RefreshSig$(),
    _s2 = $RefreshSig$();

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
















var Option = antd__WEBPACK_IMPORTED_MODULE_15__.Select.Option;
var Search = antd__WEBPACK_IMPORTED_MODULE_15__.Input.Search;
var variants = {
  visible: {
    opacity: 1,
    scale: 1
  },
  hidden: {
    opacity: 0
  }
};

var _ref =  false ? 0 : {
  name: "7vr7tw-Section",
  styles: "display:flex;flex-direction:column;justify-content:center;align-items:center;width:75%;label:Section;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Section = function Section(props) {
  _s();

  var _useInView = (0,react_intersection_observer__WEBPACK_IMPORTED_MODULE_16__.useInView)({
    /* Optional options */
    threshold: 0.4,
    triggerOnce: false
  }),
      _useInView2 = (0,_home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__.default)(_useInView, 3),
      ref = _useInView2[0],
      inView = _useInView2[1],
      entry = _useInView2[2];

  return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_18__.motion.section, {
    css: _ref,
    "data-tw": "flex flex-col justify-center items-center w-9/12",
    animate: inView ? "visible" : "hidden",
    variants: variants,
    ref: ref,
    transition: {
      duration: 0.2,
      ease: "easeIn"
    },
    children: props.children
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 34,
    columnNumber: 5
  }, _this);
};

_s(Section, "xcNnOkK/eOBEx/AJ1BTvf70kBfM=", false, function () {
  return [react_intersection_observer__WEBPACK_IMPORTED_MODULE_16__.useInView];
});

_c = Section;
var yearMark = Array.from(Array(2018 - 2013 + 1).keys()).map(function (k) {
  return 2013 + k;
}).reduce(function (acc, v) {
  return _objectSpread(_objectSpread({}, acc), {}, (0,_home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({}, v, {
    style: {
      color: "#f9fafb"
    },
    label: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("strong", {
      children: v
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 55,
      columnNumber: 16
    }, _this)
  }));
}, {});
var VegaComp = next_dynamic__WEBPACK_IMPORTED_MODULE_11___default()(_c2 = function _c2() {
  return __webpack_require__.e(/*! import() */ "components_VegaComp_js").then(__webpack_require__.bind(__webpack_require__, /*! ./VegaComp */ "./components/VegaComp.js"));
}, {
  ssr: false,
  loadableGenerated: {
    webpack: function webpack() {
      return [/*require.resolve*/(/*! ./VegaComp */ "./components/VegaComp.js")];
    },
    modules: ["../components/Vis.js -> " + "./VegaComp"]
  }
});
_c3 = VegaComp;

var Box = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("div",  false ? 0 : {
  target: "e1coz5px4",
  label: "Box"
})( false ? 0 : {
  name: "15hc2t1",
  styles: "display:flex;flex-direction:column;padding:1rem;justify-content:space-around;align-items:center;margin-top:1.5rem;margin-bottom:1.5rem",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var H1 = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("h1",  false ? 0 : {
  target: "e1coz5px3",
  label: "H1"
})( false ? 0 : {
  name: "16vgk09",
  styles: "font-weight:600;font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;font-size:1.5rem;line-height:2rem;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity))",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Desc = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("p",  false ? 0 : {
  target: "e1coz5px2",
  label: "Desc"
})( false ? 0 : {
  name: "wutlv0",
  styles: "display:flex;font-size:1rem;line-height:1.5rem;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));width:100%;padding:1.5rem;text-align:justify",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Cap = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("p",  false ? 0 : {
  target: "e1coz5px1",
  label: "Cap"
})( false ? 0 : {
  name: "1sq8vmt",
  styles: "display:flex;font-size:0.875rem;line-height:1.25rem;font-style:italic;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));width:100%;padding:1.5rem;text-align:justify",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Row = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("div",  false ? 0 : {
  target: "e1coz5px0",
  label: "Row"
})( false ? 0 : {
  name: "1jzwnv4",
  styles: "display:flex;flex-direction:row;align-items:center;justify-content:space-around;width:100%",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var _ref2 =  false ? 0 : {
  name: "12q6cz7-Vis",
  styles: "display:flex;flex-direction:column;justify-content:center;align-items:center;row-gap:2rem;--tw-bg-opacity:1;background-color:rgba(31, 41, 55, var(--tw-bg-opacity));width:100vw;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref3 =  false ? 0 : {
  name: "1fr2ya8-Vis",
  styles: "display:flex;justify-content:center;align-items:center;font-size:1.125rem;line-height:1.75rem;flex-direction:column;--tw-text-opacity:1;color:rgba(255, 255, 255, var(--tw-text-opacity));height:16rem;width:100vw;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 =  false ? 0 : {
  name: "mxhahk-Vis",
  styles: "font-size:4.5rem;line-height:1;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 =  false ? 0 : {
  name: "bdyuxw-Vis",
  styles: "font-size:1rem;line-height:1.5rem;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref6 =  false ? 0 : {
  name: "ezamw-Vis",
  styles: "padding-top:3rem;padding-bottom:3rem;padding-left:5rem;padding-right:5rem;--tw-bg-opacity:1;background-color:rgba(55, 65, 81, var(--tw-bg-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref7 =  false ? 0 : {
  name: "krw03v-Vis",
  styles: "font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;font-size:1.5rem;line-height:2rem;font-weight:700;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref8 =  false ? 0 : {
  name: "1r3rv40-Vis",
  styles: "font-size:1.125rem;line-height:1.75rem;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref9 =  false ? 0 : {
  name: "7t94bd-Vis",
  styles: "width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref10 =  false ? 0 : {
  name: "1efx88n-Vis",
  styles: "display:flex;column-gap:0.5rem;justify-content:space-around;align-items:center;width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref11 =  false ? 0 : {
  name: "7t94bd-Vis",
  styles: "width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref12 =  false ? 0 : {
  name: "1efx88n-Vis",
  styles: "display:flex;column-gap:0.5rem;justify-content:space-around;align-items:center;width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Vis = function Vis() {
  _s2();

  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)(2018),
      ageYear = _useState[0],
      setAgeYear = _useState[1];

  var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)(2018),
      mapYearP = _useState2[0],
      setMapYearP = _useState2[1];

  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)(2018),
      mapYearG = _useState3[0],
      setMapYearG = _useState3[1];

  var _useState4 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("WA"),
      mapStateP = _useState4[0],
      setMapStateP = _useState4[1];

  var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("WA"),
      mapStateG = _useState5[0],
      setMapStateG = _useState5[1];

  var _useState6 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("gun"),
      wordwordCloud = _useState6[0],
      setWordWordCloud = _useState6[1];

  var _useState7 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)(true),
      wcLoading = _useState7[0],
      setWCLoading = _useState7[1];

  var _useState8 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("underages_ratio"),
      feat = _useState8[0],
      setFeat = _useState8[1];

  var _useState9 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)("Handgun"),
      gun = _useState9[0],
      setGun = _useState9[1];

  var guns = _components_choices__WEBPACK_IMPORTED_MODULE_13__.default.guns,
      features = _components_choices__WEBPACK_IMPORTED_MODULE_13__.default.features;

  var _useState10 = (0,react__WEBPACK_IMPORTED_MODULE_12__.useState)([{
    text: "loading",
    value: 100,
    weight: 200
  }]),
      dataWord = _useState10[0],
      setData = _useState10[1];

  (0,react__WEBPACK_IMPORTED_MODULE_12__.useEffect)(function () {
    setWCLoading(true);
    fetch("https://advise-pressing-dolls-suit.trycloudflare.com/api/getWordCloud", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        keyword: wordwordCloud
      })
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      setWCLoading(false);
      console.log("response: ", response);
      setData(response);
    })["catch"](function (err) {
      console.error(err);
    });
  }, [wordwordCloud]);
  return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("main", {
    css: _ref2,
    "data-tw": "flex flex-col justify-center items-center gap-y-8 bg-gray-800 w-screen",
    children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("section", {
      children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("p", {
        css: _ref3,
        "data-tw": "flex justify-center items-center text-lg flex-col text-white h-64 w-screen",
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("span", {
          css: _ref4,
          "data-tw": "text-7xl",
          children: "US Gun Violence"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 115,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("span", {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 116,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("span", {
          css: _ref5,
          "data-tw": "text-base",
          children: "Interactive data visualizations about gun violence in US"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 117,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 114,
        columnNumber: 9
      }, _this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 113,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("section", {
      css: _ref6,
      "data-tw": "py-12 px-20 bg-gray-700",
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("h1", {
        css: _ref7,
        "data-tw": "font-mono text-2xl font-bold text-gray-50",
        children: "Introduction"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 123,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("p", {
        css: _ref8,
        "data-tw": "text-lg text-gray-50",
        children: "There are a very few countries in the word where citizens have the right to bear arms. US is one of them where their citizens own guns nearly half of all civilian guns in the world. As a result, gun incidents are alarming in US. This project aims to study the trends of gun violence in US and explore any potential concerns regarding civilian-owned guns in US. The dataset used in this project contains records of gun incidents in US from January 2013 to March 2018 provided by Gun Violence Archive. We aim to explore the patterns lie in the demographics of gun perpetrators including age and gender. Moreover, we also want to use a geospatial map to address gun control problems by states. Finally, we will also explore which gun types are most used and most associated with hihger lethality."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 124,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 122,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Male and Female perpetrators over time"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 141,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "To understand the characteristics and patterns of gun perpetrators across the years, we first plotted a stacked area plot of the number and proportion of perpetrators of the two genders from 2014 to 2018."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 143,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 142,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
          func: _components_functions_PrepetratorsByGender__WEBPACK_IMPORTED_MODULE_3__.default,
          name: "perpetratorsByGender"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 150,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 149,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Drag over the area chart to select a smaller time frame."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 152,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Overall, the total number of gun violence incidents did not change very much in 5 years. The number of perpetrators from April 2014 to October 2014 was relatively higher. From the percentage graph, we can see that male perpetrators are accounted for a much greater portion compared to female perpetrators at about 10 times higher."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 154,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 153,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 140,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Age distribution of perpetrators"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 165,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
            func: _functions_ageDistribution__WEBPACK_IMPORTED_MODULE_5__.default,
            options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
              return {
                yearStart: 2014,
                yearEnd: 2018,
                color: "teal"
              };
            }, [ageYear]),
            name: "ageDistribution"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 168,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 167,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 166,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click on a boxplot to display the distribution accordingly."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 182,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Besides the genders, the next important feature of perpetrators to observe is age. The boxplots show how the ages of perpetrators were distributed in each year. The distribution of ages stayed mostly the same throughout the years as mean and median ages of perpetrators did not vary much. The higher mean than the median indicates that the distribution skews left towards younger ages. The number of perpetrators is highest between the ages of 20 - 25. The distribution of each looked pretty much the same except for 2018, because the data is only available for the early months."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 184,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 183,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 164,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Underage ratio and mean age of perpetrators across US"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 199,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Young perpetrators, especially underage ones, are a big concern considering guns falling into young people\u2019s hands. Here, we want to see the number of underage perpetrators in different states and see which states in particular have gun control problems to address. As a result, we plotted a geospatial map showing the number of underage perpetrators in each US state."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 201,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 200,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
        css: _ref9,
        "data-tw": "w-full",
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("div", {
          css: _ref10,
          "data-tw": "flex gap-x-2 justify-around items-center w-full",
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_15__.Select, {
            showSearch: true,
            style: {
              width: 200,
              fill: "#6b7280"
            },
            placeholder: "select feature",
            optionFilterProp: "children",
            onChange: function onChange(v) {
              return setFeat(v);
            },
            filterOption: function filterOption(input, option) {
              return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;
            },
            children: features.map(function (feat) {
              return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Option, {
                value: feat,
                children: feat.replaceAll("_", " ").replaceAll("pctg", "percentage")
              }, feat, false, {
                fileName: _jsxFileName,
                lineNumber: 223,
                columnNumber: 17
              }, _this);
            })
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 212,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 211,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
          func: _components_functions_perpetratorMapFull__WEBPACK_IMPORTED_MODULE_4__.default,
          name: "perpetratorMapFull",
          options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
            return {
              field: feat,
              yearStart: mapYearP,
              yearEnd: mapYearP
            };
          }, [feat, mapYearP])
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 229,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 210,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click to highlight a state."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 242,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "From the map, a pattern is recognizable: the south-eastern states tend to have higher percentages of underage perpetrators. South eastern states also had higher numbers of perpetrators per population."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 244,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 243,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "In the next section, we will explore the gun types used in gun violence incidents, to analyze their distributions and lethality."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 252,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 251,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 198,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Number of guns used over time"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 260,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
            func: _components_functions_gunArea__WEBPACK_IMPORTED_MODULE_6__.default,
            name: "gunArea"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 263,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 262,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 261,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click on the legend to highlight specific gun types to compare or drag over the area chart to explore a smaller time frame."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 266,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Our next part includes finding insights from different gun types used in gun incidents. By plotting a number and percentage of each gun type over time, we could see which types of guns are most commonly used by the perpetrators. The stacked area plot on the left had a huge gap in November 2014, it was caused by missing data. From two graphs, we could see that handguns are used most often among all gun types and the percentage of handguns increased rapidly in 2015. Other frequently used gun types included 9mm, rifle and shotgun."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 271,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 270,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 259,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Percentage of guns used and lethality"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 284,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
          func: _functions_numGunByTypes__WEBPACK_IMPORTED_MODULE_7__.default,
          name: "numGunByTypes",
          options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
            return {
              yearStart: 2014,
              yearEnd: 2018
            };
          })
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 286,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 285,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click a bar to highlight a specific gun type."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 295,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
        children: "This visualization has an all-year summary of how frequent each type of gun was used. The trend is similar to what we saw in the previous visualization. However, the lethality of each type of gun (specified by the ratio of total kill count over the total number of victims) varies differently. We can see how handguns as the most common ones are not that lethal compared to long rifles while shotguns tend to be the least lethal."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 296,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 283,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Percentage of each gun type across US"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 307,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Box, {
        css: _ref11,
        "data-tw": "w-full",
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)("div", {
          css: _ref12,
          "data-tw": "flex gap-x-2 justify-around items-center w-full",
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_15__.Select, {
            showSearch: true,
            style: {
              width: 200
            },
            placeholder: "Select guns",
            optionFilterProp: "children",
            onChange: function onChange(v) {
              return setGun(v);
            },
            filterOption: function filterOption(input, option) {
              return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;
            },
            children: guns.map(function (gun) {
              return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Option, {
                value: gun,
                children: gun
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 321,
                columnNumber: 17
              }, _this);
            })
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 310,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 309,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
          func: _functions_gunMapFull__WEBPACK_IMPORTED_MODULE_8__.default,
          name: "gunMapFull",
          options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
            return {
              gun: gun,
              yearStart: mapYearG,
              yearEnd: mapYearG
            };
          }, [gun, mapYearG])
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 325,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 308,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Cap, {
        children: "Click to highlight a state."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 338,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
          children: "Next, we plotted a geospatial map of the US showing how frequent each type of gun is used in each state to see any patterns. Generally, west states had higher rates of guns used. Following the lethality plot in the previous visualization, we can point out states that have more highly lethal gun types. For example, could see Alaska having the most frequent use of a 12 gauge gun which is gun with almost 0.5 lethality. Using the given information we could infer high risk states to a specific gun type and predict future gun violence incidents. By knowing the gun types distributed geographically in the US we could know which gun types are \u201Cfavored\u201D by perpetrators in different states or geographical areas and predict their lethalities."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 340,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 339,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 306,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(H1, {
        children: "Word Cloud"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 357,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Search, {
        placeholder: wordwordCloud,
        loading: wcLoading,
        onSearch: function onSearch(value) {
          setWordWordCloud(value);
        }
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 358,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(_components_vegaEmbeded__WEBPACK_IMPORTED_MODULE_14__.default, {
        func: _functions_wordCloud__WEBPACK_IMPORTED_MODULE_9__.default,
        name: "wordCloud",
        options: (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {
          return {
            dataWord: dataWord
          };
        }, [dataWord])
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 365,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Desc, {
        children: ["Here is the word cloud of 1000 most recent tweet from Twitter related to keyword: ", wordwordCloud, " The size is encode by number of occurence. The color is encode by the sentiment value calculate from VANDER NLP model."]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 375,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 356,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Section, {
      children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(VegaComp, {
        func: _functions_tweetmapWA__WEBPACK_IMPORTED_MODULE_10__.default,
        name: "tweetmapWA"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 383,
        columnNumber: 9
      }, _this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 382,
      columnNumber: 7
    }, _this)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 112,
    columnNumber: 5
  }, _this);
};

_s2(Vis, "QnK0cGQ+12HBg7HJdhSZZUSrbck=");

_c4 = Vis;
/* harmony default export */ __webpack_exports__["default"] = (Vis);

var _c, _c2, _c3, _c4;

$RefreshReg$(_c, "Section");
$RefreshReg$(_c2, "VegaComp$dynamic");
$RefreshReg$(_c3, "VegaComp");
$RefreshReg$(_c4, "Vis");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/choices.js":
/*!*******************************!*\
  !*** ./components/choices.js ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* module decorator */ module = __webpack_require__.hmd(module);
/* harmony default export */ __webpack_exports__["default"] = ({
  features: ["mean_age", "underages_ratio"],
  guns: ['16 gauge', '44 Mag', '25 Auto', 'Handgun', '32 Auto', '40 SW', '10mm', 'Shotgun', '12 gauge', '38 Spl', '20 gauge', '380 Auto', '357 Mag', '308 Win', '28 gauge', '30-06 Spr', '22 LR', '410 gauge', '45 Auto', '30-30 Win', 'Rifle', '300 Win', 'Other', '9mm'],
  states: ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"]
});

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/PrepetratorsByGender.js":
/*!******************************************************!*\
  !*** ./components/functions/PrepetratorsByGender.js ***!
  \******************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function perpetratorsByGender(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var gdc = dataSet.gdc,
      gdp = dataSet.gdp;
  var brush = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.selectInterval() // Brush is a better (vivid?) name than selection in this case!
  .encodings("x"); // limit selection to x-axis (year) values

  var x = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().yearmonth("date");
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markArea().data(gdc).encode(x, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldQ("count").title("Number of perpetrators"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("gender").scale({
    scheme: "set1"
  })).params(brush).width(450).height(360), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markArea().data(gdp).encode(x, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldQ("pctg").title("Percentage of perpetrators"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("gender").scale({
    scheme: "set1"
  })).encode(x.scale({
    domain: brush
  })).width(450).height(360)).config({
    mark: {
      opacity: 0.7
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 13,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      gridOpacity: 0.6,
      domainColor: "white"
    },
    legend: {
      titleFontSize: 16,
      labelFontSize: 14,
      labelColor: "white",
      titleColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (perpetratorsByGender);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/ageDistribution.js":
/*!*************************************************!*\
  !*** ./components/functions/ageDistribution.js ***!
  \*************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function ageDistribution(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var p = dataSet.p;
  var yearStart = options.yearStart,
      yearEnd = options.yearEnd,
      color = options.color;
  var selection = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.selectMulti().encodings(["x", "y"]);
  var box = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markBoxplot({
    color: "white"
  }).data(p).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["year"] >= 2014 && datum["age"] <= 100')).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldO("year"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().mean("age"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().value("#91faef"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.opacity()["if"](selection, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.value(0.6)).value(0.2)).params(selection);
  var meanLine = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markLine({
    opacity: 0.9
  }).data(p.derive({
    label: function label(d) {
      return "Mean Age";
    }
  })).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["year"] >= 2014 && datum["age"] <= 100')).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldO("year"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().mean("age"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("label").scale({
    scheme: "set3"
  })).params(selection);
  var medianLine = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markLine().data(p.derive({
    label: function label(d) {
      return "Median Age";
    }
  })).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["year"] >= 2014 && datum["age"] <= 100')).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldO("year"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().median("age"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("label").scale({
    scheme: "set3"
  }));
  var boxplot = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.layer(box, medianLine, meanLine).width(480).height(480);
  var hist = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markBar().data(p.filter(function (d) {
    return d.age <= 100;
  })).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter(selection)).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldQ("age").scale({
    domain: [0, 100]
  }).bin({
    step: 5
  }).title("Age"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().count().scale({
    domain: [0, 28000]
  }).title("Number of Perpetrators"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().value(color)).width(480).height(480);
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(boxplot, hist).config({
    mark: {
      opacity: 0.8
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 13,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridOpacity: 0.6,
      gridColor: "white",
      domainColor: "white"
    },
    legend: {
      titleFontSize: 16,
      labelFontSize: 14,
      labelColor: "white",
      titleColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (ageDistribution);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/gunArea.js":
/*!*****************************************!*\
  !*** ./components/functions/gunArea.js ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function gunArea(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var gstm = dataSet.gstm;
  var select = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.selectPoint().fields("gun").bind("legend");
  var brush = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.selectInterval() // Brush is a better (vivid?) name than selection in this case!
  .encodings("x"); // limit selection to x-axis (year) values

  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markArea({
    opacity: 0.7
  }).data(gstm).params(select, brush).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["year"] >= 2014')).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().yearmonth("date"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().sum("count_guns").title("Number of guns"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("gun").scale({
    scheme: "tableau20"
  }).title("Gun type"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.opacity()["if"](select, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.value(0.9)).value(0.2)).width(600).height(400), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markLine({
    opacity: 0.8
  }).data(gstm).params(select).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["year"] >= 2014')).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().yearmonth("date").scale({
    domain: brush
  }), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldQ("gun_percentage"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("gun"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.opacity()["if"](select, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.value(0.9)).value(0.05)).width(600).height(400)).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 13,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      gridOpacity: 0.4,
      domainColor: "white"
    },
    legend: {
      titleFontSize: 16,
      labelFontSize: 14,
      labelColor: "white",
      titleColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (gunArea);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/gunMapFull.js":
/*!********************************************!*\
  !*** ./components/functions/gunMapFull.js ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);




var select = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.selectPoint().fields("state");

function gunRect(data, gun, yearStart, yearEnd) {
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markRect().data(data).params(select).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["gun"] == "' + gun + '" && datum["year"] >= ' + yearStart + ' && datum["year"] <= ' + yearEnd), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.groupby("state").aggregate(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("latitude").as("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("longitude").as("longitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("gun_percentage").as("Percentage of " + gun), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("total_guns_per_1M").as("Total guns/1M population/year"))).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldN("state").sort(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("Percentage of " + gun).order("descending")).title("State"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldQ("Percentage of " + gun), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip([vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldN("state"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("Percentage of " + gun), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("Total guns/1M population/year")]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.opacity()["if"](select, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.value(1)).value(0.2));
}

function gunMap(data, gun, yearStart, yearEnd, usa) {
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markGeoshape({
    fill: "#374151",
    stroke: "#fff",
    strokeWidth: 1
  }).data(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.topojson(usa).feature("states")).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.lookup("id").from(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.data(data).key("fip").fields("state"))).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip("state")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markCircle({
    stroke: "white",
    strokeWidth: 2
  }).data(data).params(select).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["gun"] == "' + gun + '" && datum["year"] >= ' + yearStart + ' && datum["year"] <= ' + yearEnd), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.groupby("state").aggregate(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("latitude").as("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("longitude").as("longitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("gun_percentage").as("Percentage of " + gun), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("total_guns_per_1M").as("Total guns/1M population/year"))).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.latitude().fieldQ("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.longitude().fieldQ("longitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldQ("Percentage of " + gun).scale({
    scheme: "redpurple",
    clamp: true
  }), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.size().fieldQ("Total guns/1M population/year").title(["Total guns/", "1M population/year"]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip([vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldN("state"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("Percentage of " + gun), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("Total guns/1M population/year")]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.opacity()["if"](select, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.value(1)).value(0.2))).project(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.projection("albersUsa"));
}

function gunMapFull(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var gsty = dataSet.gsty,
      usa = dataSet.usa;
  var gun = options.gun,
      yearStart = options.yearStart,
      yearEnd = options.yearEnd;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(gunRect(gsty, gun, yearStart, yearEnd).height(500), gunMap(gsty, gun, yearStart, yearEnd, usa).height(500).width(720)).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 16,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      domainColor: "white"
    },
    legend: {
      titleFontSize: 14,
      labelFontSize: 12,
      labelColor: "white",
      titleColor: "white",
      symbolFillColor: "#6b7280",
      symbolStrokeColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (gunMapFull);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/numGunByTypes.js":
/*!***********************************************!*\
  !*** ./components/functions/numGunByTypes.js ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);




var selection = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.selectPoint().fields("gun");

function gunCounts(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var yearStart = options.yearStart,
      yearEnd = options.yearEnd;
  var gstm = dataSet.gstm;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markBar({
    opacity: 0.8
  }).params(selection).data(gstm).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter("datum['gun'] != 'Unknown' && datum['year'] >= " + yearStart + " && datum['year'] <= " + yearEnd)).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldN("gun").sort(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("gun_percentage")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().mean("gun_percentage").title("Percentage over total guns"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("gun").scale({
    scheme: "category20b"
  }).legend(false).title("Gun type"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.opacity()["if"](selection, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.value(1)).value(0.2)), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markText({
    opacity: 0.75,
    color: "white",
    dx: 20
  }).data(gstm).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter("datum['gun'] != 'Unknown' && datum['year'] >= " + yearStart + " && datum['year'] <= " + yearEnd)).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.text().mean("gun_percentage").format(".2f"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldN("gun").sort(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("gun_percentage")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().mean("gun_percentage").title("Percentage over total guns")));
}

function gunKillCounts(_ref2) {
  var dataSet = _ref2.dataSet,
      options = _ref2.options;
  var yearStart = options.yearStart,
      yearEnd = options.yearEnd;
  var gstm = dataSet.gstm;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markBar({
    opacity: 0.8
  }).data(gstm).params(selection).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter("datum['gun'] != 'Unknown' && datum['year'] >= " + yearStart + " && datum['year'] <= " + yearEnd), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.calculate('datum["n_killed"]/ (datum["n_injured"] + datum["n_killed"])').as("kill_rate")).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldN("gun").sort(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("kill_rate")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().mean("kill_rate").title("Lethality (kills/total victims)"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("gun").scale({
    scheme: "category20b"
  }).legend(false).title("Gun type"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.opacity()["if"](selection, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.value(1)).value(0.2)), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markText({
    opacity: 0.75,
    color: "white",
    dx: 20
  }).data(gstm).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter("datum['gun'] != 'Unknown' && datum['year'] >= " + yearStart + " && datum['year'] <= " + yearEnd), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.calculate('datum["n_killed"]/ (datum["n_injured"] + datum["n_killed"])').as("kill_rate")).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.text().mean("kill_rate").format(".2f"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldN("gun").sort(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("kill_rate")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().mean("kill_rate")));
}

function numGunByTypes(_ref3) {
  var dataSet = _ref3.dataSet,
      options = _ref3.options;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(gunCounts({
    dataSet: dataSet,
    options: options
  }).width(400), gunKillCounts({
    dataSet: dataSet,
    options: options
  }).width(400)).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 13,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      gridOpacity: 0.4,
      domainColor: "white"
    },
    legend: {
      titleFontSize: 16,
      labelFontSize: 14,
      labelColor: "white",
      titleColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (numGunByTypes);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/perpetratorMapFull.js":
/*!****************************************************!*\
  !*** ./components/functions/perpetratorMapFull.js ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);




var select = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.selectPoint().fields("state");

function perpetratorRect(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var pst = dataSet.pst;
  var field = options.field,
      yearStart = options.yearStart,
      yearEnd = options.yearEnd;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markRect().data(pst).params(select).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["year"] >= ' + yearStart + ' && datum["year"] <= ' + yearEnd), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.calculate('datum["underages_ratio"] * 100').as("underages_ratio")).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldN("state").sort(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean(field).order("descending")).title("State"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().mean(field), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip([vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldN("state"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean(field)]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.opacity()["if"](select, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.value(1)).value(0.2));
}

function perpetratorMap(_ref2) {
  var dataSet = _ref2.dataSet,
      options = _ref2.options;
  var field = options.field,
      yearStart = options.yearStart,
      yearEnd = options.yearEnd;
  var pst = dataSet.pst,
      usa = dataSet.usa;
  var titles = {
    mean_age: "Perpetrators mean age",
    underages_ratio: ["Percentage of underage/total", "perpetrators"],
    male_pctg: ["Percentage of ", "male perpetrators"],
    female_pctg: ["Percentage of ", "female perpetrators"]
  };
  var schemes = {
    mean_age: "goldred",
    underages_ratio: "yellowgreenblue",
    male_pctg: "tealblues",
    female_pctg: "redpurple"
  };
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.data(pst).layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markGeoshape({
    fill: "#374151",
    stroke: "#fff",
    strokeWidth: 1
  }).data(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.topojson(usa).feature("states")).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.lookup("id").from(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.data(pst).key("fip").fields("state"))).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip("state")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markCircle({
    stroke: "#white"
  }).data(pst).params(select).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["year"] >= ' + yearStart + ' && datum["year"] <= ' + yearEnd), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.groupby("state").aggregate(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean(field).as(field), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("perpetrators_per_1M").as("perpetrators_per_1M"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("latitude").as("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("longitude").as("longitude")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.calculate('datum["underages_ratio"] * 100').as('underages_ratio')).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.latitude().fieldQ("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.longitude().fieldQ("longitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().mean(field).legend({
    titleLineHeight: 10
  }).scale({
    scheme: schemes[field]
  }).title(titles[field]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.size().mean("perpetrators_per_1M").title(["Perpetrators/", "1M population/year"]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip([vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldN("state"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ(field), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("perpetrators_per_1M")]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.opacity()["if"](select, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.value(1)).value(0.2))).project(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.projection("albersUsa"));
}

function perpetratorMapFull(_ref3) {
  var dataSet = _ref3.dataSet,
      options = _ref3.options;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(perpetratorRect({
    dataSet: dataSet,
    options: options
  }).height(500), perpetratorMap({
    dataSet: dataSet,
    options: options
  }).height(500).width(720)).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 16,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      domainColor: "white"
    },
    legend: {
      titleFontSize: 14,
      labelFontSize: 12,
      labelColor: "white",
      titleColor: "white",
      symbolFillColor: "#6b7280",
      symbolStrokeColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (perpetratorMapFull);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/tweetmapWA.js":
/*!********************************************!*\
  !*** ./components/functions/tweetmapWA.js ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function perpetratorMap(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var wa = dataSet.wa,
      polar = dataSet.polar;
  var select = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.selectInterval().bind("scales");
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markGeoshape({
    fill: "#374151",
    stroke: "#fff",
    strokeWidth: 1
  }).data(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.topojson(wa).feature("counties")).params(select), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markCircle({
    stroke: "#white"
  }).data(polar).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter("datum['latitude'] != '0' && datum['longitude'] != '0'")).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.latitude().fieldQ("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.longitude().fieldQ("longitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldQ("comp").legend({
    titleLineHeight: 10
  }).scale({
    scheme: "redblue"
  }), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.size().fieldQ("n_killed").title(["Perpetrators/", "1M population/year"]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip([vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldN("city_or_county"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("comp"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("longitude")])).params(select));
}

function perpetratorMapFull(_ref2) {
  var dataSet = _ref2.dataSet,
      options = _ref2.options;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(perpetratorMap({
    dataSet: dataSet,
    options: options
  }).height(500).width(720)).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 16,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      domainColor: "white"
    },
    legend: {
      titleFontSize: 14,
      labelFontSize: 12,
      labelColor: "white",
      titleColor: "white",
      symbolFillColor: "#6b7280",
      symbolStrokeColor: "white"
    },
    scale: {
      maxSize: 50
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (perpetratorMapFull);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/wordCloud.js":
/*!*******************************************!*\
  !*** ./components/functions/wordCloud.js ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* module decorator */ module = __webpack_require__.hmd(module);
var wordCloud = function wordCloud(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var dataWord = options.dataWord;
  return {
    $schema: "https://vega.github.io/schema/vega/v5.json",
    description: "A word cloud visualization depicting Vega research paper abstracts.",
    width: 1280,
    height: 720,
    padding: 0,
    data: [{
      name: "table",
      values: dataWord
    }],
    scales: [{
      name: "color",
      type: "ordinal",
      domain: {
        data: "table",
        field: "text"
      },
      range: ["blue", "orange", "red"]
    }],
    marks: [{
      type: "text",
      from: {
        data: "table"
      },
      encode: {
        enter: {
          text: {
            field: "text"
          },
          align: {
            value: "center"
          },
          baseline: {
            value: "alphabetic"
          },
          fill: {
            scale: "color",
            field: "text"
          }
        },
        update: {
          fillOpacity: {
            value: 1
          }
        },
        hover: {
          fillOpacity: {
            value: 0.5
          }
        }
      },
      transform: [{
        type: "wordcloud",
        size: [1280, 720],
        text: {
          field: "text"
        },
        rotate: {
          field: "datum.angle"
        },
        font: "Helvetica Neue, Arial",
        fontSize: {
          field: "datum.count"
        },
        fontWeight: {
          field: "datum.weight"
        },
        fontSizeRange: [28, 102],
        padding: 2
      }]
    }]
  };
};

/* harmony default export */ __webpack_exports__["default"] = (wordCloud);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/vegaEmbeded.js":
/*!***********************************!*\
  !*** ./components/vegaEmbeded.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ "./node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* harmony import */ var vega_embed__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vega-embed */ "./node_modules/vega-embed/build/vega-embed.module.js");
/* harmony import */ var _store_index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../store/index */ "./store/index.js");
/* module decorator */ module = __webpack_require__.hmd(module);


var _jsxFileName = "/home/yeraf/proj/us-gun-violence/components/vegaEmbeded.js",
    _this = undefined,
    _s = $RefreshSig$();









var Main = function Main(_ref) {
  _s();

  var func = _ref.func,
      name = _ref.name,
      width = _ref.width,
      height = _ref.height,
      options = _ref.options;
  var container = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  var dataSet = (0,_store_index__WEBPACK_IMPORTED_MODULE_6__.default)(function (state) {
    return state.dataset;
  });
  var vegaOptions = {
    config: {// Vega-Lite default configuration
    },
    init: function init(view) {
      // initialize tooltip handler
      view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_4__.Handler().call);
    },
    view: {
      renderer: "canvas"
    }
  };
  vega_lite_api__WEBPACK_IMPORTED_MODULE_2__.register(vega__WEBPACK_IMPORTED_MODULE_1__, vega_lite__WEBPACK_IMPORTED_MODULE_3__, vegaOptions);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
    try {
      var resultFunc = func({
        dataSet: dataSet,
        options: options
      });
      (0,vega_embed__WEBPACK_IMPORTED_MODULE_5__.default)(container.current, resultFunc);
    } catch (err) {
      console.log(err);
    }

    return function () {
      if (container.current) {
        container.current.innerHTML = "";
      }
    };
  }, [container.current, options]);
  return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)("div", {
    ref: container,
    tw: "rounded-2xl"
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 40,
    columnNumber: 5
  }, _this);
};

_s(Main, "t7qbgatf0ULOCt8MZ2KRuDcYC60=", false, function () {
  return [_store_index__WEBPACK_IMPORTED_MODULE_6__.default];
});

_c = Main;
/* harmony default export */ __webpack_exports__["default"] = (Main);

var _c;

$RefreshReg$(_c, "Main");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!***************************************************!*\
  !*** ./node_modules/moment/locale/ sync ^\.\/.*$ ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn-bd": "./node_modules/moment/locale/bn-bd.js",
	"./bn-bd.js": "./node_modules/moment/locale/bn-bd.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-in": "./node_modules/moment/locale/en-in.js",
	"./en-in.js": "./node_modules/moment/locale/en-in.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./en-sg": "./node_modules/moment/locale/en-sg.js",
	"./en-sg.js": "./node_modules/moment/locale/en-sg.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-mx": "./node_modules/moment/locale/es-mx.js",
	"./es-mx.js": "./node_modules/moment/locale/es-mx.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fil": "./node_modules/moment/locale/fil.js",
	"./fil.js": "./node_modules/moment/locale/fil.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-deva": "./node_modules/moment/locale/gom-deva.js",
	"./gom-deva.js": "./node_modules/moment/locale/gom-deva.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./oc-lnc": "./node_modules/moment/locale/oc-lnc.js",
	"./oc-lnc.js": "./node_modules/moment/locale/oc-lnc.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tk": "./node_modules/moment/locale/tk.js",
	"./tk.js": "./node_modules/moment/locale/tk.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-mo": "./node_modules/moment/locale/zh-mo.js",
	"./zh-mo.js": "./node_modules/moment/locale/zh-mo.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,