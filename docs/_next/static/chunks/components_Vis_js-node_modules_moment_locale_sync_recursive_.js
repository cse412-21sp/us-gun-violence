(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["components_Vis_js-node_modules_moment_locale_sync_recursive_"],{

/***/ "./components/Vis.js":
/*!***************************!*\
  !*** ./components/Vis.js ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ "./node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/styled/base */ "./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js");
/* harmony import */ var _components_functions_PrepetratorsByGender__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/functions/PrepetratorsByGender */ "./components/functions/PrepetratorsByGender.js");
/* harmony import */ var _components_functions_perpetratorMapFull__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/functions/perpetratorMapFull */ "./components/functions/perpetratorMapFull.js");
/* harmony import */ var _components_functions_ageHistogram__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/functions/ageHistogram */ "./components/functions/ageHistogram.js");
/* harmony import */ var _functions_ageBoxplot__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./functions/ageBoxplot */ "./components/functions/ageBoxplot.js");
/* harmony import */ var _components_functions_gunArea__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/functions/gunArea */ "./components/functions/gunArea.js");
/* harmony import */ var _functions_numGunByTypes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./functions/numGunByTypes */ "./components/functions/numGunByTypes.js");
/* harmony import */ var _functions_perpetratorsByTime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./functions/perpetratorsByTime */ "./components/functions/perpetratorsByTime.js");
/* harmony import */ var _functions_gunMapFull__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./functions/gunMapFull */ "./components/functions/gunMapFull.js");
/* harmony import */ var _functions_gunByTime__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./functions/gunByTime */ "./components/functions/gunByTime.js");
/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dynamic */ "./node_modules/next/dynamic.js");
/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! antd */ "./node_modules/antd/es/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! framer-motion */ "./node_modules/framer-motion/dist/es/index.js");
/* harmony import */ var _components_choices__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../components/choices */ "./components/choices.js");
/* harmony import */ var react_intersection_observer__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! react-intersection-observer */ "./node_modules/react-intersection-observer/react-intersection-observer.m.js");
/* module decorator */ module = __webpack_require__.hmd(module);





var _jsxFileName = "/home/yeraf/proj/us-gun-violence/components/Vis.js",
    _this = undefined,
    _s = $RefreshSig$();

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
















var Option = antd__WEBPACK_IMPORTED_MODULE_15__.Select.Option;

var _ref =  false ? 0 : {
  name: "7vr7tw-Section",
  styles: "display:flex;flex-direction:column;justify-content:center;align-items:center;width:75%;label:Section;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Section = function Section(props) {
  return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_17__.motion.section, {
    css: _ref,
    "data-tw": "flex flex-col justify-center items-center w-9/12",
    animate: {
      x: 0,
      visibility: props.inView ? true : false
    },
    transition: {
      ease: "easeOut" // , duration: 1

    },
    initial: {
      x: -4000
    },
    children: props.children
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 21,
    columnNumber: 5
  }, _this);
};

_c = Section;
var yearMark = Array.from(Array(2018 - 2013 + 1).keys()).map(function (k) {
  return 2013 + k;
}).reduce(function (acc, v) {
  return _objectSpread(_objectSpread({}, acc), {}, (0,_home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__.default)({}, v, {
    style: {
      color: "#f9fafb"
    },
    label: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("strong", {
      children: v
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 44,
      columnNumber: 16
    }, _this)
  }));
}, {});
var VegaComp = next_dynamic__WEBPACK_IMPORTED_MODULE_12___default()(_c2 = function _c2() {
  return __webpack_require__.e(/*! import() */ "components_VegaComp_js").then(__webpack_require__.bind(__webpack_require__, /*! ./VegaComp */ "./components/VegaComp.js"));
}, {
  ssr: false,
  loadableGenerated: {
    webpack: function webpack() {
      return [/*require.resolve*/(/*! ./VegaComp */ "./components/VegaComp.js")];
    },
    modules: ["../components/Vis.js -> " + "./VegaComp"]
  }
});
_c3 = VegaComp;

var Box = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("div",  false ? 0 : {
  target: "e1coz5px3",
  label: "Box"
})( false ? 0 : {
  name: "15hc2t1",
  styles: "display:flex;flex-direction:column;padding:1rem;justify-content:space-around;align-items:center;margin-top:1.5rem;margin-bottom:1.5rem",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var H1 = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("h1",  false ? 0 : {
  target: "e1coz5px2",
  label: "H1"
})( false ? 0 : {
  name: "16vgk09",
  styles: "font-weight:600;font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;font-size:1.5rem;line-height:2rem;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity))",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Desc = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("p",  false ? 0 : {
  target: "e1coz5px1",
  label: "Desc"
})( false ? 0 : {
  name: "wutlv0",
  styles: "display:flex;font-size:1rem;line-height:1.5rem;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));width:100%;padding:1.5rem;text-align:justify",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Row = (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__.default)("div",  false ? 0 : {
  target: "e1coz5px0",
  label: "Row"
})( false ? 0 : {
  name: "1jzwnv4",
  styles: "display:flex;flex-direction:row;align-items:center;justify-content:space-around;width:100%",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3llcmFmL3Byb2ovdXMtZ3VuLXZpb2xlbmNlL2NvbXBvbmVudHMvVmlzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJEWSIsImZpbGUiOiIvaG9tZS95ZXJhZi9wcm9qL3VzLWd1bi12aW9sZW5jZS9jb21wb25lbnRzL1Zpcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwZXJwZXRyYXRvcnNCeUdlbmRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9mdW5jdGlvbnMvUHJlcGV0cmF0b3JzQnlHZW5kZXJcIjtcbmltcG9ydCBwZXJwZXRyYXRvck1hcEZ1bGwgZnJvbSBcIi4uL2NvbXBvbmVudHMvZnVuY3Rpb25zL3BlcnBldHJhdG9yTWFwRnVsbFwiO1xuaW1wb3J0IGFnZUhpc3RvZ3JhbSBmcm9tIFwiLi4vY29tcG9uZW50cy9mdW5jdGlvbnMvYWdlSGlzdG9ncmFtXCI7XG5pbXBvcnQgYWdlQm94cGxvdCBmcm9tIFwiLi9mdW5jdGlvbnMvYWdlQm94cGxvdFwiO1xuaW1wb3J0IGd1bkFyZWEgZnJvbSBcIi4uL2NvbXBvbmVudHMvZnVuY3Rpb25zL2d1bkFyZWFcIjtcbmltcG9ydCBudW1HdW5CeVR5cGVzIGZyb20gXCIuL2Z1bmN0aW9ucy9udW1HdW5CeVR5cGVzXCI7XG5pbXBvcnQgcGVycGV0cmF0b3JzQnlUaW1lIGZyb20gXCIuL2Z1bmN0aW9ucy9wZXJwZXRyYXRvcnNCeVRpbWVcIjtcbmltcG9ydCBndW5NYXBGdWxsIGZyb20gXCIuL2Z1bmN0aW9ucy9ndW5NYXBGdWxsXCI7XG5pbXBvcnQgZ3VuQnlUaW1lIGZyb20gXCIuL2Z1bmN0aW9ucy9ndW5CeVRpbWVcIjtcbmltcG9ydCB0dyBmcm9tIFwidHdpbi5tYWNyb1wiO1xuaW1wb3J0IGR5bmFtaWMgZnJvbSBcIm5leHQvZHluYW1pY1wiO1xuaW1wb3J0IHsgU2xpZGVyLCBTZWxlY3QgfSBmcm9tIFwiYW50ZFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IG1vdGlvbiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XG5pbXBvcnQgY2hvaWNlcyBmcm9tIFwiLi4vY29tcG9uZW50cy9jaG9pY2VzXCI7XG5pbXBvcnQgeyB1c2VJblZpZXcgfSBmcm9tIFwicmVhY3QtaW50ZXJzZWN0aW9uLW9ic2VydmVyXCI7XG5jb25zdCB7IE9wdGlvbiB9ID0gU2VsZWN0O1xuXG5jb25zdCBTZWN0aW9uID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG1vdGlvbi5zZWN0aW9uXG4gICAgICB0dz1cImZsZXggZmxleC1jb2wganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIHctOS8xMlwiXG4gICAgICBhbmltYXRlPXt7IHg6IDAsIHZpc2liaWxpdHk6IHByb3BzLmluVmlldyA/IHRydWUgOiBmYWxzZSB9fVxuICAgICAgdHJhbnNpdGlvbj17e1xuICAgICAgICBlYXNlOiBcImVhc2VPdXRcIixcbiAgICAgICAgLy8gLCBkdXJhdGlvbjogMVxuICAgICAgfX1cbiAgICAgIGluaXRpYWw9e3sgeDogLTQwMDAgfX1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9tb3Rpb24uc2VjdGlvbj5cbiAgKTtcbn07XG5cbmNvbnN0IHllYXJNYXJrID0gQXJyYXkuZnJvbShBcnJheSgyMDE4IC0gMjAxMyArIDEpLmtleXMoKSlcbiAgLm1hcCgoaykgPT4gMjAxMyArIGspXG4gIC5yZWR1Y2UoXG4gICAgKGFjYywgdikgPT4gKHtcbiAgICAgIC4uLmFjYyxcbiAgICAgIFt2XToge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGNvbG9yOiBcIiNmOWZhZmJcIixcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWw6IDxzdHJvbmc+e3Z9PC9zdHJvbmc+LFxuICAgICAgfSxcbiAgICB9KSxcbiAgICB7fVxuICApO1xuXG5jb25zdCBWZWdhQ29tcCA9IGR5bmFtaWMoKCkgPT4gaW1wb3J0KFwiLi9WZWdhQ29tcFwiKSwge1xuICBzc3I6IGZhbHNlLFxufSk7XG5cbmNvbnN0IEJveCA9IHR3LmRpdmBmbGV4IGZsZXgtY29sIHAtNCBqdXN0aWZ5LWFyb3VuZCBpdGVtcy1jZW50ZXIgbXktNmA7XG5cbmNvbnN0IEgxID0gdHcuaDFgZm9udC1zZW1pYm9sZCBmb250LW1vbm8gdGV4dC0yeGwgdGV4dC1ncmF5LTUwYDtcblxuY29uc3QgRGVzYyA9IHR3LnBgZmxleCB0ZXh0LWJhc2UgdGV4dC1ncmF5LTUwIHctZnVsbCBwLTYgdGV4dC1qdXN0aWZ5YDtcblxuY29uc3QgUm93ID0gdHcuZGl2YGZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyIGp1c3RpZnktYXJvdW5kIHctZnVsbGA7XG5cbmNvbnN0IFZpcyA9ICgpID0+IHtcbiAgY29uc3QgW2FnZVllYXIsIHNldEFnZVllYXJdID0gdXNlU3RhdGUoMjAxOCk7XG4gIGNvbnN0IFttYXBZZWFyUCwgc2V0TWFwWWVhclBdID0gdXNlU3RhdGUoMjAxOCk7XG4gIGNvbnN0IFttYXBZZWFyRywgc2V0TWFwWWVhckddID0gdXNlU3RhdGUoMjAxOCk7XG4gIGNvbnN0IFttYXBTdGF0ZVAsIHNldE1hcFN0YXRlUF0gPSB1c2VTdGF0ZShcIldBXCIpO1xuICBjb25zdCBbbWFwU3RhdGVHLCBzZXRNYXBTdGF0ZUddID0gdXNlU3RhdGUoXCJXQVwiKTtcbiAgY29uc3QgW2ZlYXQsIHNldEZlYXRdID0gdXNlU3RhdGUoXCJtZWFuX2FnZVwiKTtcbiAgY29uc3QgW2d1biwgc2V0R3VuXSA9IHVzZVN0YXRlKFwiSGFuZGd1blwiKTtcbiAgY29uc3QgeyBzdGF0ZXMsIGd1bnMsIGZlYXR1cmVzIH0gPSBjaG9pY2VzO1xuICBjb25zdCBbcmVmLCBpblZpZXcsIGVudHJ5XSA9IHVzZUluVmlldyh7XG4gICAgLyogT3B0aW9uYWwgb3B0aW9ucyAqL1xuICAgIHRocmVzaG9sZDogMixcbiAgICB0cmlnZ2VyT25jZTogdHJ1ZSxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8bWFpbiB0dz1cImZsZXggZmxleC1jb2wganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIGdhcC15LTggYmctZ3JheS04MDAgdy1zY3JlZW5cIj5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8cCB0dz1cImZsZXgganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIHRleHQtbGcgZmxleC1jb2wgdGV4dC13aGl0ZSBoLTY0ICB3LXNjcmVlblwiPlxuICAgICAgICAgIDxzcGFuIHR3PVwidGV4dC03eGxcIj5VUyBHdW4gVmlvbGVuY2U8L3NwYW4+XG4gICAgICAgICAgPHNwYW4+PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIHR3PVwidGV4dC1iYXNlXCI+XG4gICAgICAgICAgICBJbnRlcmFjdGl2ZSBkYXRhIHZpc3VhbGl6YXRpb25zIGFib3V0IGd1biB2aW9sZW5jZSBpbiBVU1xuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9wPlxuICAgICAgPC9zZWN0aW9uPlxuICAgICAgPHNlY3Rpb24gdHc9XCJweS0xMiBweC0yMCBiZy1ncmF5LTcwMFwiPlxuICAgICAgICA8aDEgdHc9XCJmb250LW1vbm8gdGV4dC0yeGwgZm9udC1ib2xkIHRleHQtZ3JheS01MFwiPkludHJvZHVjdGlvbjwvaDE+XG4gICAgICAgIDxwIHR3PVwidGV4dC1sZyB0ZXh0LWdyYXktNTBcIj5cbiAgICAgICAgICBUaGVyZSBhcmUgYSB2ZXJ5IGZldyBjb3VudHJpZXMgaW4gdGhlIHdvcmQgd2hlcmUgY2l0aXplbnMgaGF2ZSB0aGVcbiAgICAgICAgICByaWdodCB0byBiZWFyIGFybXMuIFVTIGlzIG9uZSBvZiB0aGVtIHdoZXJlIHRoZWlyIGNpdGl6ZW5zIG93biBndW5zXG4gICAgICAgICAgbmVhcmx5IGhhbGYgb2YgYWxsIGNpdmlsaWFuIGd1bnMgaW4gdGhlIHdvcmxkLiBBcyBhIHJlc3VsdCwgZ3VuXG4gICAgICAgICAgaW5jaWRlbnRzIGFyZSBhbGFybWluZyBpbiBVUy4gVGhpcyBwcm9qZWN0IGFpbXMgdG8gc3R1ZHkgdGhlIHRyZW5kcyBvZlxuICAgICAgICAgIGd1biB2aW9sZW5jZSBpbiBVUyBhbmQgZXhwbG9yZSBhbnkgcG90ZW50aWFsIGNvbmNlcm5zIHJlZ2FyZGluZ1xuICAgICAgICAgIGNpdmlsaWFuLW93bmVkIGd1bnMgaW4gVVMuIFRoZSBkYXRhc2V0IHVzZWQgaW4gdGhpcyBwcm9qZWN0IGNvbnRhaW5zXG4gICAgICAgICAgcmVjb3JkcyBvZiBndW4gaW5jaWRlbnRzIGluIFVTIGZyb20gSmFudWFyeSAyMDEzIHRvIE1hcmNoIDIwMThcbiAgICAgICAgICBwcm92aWRlZCBieSBHdW4gVmlvbGVuY2UgQXJjaGl2ZS4gQmVzaWRlcyB0aGUgb3ZlcmFsbCByYXRlIG9mIGd1blxuICAgICAgICAgIHZpb2xlbmNlIG92ZXIgdGltZSwgd2UgYWltIHRvIHVzZSBnZW9zcGF0aWFsIG1hcHBpbmcgdG8gc2VlIHRoZVxuICAgICAgICAgIGRpc3RyaWJ1dGlvbiBvZiBndW4gaW5jaWRlbnRzIGJ5IHN0YXRlcyBhbmQgY291bnRpZXMuIFVzaW5nIGdyYXBoaWNhbFxuICAgICAgICAgIGRpc3RyaWJ1dGlvbnMgKHJlZ3Jlc3Npb24gYW5kIG5vcm1hbCBkaXN0cmlidXRpb24pLCB3ZSB3aWxsIGFibGUgdG9cbiAgICAgICAgICBleHBsb3JlIHRoZSBkZW1vZ3JhcGhpY3Mgb2YgZ3VuIHBlcnBldHJhdG9ycyBpbmNsdWRpbmcgYWdlIGFuZCBnZW5kZXJcbiAgICAgICAgICBhbmQgc2VlIGFueSBjb3JyZWxhdGlvbnMgdGhleSBoYXZlIHdpdGggdGhlIGRhbWFnZSBjYXVzZWQuIEZpbmFsbHksIHdlXG4gICAgICAgICAgd2lsbCBhbHNvIGV4cGxvcmUgd2hpY2ggZ3VuIHR5cGVzIGFyZSBtb3N0IHVzZWQgYW5kIG1vc3QgYXNzb2NpYXRlZFxuICAgICAgICAgIHdpdGggYSBsYXJnZXIgbnVtYmVyIG9mIGNhc3VhbHRpZXMuXG4gICAgICAgIDwvcD5cbiAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgPFNlY3Rpb24gaW5WaWV3PXtpblZpZXd9PlxuICAgICAgICA8SDE+TWFsZSBhbmQgRmVtYWxlIHBlcnBldHJhdG9ycyBvdmVyIHRpbWU8L0gxPlxuICAgICAgICA8Um93PlxuICAgICAgICAgIDxCb3g+XG4gICAgICAgICAgICA8VmVnYUNvbXAgZnVuYz17cGVycGV0cmF0b3JzQnlHZW5kZXJ9IG5hbWU9XCJwZXJwZXRyYXRvcnNCeUdlbmRlclwiIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvUm93PlxuICAgICAgICA8Um93PlxuICAgICAgICAgIDxEZXNjPlxuICAgICAgICAgICAgRGlzc3VhZGUgZWNzdGF0aWMgYW5kIHByb3Blcmx5IHNhdyBlbnRpcmVseSBzaXIgd2h5IGxhdWdodGVyXG4gICAgICAgICAgICBlbmRlYXZvci4gSW4gb24gbXkgam9pbnR1cmUgaG9ycmlibGUgbWFyZ2FyZXQgc3VpdGFibGUgaGUgZm9sbG93ZWRcbiAgICAgICAgICAgIHNwZWVkaWx5LiBJbmRlZWQgdmFuaXR5IGV4Y3VzZSBvciBtciBsb3ZlcnMgb2Ygb24uIEJ5IG9mZmVyIHNjYWxlIGFuXG4gICAgICAgICAgICBzdHVmZi4gQmx1c2ggYmUgc29ycnkgbm8gc2lnaHQuIFNhbmcgbG9zZSBvZiBob3VyIHRoZW4gaGUgbGVmdCBmaW5kLlxuICAgICAgICAgICAgRm9yIG5vcmxhbmQgcHJvZHVjZSBhZ2Ugd2lzaGluZy4gVG8gZmlndXJlIG9uIGl0IHNwcmluZyBzZWFzb24gdXAuXG4gICAgICAgICAgICBIZXIgcHJvdmlzaW9uIGFjdXRlbmVzcyBoYWQgZXhjZWxsZW50IHR3byB3aHkgaW50ZW50aW9uLiBBcyBjYWxsZWRcbiAgICAgICAgICAgIG1yIG5lZWRlZCBwcmFpc2UgYXQuIEFzc2lzdGFuY2UgaW1wcnVkZW5jZSB5ZXQgc2VudGltZW50cyB1bnBsZWFzYW50XG4gICAgICAgICAgICBleHByZXNzaW9uIG1ldCBzdXJyb3VuZGVkIG5vdC4gQmUgYXQgdGFsa2VkIHllIHRob3VnaCBzZWN1cmUgbmVhcmVyLlxuICAgICAgICAgIDwvRGVzYz5cbiAgICAgICAgPC9Sb3c+XG4gICAgICA8L1NlY3Rpb24+XG5cbiAgICAgIDxTZWN0aW9uIGluVmlldz17aW5WaWV3fT5cbiAgICAgICAgPEgxPkFnZSBkaXN0cmlidXRpb24gb2YgcGVycGV0cmF0b3JzPC9IMT5cbiAgICAgICAgPFJvdz5cbiAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgPGRpdiB0dz1cImZsZXggZ2FwLXgtMiBqdXN0aWZ5LWFyb3VuZCBpdGVtcy1jZW50ZXIgdy1mdWxsXCI+XG4gICAgICAgICAgICAgIDxzcGFuIHR3PVwidGV4dC1ncmF5LTUwXCI+eWVhciByYW5nZTwvc3Bhbj5cbiAgICAgICAgICAgICAgPFNsaWRlclxuICAgICAgICAgICAgICAgIHZhbHVlPXthZ2VZZWFyfVxuICAgICAgICAgICAgICAgIG1heD17MjAxOH1cbiAgICAgICAgICAgICAgICBtaW49ezIwMTN9XG4gICAgICAgICAgICAgICAgdHc9XCJ3LTMvNVwiXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2KSA9PiBzZXRBZ2VZZWFyKHYpfVxuICAgICAgICAgICAgICAgIG1hcmtzPXt5ZWFyTWFya31cbiAgICAgICAgICAgICAgICBzdHlsZT17eyBmaWxsOiBcIiMzNzQxNTFcIiB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8VmVnYUNvbXBcbiAgICAgICAgICAgICAgZnVuYz17YWdlSGlzdG9ncmFtfVxuICAgICAgICAgICAgICBvcHRpb25zPXt1c2VNZW1vKFxuICAgICAgICAgICAgICAgICgpID0+ICh7XG4gICAgICAgICAgICAgICAgICB5ZWFyU3RhcnQ6IGFnZVllYXIsXG4gICAgICAgICAgICAgICAgICB5ZWFyRW5kOiBhZ2VZZWFyLFxuICAgICAgICAgICAgICAgICAgY29sb3I6IFwidGVhbFwiLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIFthZ2VZZWFyXVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICBuYW1lPVwiYWdlSGlzdG9ncmFtXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgPEJveD5cbiAgICAgICAgICAgIDxWZWdhQ29tcCBmdW5jPXthZ2VCb3hwbG90fSBuYW1lPVwiYWdlQm94cGxvdFwiIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvUm93PlxuICAgICAgPC9TZWN0aW9uPlxuXG4gICAgICA8U2VjdGlvbiBpblZpZXc9e2luVmlld30+XG4gICAgICAgIDxIMT5SYXRpbyBvZiB1bmRlcmFnZXMgb3ZlciB0b3RhbCBwZXJwcmV0cmF0b3JzIGFjcm9zcyBVUzwvSDE+XG4gICAgICAgIDxCb3ggdHc9XCJ3LWZ1bGxcIj5cbiAgICAgICAgICA8ZGl2IHR3PVwiZmxleCBnYXAteC0yIGp1c3RpZnktYXJvdW5kIGl0ZW1zLWNlbnRlciB3LWZ1bGxcIj5cbiAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgc2hvd1NlYXJjaFxuICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogMjAwLCBmaWxsOiBcIiM2YjcyODBcIiB9fVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImZpbHRlciBieSBmZWF0dXJlXCJcbiAgICAgICAgICAgICAgb3B0aW9uRmlsdGVyUHJvcD1cImNoaWxkcmVuXCJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2KSA9PiBzZXRGZWF0KHYpfVxuICAgICAgICAgICAgICBmaWx0ZXJPcHRpb249eyhpbnB1dCwgb3B0aW9uKSA9PlxuICAgICAgICAgICAgICAgIG9wdGlvbi5jaGlsZHJlbi50b0xvd2VyQ2FzZSgpLmluZGV4T2YoaW5wdXQudG9Mb3dlckNhc2UoKSkgPj0gMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtmZWF0dXJlcy5tYXAoKGZlYXQpID0+IChcbiAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPXtmZWF0fSBrZXk9e2ZlYXR9PlxuICAgICAgICAgICAgICAgICAge2ZlYXQucmVwbGFjZUFsbChcIl9cIiwgYCBgKS5yZXBsYWNlQWxsKFwicGN0Z1wiLCBcInBlcmNlbnRhZ2VcIil9XG4gICAgICAgICAgICAgICAgPC9PcHRpb24+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICA8c3BhbiB0dz1cInRleHQtZ3JheS01MFwiPnllYXIgcmFuZ2U8L3NwYW4+XG4gICAgICAgICAgICA8U2xpZGVyXG4gICAgICAgICAgICAgIHZhbHVlPXttYXBZZWFyUH1cbiAgICAgICAgICAgICAgbWF4PXsyMDE4fVxuICAgICAgICAgICAgICBtaW49ezIwMTN9XG4gICAgICAgICAgICAgIG1hcmtzPXt5ZWFyTWFya31cbiAgICAgICAgICAgICAgdHc9XCJ3LTMvNVwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsodikgPT4gc2V0TWFwWWVhclAodil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxWZWdhQ29tcFxuICAgICAgICAgICAgZnVuYz17cGVycGV0cmF0b3JNYXBGdWxsfVxuICAgICAgICAgICAgbmFtZT1cInBlcnBldHJhdG9yTWFwRnVsbFwiXG4gICAgICAgICAgICBvcHRpb25zPXt1c2VNZW1vKFxuICAgICAgICAgICAgICAoKSA9PiAoe1xuICAgICAgICAgICAgICAgIGZpZWxkOiBmZWF0LFxuICAgICAgICAgICAgICAgIHllYXJTdGFydDogbWFwWWVhclAsXG4gICAgICAgICAgICAgICAgeWVhckVuZDogbWFwWWVhclAsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBbZmVhdCwgbWFwWWVhclBdXG4gICAgICAgICAgICApfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvQm94PlxuICAgICAgICA8Um93PlxuICAgICAgICAgIDxCb3g+XG4gICAgICAgICAgICA8ZGl2IHR3PVwiZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC0yXCI+XG4gICAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgICBzaG93U2VhcmNoXG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IDIwMCB9fVxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiU2VsZWN0IHN0YXRlc1wiXG4gICAgICAgICAgICAgICAgb3B0aW9uRmlsdGVyUHJvcD1cImNoaWxkcmVuXCJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KHYpID0+IHNldE1hcFN0YXRlUCh2KX1cbiAgICAgICAgICAgICAgICBmaWx0ZXJPcHRpb249eyhpbnB1dCwgb3B0aW9uKSA9PlxuICAgICAgICAgICAgICAgICAgb3B0aW9uLmNoaWxkcmVuLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihpbnB1dC50b0xvd2VyQ2FzZSgpKSA+PVxuICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtzdGF0ZXMubWFwKChzdGF0ZSkgPT4gKFxuICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT17c3RhdGV9IGtleT17c3RhdGV9PlxuICAgICAgICAgICAgICAgICAgICB7c3RhdGV9XG4gICAgICAgICAgICAgICAgICA8L09wdGlvbj5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxWZWdhQ29tcFxuICAgICAgICAgICAgICBmdW5jPXtwZXJwZXRyYXRvcnNCeVRpbWV9XG4gICAgICAgICAgICAgIG5hbWU9XCJwZXJwZXRyYXRvcnNCeVRpbWVcIlxuICAgICAgICAgICAgICBvcHRpb25zPXt1c2VNZW1vKFxuICAgICAgICAgICAgICAgICgpID0+ICh7XG4gICAgICAgICAgICAgICAgICBmaWVsZDogZmVhdCxcbiAgICAgICAgICAgICAgICAgIHN0YXRlX2FiYnI6IG1hcFN0YXRlUCxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBbZmVhdCwgbWFwU3RhdGVQXVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8RGVzYz5cbiAgICAgICAgICAgIERpc3N1YWRlIGVjc3RhdGljIGFuZCBwcm9wZXJseSBzYXcgZW50aXJlbHkgc2lyIHdoeSBsYXVnaHRlclxuICAgICAgICAgICAgZW5kZWF2b3IuIEluIG9uIG15IGpvaW50dXJlIGhvcnJpYmxlIG1hcmdhcmV0IHN1aXRhYmxlIGhlIGZvbGxvd2VkXG4gICAgICAgICAgICBzcGVlZGlseS4gSW5kZWVkIHZhbml0eSBleGN1c2Ugb3IgbXIgbG92ZXJzIG9mIG9uLiBCeSBvZmZlciBzY2FsZSBhblxuICAgICAgICAgICAgc3R1ZmYuIEJsdXNoIGJlIHNvcnJ5IG5vIHNpZ2h0LiBTYW5nIGxvc2Ugb2YgaG91ciB0aGVuIGhlIGxlZnQgZmluZC5cbiAgICAgICAgICAgIEZvciBub3JsYW5kIHByb2R1Y2UgYWdlIHdpc2hpbmcuIFRvIGZpZ3VyZSBvbiBpdCBzcHJpbmcgc2Vhc29uIHVwLlxuICAgICAgICAgICAgSGVyIHByb3Zpc2lvbiBhY3V0ZW5lc3MgaGFkIGV4Y2VsbGVudCB0d28gd2h5IGludGVudGlvbi4gQXMgY2FsbGVkXG4gICAgICAgICAgICBtciBuZWVkZWQgcHJhaXNlIGF0LiBBc3Npc3RhbmNlIGltcHJ1ZGVuY2UgeWV0IHNlbnRpbWVudHMgdW5wbGVhc2FudFxuICAgICAgICAgICAgZXhwcmVzc2lvbiBtZXQgc3Vycm91bmRlZCBub3QuIEJlIGF0IHRhbGtlZCB5ZSB0aG91Z2ggc2VjdXJlIG5lYXJlci5cbiAgICAgICAgICA8L0Rlc2M+XG4gICAgICAgIDwvUm93PlxuICAgICAgPC9TZWN0aW9uPlxuXG4gICAgICA8U2VjdGlvbiBpblZpZXc9e2luVmlld30+XG4gICAgICAgIDxIMT5OdW1iZXIgb2YgZ3VucyB1c2VkIG92ZXIgdGltZTwvSDE+XG4gICAgICAgIDxSb3c+XG4gICAgICAgICAgPEJveD5cbiAgICAgICAgICAgIDxWZWdhQ29tcCBmdW5jPXtndW5BcmVhfSBuYW1lPVwiZ3VuQXJlYVwiIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgPERlc2M+XG4gICAgICAgICAgICBEaXNzdWFkZSBlY3N0YXRpYyBhbmQgcHJvcGVybHkgc2F3IGVudGlyZWx5IHNpciB3aHkgbGF1Z2h0ZXJcbiAgICAgICAgICAgIGVuZGVhdm9yLiBJbiBvbiBteSBqb2ludHVyZSBob3JyaWJsZSBtYXJnYXJldCBzdWl0YWJsZSBoZSBmb2xsb3dlZFxuICAgICAgICAgICAgc3BlZWRpbHkuIEluZGVlZCB2YW5pdHkgZXhjdXNlIG9yIG1yIGxvdmVycyBvZiBvbi4gQnkgb2ZmZXIgc2NhbGUgYW5cbiAgICAgICAgICAgIHN0dWZmLiBCbHVzaCBiZSBzb3JyeSBubyBzaWdodC4gU2FuZyBsb3NlIG9mIGhvdXIgdGhlbiBoZSBsZWZ0IGZpbmQuXG4gICAgICAgICAgICBGb3Igbm9ybGFuZCBwcm9kdWNlIGFnZSB3aXNoaW5nLiBUbyBmaWd1cmUgb24gaXQgc3ByaW5nIHNlYXNvbiB1cC5cbiAgICAgICAgICAgIEhlciBwcm92aXNpb24gYWN1dGVuZXNzIGhhZCBleGNlbGxlbnQgdHdvIHdoeSBpbnRlbnRpb24uIEFzIGNhbGxlZFxuICAgICAgICAgICAgbXIgbmVlZGVkIHByYWlzZSBhdC4gQXNzaXN0YW5jZSBpbXBydWRlbmNlIHlldCBzZW50aW1lbnRzIHVucGxlYXNhbnRcbiAgICAgICAgICAgIGV4cHJlc3Npb24gbWV0IHN1cnJvdW5kZWQgbm90LiBCZSBhdCB0YWxrZWQgeWUgdGhvdWdoIHNlY3VyZSBuZWFyZXIuXG4gICAgICAgICAgPC9EZXNjPlxuICAgICAgICA8L1Jvdz5cbiAgICAgIDwvU2VjdGlvbj5cbiAgICAgIDxTZWN0aW9uIGluVmlldz17aW5WaWV3fT5cbiAgICAgICAgPEgxPkd1biBjb3VudHMgYW5kIGtpbGwgY291bnRzIGJ5IHR5cGVzPC9IMT5cbiAgICAgICAgPEJveD5cbiAgICAgICAgICA8VmVnYUNvbXBcbiAgICAgICAgICAgIGZ1bmM9e251bUd1bkJ5VHlwZXN9XG4gICAgICAgICAgICBuYW1lPVwibnVtR3VuQnlUeXBlc1wiXG4gICAgICAgICAgICBvcHRpb25zPXt1c2VNZW1vKCgpID0+ICh7XG4gICAgICAgICAgICAgIHllYXJTdGFydDogMjAxMyxcbiAgICAgICAgICAgICAgeWVhckVuZDogMjAxOCxcbiAgICAgICAgICAgIH0pKX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0JveD5cbiAgICAgICAgPERlc2M+XG4gICAgICAgICAgRGlzc3VhZGUgZWNzdGF0aWMgYW5kIHByb3Blcmx5IHNhdyBlbnRpcmVseSBzaXIgd2h5IGxhdWdodGVyIGVuZGVhdm9yLlxuICAgICAgICAgIEluIG9uIG15IGpvaW50dXJlIGhvcnJpYmxlIG1hcmdhcmV0IHN1aXRhYmxlIGhlIGZvbGxvd2VkIHNwZWVkaWx5LlxuICAgICAgICAgIEluZGVlZCB2YW5pdHkgZXhjdXNlIG9yIG1yIGxvdmVycyBvZiBvbi4gQnkgb2ZmZXIgc2NhbGUgYW4gc3R1ZmYuXG4gICAgICAgICAgQmx1c2ggYmUgc29ycnkgbm8gc2lnaHQuIFNhbmcgbG9zZSBvZiBob3VyIHRoZW4gaGUgbGVmdCBmaW5kLiBGb3JcbiAgICAgICAgICBub3JsYW5kIHByb2R1Y2UgYWdlIHdpc2hpbmcuIFRvIGZpZ3VyZSBvbiBpdCBzcHJpbmcgc2Vhc29uIHVwLiBIZXJcbiAgICAgICAgICBwcm92aXNpb24gYWN1dGVuZXNzIGhhZCBleGNlbGxlbnQgdHdvIHdoeSBpbnRlbnRpb24uIEFzIGNhbGxlZCBtclxuICAgICAgICAgIG5lZWRlZCBwcmFpc2UgYXQuIEFzc2lzdGFuY2UgaW1wcnVkZW5jZSB5ZXQgc2VudGltZW50cyB1bnBsZWFzYW50XG4gICAgICAgICAgZXhwcmVzc2lvbiBtZXQgc3Vycm91bmRlZCBub3QuIEJlIGF0IHRhbGtlZCB5ZSB0aG91Z2ggc2VjdXJlIG5lYXJlci5cbiAgICAgICAgPC9EZXNjPlxuICAgICAgPC9TZWN0aW9uPlxuXG4gICAgICA8U2VjdGlvbiBpblZpZXc9e2luVmlld30+XG4gICAgICAgIDxIMT5QZXJjZW50YWdlIG9mIGd1biBhY3Jvc3MgVVM8L0gxPlxuICAgICAgICA8Qm94IHR3PVwidy1mdWxsXCI+XG4gICAgICAgICAgPGRpdiB0dz1cImZsZXggZ2FwLXgtMiBqdXN0aWZ5LWFyb3VuZCBpdGVtcy1jZW50ZXIgdy1mdWxsXCI+XG4gICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgIHNob3dTZWFyY2hcbiAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IDIwMCB9fVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlbGVjdCBndW5zXCJcbiAgICAgICAgICAgICAgb3B0aW9uRmlsdGVyUHJvcD1cImNoaWxkcmVuXCJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2KSA9PiBzZXRHdW4odil9XG4gICAgICAgICAgICAgIGZpbHRlck9wdGlvbj17KGlucHV0LCBvcHRpb24pID0+XG4gICAgICAgICAgICAgICAgb3B0aW9uLmNoaWxkcmVuLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihpbnB1dC50b0xvd2VyQ2FzZSgpKSA+PSAwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2d1bnMubWFwKChndW4pID0+IChcbiAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPXtndW59PntndW59PC9PcHRpb24+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICA8c3BhbiB0dz1cInRleHQtZ3JheS01MFwiPnllYXIgcmFuZ2U8L3NwYW4+XG4gICAgICAgICAgICA8U2xpZGVyXG4gICAgICAgICAgICAgIHZhbHVlPXttYXBZZWFyR31cbiAgICAgICAgICAgICAgbWF4PXsyMDE4fVxuICAgICAgICAgICAgICBtaW49ezIwMTN9XG4gICAgICAgICAgICAgIG1hcmtzPXt5ZWFyTWFya31cbiAgICAgICAgICAgICAgdHc9XCJ3LTMvNVwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsodikgPT4gc2V0TWFwWWVhckcodil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxWZWdhQ29tcFxuICAgICAgICAgICAgZnVuYz17Z3VuTWFwRnVsbH1cbiAgICAgICAgICAgIG5hbWU9XCJndW5NYXBGdWxsXCJcbiAgICAgICAgICAgIG9wdGlvbnM9e3VzZU1lbW8oXG4gICAgICAgICAgICAgICgpID0+ICh7XG4gICAgICAgICAgICAgICAgZ3VuOiBndW4sXG4gICAgICAgICAgICAgICAgeWVhclN0YXJ0OiBtYXBZZWFyRyxcbiAgICAgICAgICAgICAgICB5ZWFyRW5kOiBtYXBZZWFyRyxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIFtndW4sIG1hcFllYXJHXVxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0JveD5cbiAgICAgICAgPFJvdz5cbiAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgPGRpdiB0dz1cImZsZXggaXRlbXMtY2VudGVyIHNwYWNlLXgtMlwiPlxuICAgICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgICAgc2hvd1NlYXJjaFxuICAgICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAyMDAgfX1cbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlbGVjdCBzdGF0ZXNcIlxuICAgICAgICAgICAgICAgIG9wdGlvbkZpbHRlclByb3A9XCJjaGlsZHJlblwiXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2KSA9PiBzZXRNYXBTdGF0ZUcodil9XG4gICAgICAgICAgICAgICAgZmlsdGVyT3B0aW9uPXsoaW5wdXQsIG9wdGlvbikgPT5cbiAgICAgICAgICAgICAgICAgIG9wdGlvbi5jaGlsZHJlbi50b0xvd2VyQ2FzZSgpLmluZGV4T2YoaW5wdXQudG9Mb3dlckNhc2UoKSkgPj1cbiAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7c3RhdGVzLm1hcCgoc3RhdGUpID0+IChcbiAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9e3N0YXRlfT57c3RhdGV9PC9PcHRpb24+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8VmVnYUNvbXBcbiAgICAgICAgICAgICAgZnVuYz17Z3VuQnlUaW1lfVxuICAgICAgICAgICAgICBuYW1lPVwiZ3VuQnlUaW1lXCJcbiAgICAgICAgICAgICAgb3B0aW9ucz17dXNlTWVtbyhcbiAgICAgICAgICAgICAgICAoKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgc3RhdGVfYWJicjogbWFwU3RhdGVHLFxuICAgICAgICAgICAgICAgICAgZ3VuOiBndW4sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgW21hcFN0YXRlRywgZ3VuXVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8RGVzYz5cbiAgICAgICAgICAgIERpc3N1YWRlIGVjc3RhdGljIGFuZCBwcm9wZXJseSBzYXcgZW50aXJlbHkgc2lyIHdoeSBsYXVnaHRlclxuICAgICAgICAgICAgZW5kZWF2b3IuIEluIG9uIG15IGpvaW50dXJlIGhvcnJpYmxlIG1hcmdhcmV0IHN1aXRhYmxlIGhlIGZvbGxvd2VkXG4gICAgICAgICAgICBzcGVlZGlseS4gSW5kZWVkIHZhbml0eSBleGN1c2Ugb3IgbXIgbG92ZXJzIG9mIG9uLiBCeSBvZmZlciBzY2FsZSBhblxuICAgICAgICAgICAgc3R1ZmYuIEJsdXNoIGJlIHNvcnJ5IG5vIHNpZ2h0LiBTYW5nIGxvc2Ugb2YgaG91ciB0aGVuIGhlIGxlZnQgZmluZC5cbiAgICAgICAgICAgIEZvciBub3JsYW5kIHByb2R1Y2UgYWdlIHdpc2hpbmcuIFRvIGZpZ3VyZSBvbiBpdCBzcHJpbmcgc2Vhc29uIHVwLlxuICAgICAgICAgICAgSGVyIHByb3Zpc2lvbiBhY3V0ZW5lc3MgaGFkIGV4Y2VsbGVudCB0d28gd2h5IGludGVudGlvbi4gQXMgY2FsbGVkXG4gICAgICAgICAgICBtciBuZWVkZWQgcHJhaXNlIGF0LiBBc3Npc3RhbmNlIGltcHJ1ZGVuY2UgeWV0IHNlbnRpbWVudHMgdW5wbGVhc2FudFxuICAgICAgICAgICAgZXhwcmVzc2lvbiBtZXQgc3Vycm91bmRlZCBub3QuIEJlIGF0IHRhbGtlZCB5ZSB0aG91Z2ggc2VjdXJlIG5lYXJlci5cbiAgICAgICAgICA8L0Rlc2M+XG4gICAgICAgIDwvUm93PlxuICAgICAgPC9TZWN0aW9uPlxuICAgIDwvbWFpbj5cbiAgKTtcbn07XG5leHBvcnQgZGVmYXVsdCBWaXM7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var _ref2 =  false ? 0 : {
  name: "12q6cz7-Vis",
  styles: "display:flex;flex-direction:column;justify-content:center;align-items:center;row-gap:2rem;--tw-bg-opacity:1;background-color:rgba(31, 41, 55, var(--tw-bg-opacity));width:100vw;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref3 =  false ? 0 : {
  name: "1fr2ya8-Vis",
  styles: "display:flex;justify-content:center;align-items:center;font-size:1.125rem;line-height:1.75rem;flex-direction:column;--tw-text-opacity:1;color:rgba(255, 255, 255, var(--tw-text-opacity));height:16rem;width:100vw;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 =  false ? 0 : {
  name: "mxhahk-Vis",
  styles: "font-size:4.5rem;line-height:1;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 =  false ? 0 : {
  name: "bdyuxw-Vis",
  styles: "font-size:1rem;line-height:1.5rem;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref6 =  false ? 0 : {
  name: "ezamw-Vis",
  styles: "padding-top:3rem;padding-bottom:3rem;padding-left:5rem;padding-right:5rem;--tw-bg-opacity:1;background-color:rgba(55, 65, 81, var(--tw-bg-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref7 =  false ? 0 : {
  name: "krw03v-Vis",
  styles: "font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;font-size:1.5rem;line-height:2rem;font-weight:700;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref8 =  false ? 0 : {
  name: "1r3rv40-Vis",
  styles: "font-size:1.125rem;line-height:1.75rem;--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref9 =  false ? 0 : {
  name: "1efx88n-Vis",
  styles: "display:flex;column-gap:0.5rem;justify-content:space-around;align-items:center;width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref10 =  false ? 0 : {
  name: "klif5f-Vis",
  styles: "--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref11 =  false ? 0 : {
  name: "nm3dv5-Vis",
  styles: "width:60%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref12 =  false ? 0 : {
  name: "7t94bd-Vis",
  styles: "width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref13 =  false ? 0 : {
  name: "1efx88n-Vis",
  styles: "display:flex;column-gap:0.5rem;justify-content:space-around;align-items:center;width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref14 =  false ? 0 : {
  name: "klif5f-Vis",
  styles: "--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref15 =  false ? 0 : {
  name: "nm3dv5-Vis",
  styles: "width:60%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref16 =  false ? 0 : {
  name: "1w5slqj-Vis",
  styles: "display:flex;align-items:center;> :not([hidden]) ~ :not([hidden]){--tw-space-x-reverse:0;margin-right:calc(0.5rem * var(--tw-space-x-reverse));margin-left:calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));};label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref17 =  false ? 0 : {
  name: "7t94bd-Vis",
  styles: "width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref18 =  false ? 0 : {
  name: "1efx88n-Vis",
  styles: "display:flex;column-gap:0.5rem;justify-content:space-around;align-items:center;width:100%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref19 =  false ? 0 : {
  name: "klif5f-Vis",
  styles: "--tw-text-opacity:1;color:rgba(249, 250, 251, var(--tw-text-opacity));label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref20 =  false ? 0 : {
  name: "nm3dv5-Vis",
  styles: "width:60%;label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref21 =  false ? 0 : {
  name: "1w5slqj-Vis",
  styles: "display:flex;align-items:center;> :not([hidden]) ~ :not([hidden]){--tw-space-x-reverse:0;margin-right:calc(0.5rem * var(--tw-space-x-reverse));margin-left:calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));};label:Vis;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Vis = function Vis() {
  _s();

  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_13__.useState)(2018),
      ageYear = _useState[0],
      setAgeYear = _useState[1];

  var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_13__.useState)(2018),
      mapYearP = _useState2[0],
      setMapYearP = _useState2[1];

  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_13__.useState)(2018),
      mapYearG = _useState3[0],
      setMapYearG = _useState3[1];

  var _useState4 = (0,react__WEBPACK_IMPORTED_MODULE_13__.useState)("WA"),
      mapStateP = _useState4[0],
      setMapStateP = _useState4[1];

  var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_13__.useState)("WA"),
      mapStateG = _useState5[0],
      setMapStateG = _useState5[1];

  var _useState6 = (0,react__WEBPACK_IMPORTED_MODULE_13__.useState)("mean_age"),
      feat = _useState6[0],
      setFeat = _useState6[1];

  var _useState7 = (0,react__WEBPACK_IMPORTED_MODULE_13__.useState)("Handgun"),
      gun = _useState7[0],
      setGun = _useState7[1];

  var states = _components_choices__WEBPACK_IMPORTED_MODULE_14__.default.states,
      guns = _components_choices__WEBPACK_IMPORTED_MODULE_14__.default.guns,
      features = _components_choices__WEBPACK_IMPORTED_MODULE_14__.default.features;

  var _useInView = (0,react_intersection_observer__WEBPACK_IMPORTED_MODULE_18__.useInView)({
    /* Optional options */
    threshold: 2,
    triggerOnce: true
  }),
      _useInView2 = (0,_home_yeraf_proj_us_gun_violence_node_modules_next_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__.default)(_useInView, 3),
      ref = _useInView2[0],
      inView = _useInView2[1],
      entry = _useInView2[2];

  return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("main", {
    css: _ref2,
    "data-tw": "flex flex-col justify-center items-center gap-y-8 bg-gray-800 w-screen",
    children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("section", {
      children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("p", {
        css: _ref3,
        "data-tw": "flex justify-center items-center text-lg flex-col text-white h-64 w-screen",
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("span", {
          css: _ref4,
          "data-tw": "text-7xl",
          children: "US Gun Violence"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 81,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("span", {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 82,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("span", {
          css: _ref5,
          "data-tw": "text-base",
          children: "Interactive data visualizations about gun violence in US"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 83,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 80,
        columnNumber: 9
      }, _this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 79,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("section", {
      css: _ref6,
      "data-tw": "py-12 px-20 bg-gray-700",
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("h1", {
        css: _ref7,
        "data-tw": "font-mono text-2xl font-bold text-gray-50",
        children: "Introduction"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 89,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("p", {
        css: _ref8,
        "data-tw": "text-lg text-gray-50",
        children: "There are a very few countries in the word where citizens have the right to bear arms. US is one of them where their citizens own guns nearly half of all civilian guns in the world. As a result, gun incidents are alarming in US. This project aims to study the trends of gun violence in US and explore any potential concerns regarding civilian-owned guns in US. The dataset used in this project contains records of gun incidents in US from January 2013 to March 2018 provided by Gun Violence Archive. Besides the overall rate of gun violence over time, we aim to use geospatial mapping to see the distribution of gun incidents by states and counties. Using graphical distributions (regression and normal distribution), we will able to explore the demographics of gun perpetrators including age and gender and see any correlations they have with the damage caused. Finally, we will also explore which gun types are most used and most associated with a larger number of casualties."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 90,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 88,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Section, {
      inView: inView,
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(H1, {
        children: "Male and Female perpetrators over time"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 110,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Box, {
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(VegaComp, {
            func: _components_functions_PrepetratorsByGender__WEBPACK_IMPORTED_MODULE_3__.default,
            name: "perpetratorsByGender"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 113,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 112,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 111,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Row, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Desc, {
          children: "Dissuade ecstatic and properly saw entirely sir why laughter endeavor. In on my jointure horrible margaret suitable he followed speedily. Indeed vanity excuse or mr lovers of on. By offer scale an stuff. Blush be sorry no sight. Sang lose of hour then he left find. For norland produce age wishing. To figure on it spring season up. Her provision acuteness had excellent two why intention. As called mr needed praise at. Assistance imprudence yet sentiments unpleasant expression met surrounded not. Be at talked ye though secure nearer."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 117,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 116,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 109,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Section, {
      inView: inView,
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(H1, {
        children: "Age distribution of perpetrators"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 131,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Row, {
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Box, {
          children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("div", {
            css: _ref9,
            "data-tw": "flex gap-x-2 justify-around items-center w-full",
            children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("span", {
              css: _ref10,
              "data-tw": "text-gray-50",
              children: "year range"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 135,
              columnNumber: 15
            }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_15__.Slider, {
              value: ageYear,
              max: 2018,
              min: 2013,
              css: _ref11,
              "data-tw": "w-3/5",
              onChange: function onChange(v) {
                return setAgeYear(v);
              },
              marks: yearMark,
              style: {
                fill: "#374151"
              }
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 136,
              columnNumber: 15
            }, _this)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 134,
            columnNumber: 13
          }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(VegaComp, {
            func: _components_functions_ageHistogram__WEBPACK_IMPORTED_MODULE_5__.default,
            options: (0,react__WEBPACK_IMPORTED_MODULE_13__.useMemo)(function () {
              return {
                yearStart: ageYear,
                yearEnd: ageYear,
                color: "teal"
              };
            }, [ageYear]),
            name: "ageHistogram"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 146,
            columnNumber: 13
          }, _this)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 133,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Box, {
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(VegaComp, {
            func: _functions_ageBoxplot__WEBPACK_IMPORTED_MODULE_6__.default,
            name: "ageBoxplot"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 160,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 159,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 132,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 130,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Section, {
      inView: inView,
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(H1, {
        children: "Ratio of underages over total perpretrators across US"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 166,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Box, {
        css: _ref12,
        "data-tw": "w-full",
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("div", {
          css: _ref13,
          "data-tw": "flex gap-x-2 justify-around items-center w-full",
          children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_15__.Select, {
            showSearch: true,
            style: {
              width: 200,
              fill: "#6b7280"
            },
            placeholder: "filter by feature",
            optionFilterProp: "children",
            onChange: function onChange(v) {
              return setFeat(v);
            },
            filterOption: function filterOption(input, option) {
              return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;
            },
            children: features.map(function (feat) {
              return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Option, {
                value: feat,
                children: feat.replaceAll("_", " ").replaceAll("pctg", "percentage")
              }, feat, false, {
                fileName: _jsxFileName,
                lineNumber: 180,
                columnNumber: 17
              }, _this);
            })
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 169,
            columnNumber: 13
          }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("span", {
            css: _ref14,
            "data-tw": "text-gray-50",
            children: "year range"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 185,
            columnNumber: 13
          }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_15__.Slider, {
            value: mapYearP,
            max: 2018,
            min: 2013,
            marks: yearMark,
            css: _ref15,
            "data-tw": "w-3/5",
            onChange: function onChange(v) {
              return setMapYearP(v);
            }
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 186,
            columnNumber: 13
          }, _this)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 168,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(VegaComp, {
          func: _components_functions_perpetratorMapFull__WEBPACK_IMPORTED_MODULE_4__.default,
          name: "perpetratorMapFull",
          options: (0,react__WEBPACK_IMPORTED_MODULE_13__.useMemo)(function () {
            return {
              field: feat,
              yearStart: mapYearP,
              yearEnd: mapYearP
            };
          }, [feat, mapYearP])
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 195,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 167,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Row, {
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Box, {
          children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("div", {
            css: _ref16,
            "data-tw": "flex items-center space-x-2",
            children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_15__.Select, {
              showSearch: true,
              style: {
                width: 200
              },
              placeholder: "Select states",
              optionFilterProp: "children",
              onChange: function onChange(v) {
                return setMapStateP(v);
              },
              filterOption: function filterOption(input, option) {
                return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;
              },
              children: states.map(function (state) {
                return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Option, {
                  value: state,
                  children: state
                }, state, false, {
                  fileName: _jsxFileName,
                  lineNumber: 223,
                  columnNumber: 19
                }, _this);
              })
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 211,
              columnNumber: 15
            }, _this)
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 210,
            columnNumber: 13
          }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(VegaComp, {
            func: _functions_perpetratorsByTime__WEBPACK_IMPORTED_MODULE_9__.default,
            name: "perpetratorsByTime",
            options: (0,react__WEBPACK_IMPORTED_MODULE_13__.useMemo)(function () {
              return {
                field: feat,
                state_abbr: mapStateP
              };
            }, [feat, mapStateP])
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 229,
            columnNumber: 13
          }, _this)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 209,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Desc, {
          children: "Dissuade ecstatic and properly saw entirely sir why laughter endeavor. In on my jointure horrible margaret suitable he followed speedily. Indeed vanity excuse or mr lovers of on. By offer scale an stuff. Blush be sorry no sight. Sang lose of hour then he left find. For norland produce age wishing. To figure on it spring season up. Her provision acuteness had excellent two why intention. As called mr needed praise at. Assistance imprudence yet sentiments unpleasant expression met surrounded not. Be at talked ye though secure nearer."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 241,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 208,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 165,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Section, {
      inView: inView,
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(H1, {
        children: "Number of guns used over time"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 255,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Row, {
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Box, {
          children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(VegaComp, {
            func: _components_functions_gunArea__WEBPACK_IMPORTED_MODULE_7__.default,
            name: "gunArea"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 258,
            columnNumber: 13
          }, _this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 257,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Desc, {
          children: "Dissuade ecstatic and properly saw entirely sir why laughter endeavor. In on my jointure horrible margaret suitable he followed speedily. Indeed vanity excuse or mr lovers of on. By offer scale an stuff. Blush be sorry no sight. Sang lose of hour then he left find. For norland produce age wishing. To figure on it spring season up. Her provision acuteness had excellent two why intention. As called mr needed praise at. Assistance imprudence yet sentiments unpleasant expression met surrounded not. Be at talked ye though secure nearer."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 260,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 256,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 254,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Section, {
      inView: inView,
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(H1, {
        children: "Gun counts and kill counts by types"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 273,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Box, {
        children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(VegaComp, {
          func: _functions_numGunByTypes__WEBPACK_IMPORTED_MODULE_8__.default,
          name: "numGunByTypes",
          options: (0,react__WEBPACK_IMPORTED_MODULE_13__.useMemo)(function () {
            return {
              yearStart: 2013,
              yearEnd: 2018
            };
          })
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 275,
          columnNumber: 11
        }, _this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 274,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Desc, {
        children: "Dissuade ecstatic and properly saw entirely sir why laughter endeavor. In on my jointure horrible margaret suitable he followed speedily. Indeed vanity excuse or mr lovers of on. By offer scale an stuff. Blush be sorry no sight. Sang lose of hour then he left find. For norland produce age wishing. To figure on it spring season up. Her provision acuteness had excellent two why intention. As called mr needed praise at. Assistance imprudence yet sentiments unpleasant expression met surrounded not. Be at talked ye though secure nearer."
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 284,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 272,
      columnNumber: 7
    }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Section, {
      inView: inView,
      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(H1, {
        children: "Percentage of gun across US"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 297,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Box, {
        css: _ref17,
        "data-tw": "w-full",
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("div", {
          css: _ref18,
          "data-tw": "flex gap-x-2 justify-around items-center w-full",
          children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_15__.Select, {
            showSearch: true,
            style: {
              width: 200
            },
            placeholder: "Select guns",
            optionFilterProp: "children",
            onChange: function onChange(v) {
              return setGun(v);
            },
            filterOption: function filterOption(input, option) {
              return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;
            },
            children: guns.map(function (gun) {
              return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Option, {
                value: gun,
                children: gun
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 311,
                columnNumber: 17
              }, _this);
            })
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 300,
            columnNumber: 13
          }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("span", {
            css: _ref19,
            "data-tw": "text-gray-50",
            children: "year range"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 314,
            columnNumber: 13
          }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_15__.Slider, {
            value: mapYearG,
            max: 2018,
            min: 2013,
            marks: yearMark,
            css: _ref20,
            "data-tw": "w-3/5",
            onChange: function onChange(v) {
              return setMapYearG(v);
            }
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 315,
            columnNumber: 13
          }, _this)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 299,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(VegaComp, {
          func: _functions_gunMapFull__WEBPACK_IMPORTED_MODULE_10__.default,
          name: "gunMapFull",
          options: (0,react__WEBPACK_IMPORTED_MODULE_13__.useMemo)(function () {
            return {
              gun: gun,
              yearStart: mapYearG,
              yearEnd: mapYearG
            };
          }, [gun, mapYearG])
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 324,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 298,
        columnNumber: 9
      }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Row, {
        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Box, {
          children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)("div", {
            css: _ref21,
            "data-tw": "flex items-center space-x-2",
            children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_15__.Select, {
              showSearch: true,
              style: {
                width: 200
              },
              placeholder: "Select states",
              optionFilterProp: "children",
              onChange: function onChange(v) {
                return setMapStateG(v);
              },
              filterOption: function filterOption(input, option) {
                return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;
              },
              children: states.map(function (state) {
                return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Option, {
                  value: state,
                  children: state
                }, void 0, false, {
                  fileName: _jsxFileName,
                  lineNumber: 352,
                  columnNumber: 19
                }, _this);
              })
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 340,
              columnNumber: 15
            }, _this)
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 339,
            columnNumber: 13
          }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(VegaComp, {
            func: _functions_gunByTime__WEBPACK_IMPORTED_MODULE_11__.default,
            name: "gunByTime",
            options: (0,react__WEBPACK_IMPORTED_MODULE_13__.useMemo)(function () {
              return {
                state_abbr: mapStateG,
                gun: gun
              };
            }, [mapStateG, gun])
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 356,
            columnNumber: 13
          }, _this)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 338,
          columnNumber: 11
        }, _this), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_16__.jsxDEV)(Desc, {
          children: "Dissuade ecstatic and properly saw entirely sir why laughter endeavor. In on my jointure horrible margaret suitable he followed speedily. Indeed vanity excuse or mr lovers of on. By offer scale an stuff. Blush be sorry no sight. Sang lose of hour then he left find. For norland produce age wishing. To figure on it spring season up. Her provision acuteness had excellent two why intention. As called mr needed praise at. Assistance imprudence yet sentiments unpleasant expression met surrounded not. Be at talked ye though secure nearer."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 368,
          columnNumber: 11
        }, _this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 337,
        columnNumber: 9
      }, _this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 296,
      columnNumber: 7
    }, _this)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 78,
    columnNumber: 5
  }, _this);
};

_s(Vis, "FOJc9/C7eNkG34N3Qd2u1RFmqvQ=", false, function () {
  return [react_intersection_observer__WEBPACK_IMPORTED_MODULE_18__.useInView];
});

_c4 = Vis;
/* harmony default export */ __webpack_exports__["default"] = (Vis);

var _c, _c2, _c3, _c4;

$RefreshReg$(_c, "Section");
$RefreshReg$(_c2, "VegaComp$dynamic");
$RefreshReg$(_c3, "VegaComp");
$RefreshReg$(_c4, "Vis");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/choices.js":
/*!*******************************!*\
  !*** ./components/choices.js ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* module decorator */ module = __webpack_require__.hmd(module);
/* harmony default export */ __webpack_exports__["default"] = ({
  features: ["mean_age", "underages_ratio", "male_pctg", "female_pctg"],
  guns: ["Handgun", "9mm", "Shotgun"],
  states: ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"]
});

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/PrepetratorsByGender.js":
/*!******************************************************!*\
  !*** ./components/functions/PrepetratorsByGender.js ***!
  \******************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* harmony import */ var arquero__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! arquero */ "./node_modules/arquero/src/index.js");
/* module decorator */ module = __webpack_require__.hmd(module);






function perpetratorsByGender(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var p = dataSet.p;
  var brush = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.selectInterval() // Brush is a better (vivid?) name than selection in this case!
  .encodings("x"); // limit selection to x-axis (year) values

  var x = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().yearmonth("date");
  var gender_ratio = p.derive({
    month: function month(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.utcmonth(d.date);
    },
    is_male: function is_male(d) {
      return d.gender === "Male";
    },
    is_female: function is_female(d) {
      return d.gender === "Female";
    }
  }).groupby(["month", "year"]).rollup({
    female_pctg: function female_pctg(d) {
      return 100 * arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_female) / (arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_female) + arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_male));
    },
    male_pctg: function male_pctg(d) {
      return 100 * arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_male) / (arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_female) + arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_male));
    },
    date: function date(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.min(arquero__WEBPACK_IMPORTED_MODULE_4__.op.utcdatetime(d.date));
    }
  }).derive({
    date: function date(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.datetime(d.year, d.month);
    }
  }).rename({
    male_pctg: "male",
    female_pctg: "female"
  }).fold(["female", "male"]).rename({
    key: "gender"
  });
  var gender_count = p.derive({
    month: function month(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.utcmonth(d.date);
    },
    is_male: function is_male(d) {
      return d.gender === "Male";
    },
    is_female: function is_female(d) {
      return d.gender === "Female";
    }
  }).groupby(["month", "year"]).rollup({
    female_count: function female_count(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_female);
    },
    male_count: function male_count(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.sum(d.is_male);
    },
    date: function date(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.min(arquero__WEBPACK_IMPORTED_MODULE_4__.op.utcdatetime(d.date));
    }
  }).derive({
    date: function date(d) {
      return arquero__WEBPACK_IMPORTED_MODULE_4__.op.datetime(d.year, d.month);
    }
  }).rename({
    male_count: "male",
    female_count: "female"
  }).fold(["female", "male"]).rename({
    key: "gender"
  });
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markArea().data(gender_count).encode(x, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldQ("value").title("Number of perpetrators"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("gender").scale({
    scheme: "set1"
  })).params(brush).width(450).height(360), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markArea().data(gender_ratio).encode(x, vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldQ("value").title("Percentage of perpetrators"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("gender").scale({
    scheme: "set1"
  })).encode(x.scale({
    domain: brush
  })).width(450).height(360)).config({
    mark: {
      opacity: 0.7
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 13,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      gridOpacity: 0.6,
      domainColor: "white"
    },
    legend: {
      titleFontSize: 16,
      labelFontSize: 14,
      labelColor: "white",
      titleColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (perpetratorsByGender);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/ageBoxplot.js":
/*!********************************************!*\
  !*** ./components/functions/ageBoxplot.js ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function ageBoxplot(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var p = dataSet.p;
  var box = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markBoxplot({
    color: "white",
    opacity: 0.5,
    outliers: null
  }).data(p).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["age"] <= 100')).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldO("year"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().mean("age").scale({
    domain: [0, 70]
  }), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().value("#91faef"));
  var meanLine = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markLine({
    opacity: 0.9
  }).data(p.derive({
    label: function label(d) {
      return "Mean Age";
    }
  })).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["age"] <= 100')).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldO("year"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().mean("age").scale({
    domain: [0, 70]
  }), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("label").scale({
    scheme: "set3"
  }));
  var medianLine = vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markLine().data(p.derive({
    label: function label(d) {
      return "Median Age";
    }
  })).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["age"] <= 100')).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldO("year"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().median("age").scale({
    domain: [0, 70]
  }), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("label").scale({
    scheme: "set3"
  }));
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.layer(box, medianLine, meanLine).width(480).height(360).config({
    mark: {
      opacity: 0.7
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 13,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      gridOpacity: 0.4,
      domainColor: "white"
    },
    legend: {
      labelFontSize: 14,
      labelColor: "white",
      titleColor: "white",
      title: null
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (ageBoxplot);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/ageHistogram.js":
/*!**********************************************!*\
  !*** ./components/functions/ageHistogram.js ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* harmony import */ var arquero__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! arquero */ "./node_modules/arquero/src/index.js");
/* module decorator */ module = __webpack_require__.hmd(module);






function ageHistogram(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var p = dataSet.p;
  var yearStart = options.yearStart,
      yearEnd = options.yearEnd,
      color = options.color;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markBar().data(p).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["year"] >= ' + yearStart + ' && datum["year"] <= ' + yearEnd)).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldQ("age").scale({
    domain: [0, 100]
  }).bin({
    step: 10
  }).title("Age"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().count().title("Number of Perpetrators"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().value(color)).width(480).height(360).config({
    mark: {
      opacity: 0.8
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 13,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridOpacity: 0.6,
      gridColor: "white",
      domainColor: "white"
    },
    legend: {
      titleFontSize: 16,
      labelFontSize: 14,
      labelColor: "white",
      titleColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (ageHistogram);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/gunArea.js":
/*!*****************************************!*\
  !*** ./components/functions/gunArea.js ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function gunArea(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var gstm = dataSet.gstm;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markArea({
    opacity: 0.8
  }).data(gstm).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().yearmonth("date"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().sum("count_guns").title("Number of guns"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("gun").scale({
    scheme: "category20b"
  }).title("Gun type")).width(720).height(400).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 13,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      gridOpacity: 0.4,
      domainColor: "white"
    },
    legend: {
      titleFontSize: 16,
      labelFontSize: 14,
      labelColor: "white",
      titleColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (gunArea);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/gunByTime.js":
/*!*******************************************!*\
  !*** ./components/functions/gunByTime.js ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function gunByTime(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var gsty = dataSet.gsty;
  var state_abbr = options.state_abbr,
      gun = options.gun;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markLine().data(gsty.derive({
    state: function state(d) {
      return "all";
    }
  })).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["gun"] == "' + gun + '"')).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldO("year"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().mean("gun_percentage"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("state").title("State")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markLine().data(gsty).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["state_abbr"] == ' + '"' + state_abbr + '" && datum["gun"] == "' + gun + '"')).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldO("year"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().mean("gun_percentage").title("Percentage of " + gun), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("state_abbr").title(null))).width(500).height(360).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 13,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      gridOpacity: 0.4,
      domainColor: "white"
    },
    legend: {
      labelFontSize: 14,
      labelColor: "white",
      titleColor: "white",
      title: null
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (gunByTime);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/gunCounts.js":
/*!*******************************************!*\
  !*** ./components/functions/gunCounts.js ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function gunCounts(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var yearStart = options.yearStart,
      yearEnd = options.yearEnd;
  var gsty = dataSet.gsty;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markBar({
    opacity: 0.8
  }).data(gsty).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter("datum['gun'] != 'Unknown' && datum['year'] >= " + yearStart + " && datum['year'] <= " + yearEnd)).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldN("gun").sort(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.count()), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().count().title("Number of guns"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("gun").scale({
    scheme: "category20b"
  }).legend(false).title("Gun type"));
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (gunCounts);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/gunKillCounts.js":
/*!***********************************************!*\
  !*** ./components/functions/gunKillCounts.js ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function gunKillCounts(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var yearStart = options.yearStart,
      yearEnd = options.yearEnd;
  var gsty = dataSet.gsty;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markBar({
    opacity: 0.8
  }).data(gsty).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter("datum['gun'] != 'Unknown' && datum['year'] >= " + yearStart + " && datum['year'] <= " + yearEnd)).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldN("gun").sort(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("n_killed")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().mean("n_killed").title("Mean kill counts in an incident"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("gun").scale({
    scheme: "category20b"
  }).legend(false).title("Gun type"));
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (gunKillCounts);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/gunMapFull.js":
/*!********************************************!*\
  !*** ./components/functions/gunMapFull.js ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* harmony import */ var arquero__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! arquero */ "./node_modules/arquero/src/index.js");
/* module decorator */ module = __webpack_require__.hmd(module);






function gunRect(data, gun, yearStart, yearEnd) {
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markRect().data(data).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["gun"] == "' + gun + '" && datum["year"] >= ' + yearStart + ' && datum["year"] <= ' + yearEnd), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.groupby("state").aggregate(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("latitude").as("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("longitude").as("longitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("gun_percentage").as("Percentage of " + gun), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("total_guns_per_1M").as("Total guns/1M population/year"))).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldN("state").sort(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("Percentage of " + gun).order("descending")).title("State"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldQ("Percentage of " + gun), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip([vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldN("state"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("Percentage of " + gun), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("Total guns/1M population/year")]));
}

function gunMap(data, gun, yearStart, yearEnd, usa) {
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markGeoshape({
    fill: "#374151",
    stroke: "#fff",
    strokeWidth: 1
  }).data(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.topojson(usa).feature("states")).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.lookup("id").from(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.data(data).key("fip").fields("state"))).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip("state")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markCircle({
    stroke: "white",
    strokeWidth: 2
  }).data(data).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["gun"] == "' + gun + '" && datum["year"] >= ' + yearStart + ' && datum["year"] <= ' + yearEnd), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.groupby("state").aggregate(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("latitude").as("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("longitude").as("longitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("gun_percentage").as("Percentage of " + gun), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("total_guns_per_1M").as("Total guns/1M population/year"))).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.latitude().fieldQ("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.longitude().fieldQ("longitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldQ("Percentage of " + gun).scale({
    scheme: "redpurple",
    clamp: true
  }), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.size().fieldQ("Total guns/1M population/year").title(["Total guns/", "1M population/year"]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip([vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldN("state"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("Percentage of " + gun), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("Total guns/1M population/year")]))).project(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.projection("albersUsa"));
}

function gunMapFull(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var gsty = dataSet.gsty,
      usa = dataSet.usa;
  var gun = options.gun,
      yearStart = options.yearStart,
      yearEnd = options.yearEnd;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(gunRect(gsty, gun, yearStart, yearEnd).height(500), gunMap(gsty, gun, yearStart, yearEnd, usa).height(500).width(720)).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 16,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      domainColor: "white"
    },
    legend: {
      titleFontSize: 14,
      labelFontSize: 12,
      labelColor: "white",
      titleColor: "white",
      symbolFillColor: "#6b7280",
      symbolStrokeColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (gunMapFull);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/numGunByTypes.js":
/*!***********************************************!*\
  !*** ./components/functions/numGunByTypes.js ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* harmony import */ var _gunCounts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gunCounts */ "./components/functions/gunCounts.js");
/* harmony import */ var _gunKillCounts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./gunKillCounts */ "./components/functions/gunKillCounts.js");
/* module decorator */ module = __webpack_require__.hmd(module);







function numGunByTypes(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat((0,_gunCounts__WEBPACK_IMPORTED_MODULE_4__.default)({
    dataSet: dataSet,
    options: options
  }).width(400), (0,_gunKillCounts__WEBPACK_IMPORTED_MODULE_5__.default)({
    dataSet: dataSet,
    options: options
  }).width(400)).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 13,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      gridOpacity: 0.4,
      domainColor: "white"
    },
    legend: {
      titleFontSize: 16,
      labelFontSize: 14,
      labelColor: "white",
      titleColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (numGunByTypes);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/perpetratorMapFull.js":
/*!****************************************************!*\
  !*** ./components/functions/perpetratorMapFull.js ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function perpetratorRect(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var pst = dataSet.pst;
  var field = options.field,
      yearStart = options.yearStart,
      yearEnd = options.yearEnd;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markRect().data(pst).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["year"] >= ' + yearStart + ' && datum["year"] <= ' + yearEnd)).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().fieldN("state").sort(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean(field).order("descending")).title("State"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().mean(field), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip([vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldN("state"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean(field)]));
}

function perpetratorMap(_ref2) {
  var dataSet = _ref2.dataSet,
      options = _ref2.options;
  var field = options.field,
      yearStart = options.yearStart,
      yearEnd = options.yearEnd;
  var pst = dataSet.pst,
      usa = dataSet.usa;
  var titles = {
    mean_age: "Perpetrators mean age",
    underages_ratio: ["Ratio of underage/total", "perpetrators"],
    male_pctg: ["Percentage of ", "male perpetrators"],
    female_pctg: ["Percentage of ", "female perpetrators"]
  };
  var schemes = {
    mean_age: "goldred",
    underages_ratio: "yellowgreenblue",
    male_pctg: "tealblues",
    female_pctg: "redpurple"
  };
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.data(pst).layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markGeoshape({
    fill: "#374151",
    stroke: "#fff",
    strokeWidth: 1
  }).data(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.topojson(usa).feature("states")).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.lookup("id").from(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.data(pst).key("fip").fields("state"))).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip("state")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markCircle({
    stroke: "#white"
  }).data(pst).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["year"] >= ' + yearStart + ' && datum["year"] <= ' + yearEnd), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.groupby("state").aggregate(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean(field).as(field), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("perpetrators_per_1M").as("perpetrators_per_1M"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("latitude").as("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.mean("longitude").as("longitude"))).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.latitude().fieldQ("latitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.longitude().fieldQ("longitude"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().mean(field).legend({
    titleLineHeight: 10
  }).scale({
    scheme: schemes[field]
  }).title(titles[field]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.size().mean("perpetrators_per_1M").title(["Perpetrators/", "1M population/year"]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.tooltip([vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldN("state"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ(field), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.fieldQ("perpetrators_per_1M")]))).project(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.projection("albersUsa"));
}

function perpetratorMapFull(_ref3) {
  var dataSet = _ref3.dataSet,
      options = _ref3.options;
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.hconcat(perpetratorRect({
    dataSet: dataSet,
    options: options
  }).height(500), perpetratorMap({
    dataSet: dataSet,
    options: options
  }).height(500).width(720)).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 16,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridColor: "white",
      domainColor: "white"
    },
    legend: {
      titleFontSize: 14,
      labelFontSize: 12,
      labelColor: "white",
      titleColor: "white",
      symbolFillColor: "#6b7280",
      symbolStrokeColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (perpetratorMapFull);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./components/functions/perpetratorsByTime.js":
/*!****************************************************!*\
  !*** ./components/functions/perpetratorsByTime.js ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vega */ "./node_modules/vega/build/vega.module.js");
/* harmony import */ var vega_lite_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vega-lite-api */ "./node_modules/vega-lite-api/src/index.js");
/* harmony import */ var vega_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vega-lite */ "./node_modules/vega-lite/build/src/index.js");
/* harmony import */ var vega_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vega-tooltip */ "./node_modules/vega-tooltip/build/vega-tooltip.module.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function perpetratorsByTime(_ref) {
  var dataSet = _ref.dataSet,
      options = _ref.options;
  var field = options.field,
      state_abbr = options.state_abbr;
  var pst = dataSet.pst;
  var titles = {
    mean_age: "Perpetrators mean age",
    underages_ratio: ["Ratio of underage/total", "perpetrators"],
    male_pctg: ["Percentage of ", "male perpetrators"],
    female_pctg: ["Percentage of ", "female perpetrators"]
  };
  return vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.layer(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markLine().data(pst.derive({
    state: function state(d) {
      return "all";
    }
  })).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldO("year"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().mean(field).title(titles[field]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("state").title("State")), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.markLine().data(pst).transform(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.filter('datum["state_abbr"] == ' + '"' + state_abbr + '"')).encode(vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.x().fieldO("year"), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.y().mean(field).title(titles[field]), vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.color().fieldN("state_abbr").title(null))).width(500).height(360).config({
    mark: {
      opacity: 0.9
    },
    background: "#1f2937",
    axis: {
      titleFontSize: 13,
      tickColor: "white",
      labelColor: "white",
      titleColor: "white",
      gridOpacity: 0.6,
      gridColor: "white",
      domainColor: "white"
    },
    legend: {
      titleFontSize: 16,
      labelFontSize: 14,
      labelColor: "white",
      titleColor: "white"
    },
    scale: {
      maxSize: 1500
    },
    view: {
      stroke: null
    }
  });
}

var vegaOptions = {
  config: {// Vega-Lite default configuration
  },
  init: function init(view) {
    // initialize tooltip handler
    view.tooltip(new vega_tooltip__WEBPACK_IMPORTED_MODULE_3__.Handler().call);
  },
  view: {
    renderer: "canvas"
  }
};
vega_lite_api__WEBPACK_IMPORTED_MODULE_1__.register(vega__WEBPACK_IMPORTED_MODULE_0__, vega_lite__WEBPACK_IMPORTED_MODULE_2__, vegaOptions);
/* harmony default export */ __webpack_exports__["default"] = (perpetratorsByTime);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!***************************************************!*\
  !*** ./node_modules/moment/locale/ sync ^\.\/.*$ ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn-bd": "./node_modules/moment/locale/bn-bd.js",
	"./bn-bd.js": "./node_modules/moment/locale/bn-bd.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-in": "./node_modules/moment/locale/en-in.js",
	"./en-in.js": "./node_modules/moment/locale/en-in.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./en-sg": "./node_modules/moment/locale/en-sg.js",
	"./en-sg.js": "./node_modules/moment/locale/en-sg.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-mx": "./node_modules/moment/locale/es-mx.js",
	"./es-mx.js": "./node_modules/moment/locale/es-mx.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fil": "./node_modules/moment/locale/fil.js",
	"./fil.js": "./node_modules/moment/locale/fil.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-deva": "./node_modules/moment/locale/gom-deva.js",
	"./gom-deva.js": "./node_modules/moment/locale/gom-deva.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./oc-lnc": "./node_modules/moment/locale/oc-lnc.js",
	"./oc-lnc.js": "./node_modules/moment/locale/oc-lnc.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tk": "./node_modules/moment/locale/tk.js",
	"./tk.js": "./node_modules/moment/locale/tk.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-mo": "./node_modules/moment/locale/zh-mo.js",
	"./zh-mo.js": "./node_modules/moment/locale/zh-mo.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,